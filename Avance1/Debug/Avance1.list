
Avance1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071f0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080072fc  080072fc  000172fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007334  08007334  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007334  08007334  00017334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800733c  0800733c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800733c  0800733c  0001733c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007340  08007340  00017340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007344  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  2000000c  08007350  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08007350  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a55c  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d3c  00000000  00000000  0002a591  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000978  00000000  00000000  0002c2d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008b8  00000000  00000000  0002cc48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016e46  00000000  00000000  0002d500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cc02  00000000  00000000  00044346  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000840ae  00000000  00000000  00050f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d4ff6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002798  00000000  00000000  000d5048  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080072e4 	.word	0x080072e4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080072e4 	.word	0x080072e4

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_ldivmod>:
 80006f4:	b97b      	cbnz	r3, 8000716 <__aeabi_ldivmod+0x22>
 80006f6:	b972      	cbnz	r2, 8000716 <__aeabi_ldivmod+0x22>
 80006f8:	2900      	cmp	r1, #0
 80006fa:	bfbe      	ittt	lt
 80006fc:	2000      	movlt	r0, #0
 80006fe:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000702:	e006      	blt.n	8000712 <__aeabi_ldivmod+0x1e>
 8000704:	bf08      	it	eq
 8000706:	2800      	cmpeq	r0, #0
 8000708:	bf1c      	itt	ne
 800070a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800070e:	f04f 30ff 	movne.w	r0, #4294967295
 8000712:	f000 b9a9 	b.w	8000a68 <__aeabi_idiv0>
 8000716:	f1ad 0c08 	sub.w	ip, sp, #8
 800071a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800071e:	2900      	cmp	r1, #0
 8000720:	db09      	blt.n	8000736 <__aeabi_ldivmod+0x42>
 8000722:	2b00      	cmp	r3, #0
 8000724:	db1a      	blt.n	800075c <__aeabi_ldivmod+0x68>
 8000726:	f000 f835 	bl	8000794 <__udivmoddi4>
 800072a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800072e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000732:	b004      	add	sp, #16
 8000734:	4770      	bx	lr
 8000736:	4240      	negs	r0, r0
 8000738:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800073c:	2b00      	cmp	r3, #0
 800073e:	db1b      	blt.n	8000778 <__aeabi_ldivmod+0x84>
 8000740:	f000 f828 	bl	8000794 <__udivmoddi4>
 8000744:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000748:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800074c:	b004      	add	sp, #16
 800074e:	4240      	negs	r0, r0
 8000750:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000754:	4252      	negs	r2, r2
 8000756:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800075a:	4770      	bx	lr
 800075c:	4252      	negs	r2, r2
 800075e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000762:	f000 f817 	bl	8000794 <__udivmoddi4>
 8000766:	f8dd e004 	ldr.w	lr, [sp, #4]
 800076a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800076e:	b004      	add	sp, #16
 8000770:	4240      	negs	r0, r0
 8000772:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000776:	4770      	bx	lr
 8000778:	4252      	negs	r2, r2
 800077a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800077e:	f000 f809 	bl	8000794 <__udivmoddi4>
 8000782:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000786:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800078a:	b004      	add	sp, #16
 800078c:	4252      	negs	r2, r2
 800078e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000792:	4770      	bx	lr

08000794 <__udivmoddi4>:
 8000794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000798:	9e08      	ldr	r6, [sp, #32]
 800079a:	460d      	mov	r5, r1
 800079c:	4604      	mov	r4, r0
 800079e:	4688      	mov	r8, r1
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d14d      	bne.n	8000840 <__udivmoddi4+0xac>
 80007a4:	428a      	cmp	r2, r1
 80007a6:	4694      	mov	ip, r2
 80007a8:	d968      	bls.n	800087c <__udivmoddi4+0xe8>
 80007aa:	fab2 f282 	clz	r2, r2
 80007ae:	b152      	cbz	r2, 80007c6 <__udivmoddi4+0x32>
 80007b0:	fa01 f302 	lsl.w	r3, r1, r2
 80007b4:	f1c2 0120 	rsb	r1, r2, #32
 80007b8:	fa20 f101 	lsr.w	r1, r0, r1
 80007bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80007c0:	ea41 0803 	orr.w	r8, r1, r3
 80007c4:	4094      	lsls	r4, r2
 80007c6:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80007ca:	fbb8 f7f1 	udiv	r7, r8, r1
 80007ce:	fa1f fe8c 	uxth.w	lr, ip
 80007d2:	fb01 8817 	mls	r8, r1, r7, r8
 80007d6:	fb07 f00e 	mul.w	r0, r7, lr
 80007da:	0c23      	lsrs	r3, r4, #16
 80007dc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80007e0:	4298      	cmp	r0, r3
 80007e2:	d90a      	bls.n	80007fa <__udivmoddi4+0x66>
 80007e4:	eb1c 0303 	adds.w	r3, ip, r3
 80007e8:	f107 35ff 	add.w	r5, r7, #4294967295
 80007ec:	f080 811e 	bcs.w	8000a2c <__udivmoddi4+0x298>
 80007f0:	4298      	cmp	r0, r3
 80007f2:	f240 811b 	bls.w	8000a2c <__udivmoddi4+0x298>
 80007f6:	3f02      	subs	r7, #2
 80007f8:	4463      	add	r3, ip
 80007fa:	1a1b      	subs	r3, r3, r0
 80007fc:	fbb3 f0f1 	udiv	r0, r3, r1
 8000800:	fb01 3310 	mls	r3, r1, r0, r3
 8000804:	fb00 fe0e 	mul.w	lr, r0, lr
 8000808:	b2a4      	uxth	r4, r4
 800080a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800080e:	45a6      	cmp	lr, r4
 8000810:	d90a      	bls.n	8000828 <__udivmoddi4+0x94>
 8000812:	eb1c 0404 	adds.w	r4, ip, r4
 8000816:	f100 33ff 	add.w	r3, r0, #4294967295
 800081a:	f080 8109 	bcs.w	8000a30 <__udivmoddi4+0x29c>
 800081e:	45a6      	cmp	lr, r4
 8000820:	f240 8106 	bls.w	8000a30 <__udivmoddi4+0x29c>
 8000824:	4464      	add	r4, ip
 8000826:	3802      	subs	r0, #2
 8000828:	2100      	movs	r1, #0
 800082a:	eba4 040e 	sub.w	r4, r4, lr
 800082e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000832:	b11e      	cbz	r6, 800083c <__udivmoddi4+0xa8>
 8000834:	2300      	movs	r3, #0
 8000836:	40d4      	lsrs	r4, r2
 8000838:	e9c6 4300 	strd	r4, r3, [r6]
 800083c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000840:	428b      	cmp	r3, r1
 8000842:	d908      	bls.n	8000856 <__udivmoddi4+0xc2>
 8000844:	2e00      	cmp	r6, #0
 8000846:	f000 80ee 	beq.w	8000a26 <__udivmoddi4+0x292>
 800084a:	2100      	movs	r1, #0
 800084c:	e9c6 0500 	strd	r0, r5, [r6]
 8000850:	4608      	mov	r0, r1
 8000852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000856:	fab3 f183 	clz	r1, r3
 800085a:	2900      	cmp	r1, #0
 800085c:	d14a      	bne.n	80008f4 <__udivmoddi4+0x160>
 800085e:	42ab      	cmp	r3, r5
 8000860:	d302      	bcc.n	8000868 <__udivmoddi4+0xd4>
 8000862:	4282      	cmp	r2, r0
 8000864:	f200 80fc 	bhi.w	8000a60 <__udivmoddi4+0x2cc>
 8000868:	1a84      	subs	r4, r0, r2
 800086a:	eb65 0303 	sbc.w	r3, r5, r3
 800086e:	2001      	movs	r0, #1
 8000870:	4698      	mov	r8, r3
 8000872:	2e00      	cmp	r6, #0
 8000874:	d0e2      	beq.n	800083c <__udivmoddi4+0xa8>
 8000876:	e9c6 4800 	strd	r4, r8, [r6]
 800087a:	e7df      	b.n	800083c <__udivmoddi4+0xa8>
 800087c:	b902      	cbnz	r2, 8000880 <__udivmoddi4+0xec>
 800087e:	deff      	udf	#255	; 0xff
 8000880:	fab2 f282 	clz	r2, r2
 8000884:	2a00      	cmp	r2, #0
 8000886:	f040 8091 	bne.w	80009ac <__udivmoddi4+0x218>
 800088a:	eba1 000c 	sub.w	r0, r1, ip
 800088e:	2101      	movs	r1, #1
 8000890:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000894:	fa1f fe8c 	uxth.w	lr, ip
 8000898:	fbb0 f3f7 	udiv	r3, r0, r7
 800089c:	fb07 0013 	mls	r0, r7, r3, r0
 80008a0:	0c25      	lsrs	r5, r4, #16
 80008a2:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80008a6:	fb0e f003 	mul.w	r0, lr, r3
 80008aa:	42a8      	cmp	r0, r5
 80008ac:	d908      	bls.n	80008c0 <__udivmoddi4+0x12c>
 80008ae:	eb1c 0505 	adds.w	r5, ip, r5
 80008b2:	f103 38ff 	add.w	r8, r3, #4294967295
 80008b6:	d202      	bcs.n	80008be <__udivmoddi4+0x12a>
 80008b8:	42a8      	cmp	r0, r5
 80008ba:	f200 80ce 	bhi.w	8000a5a <__udivmoddi4+0x2c6>
 80008be:	4643      	mov	r3, r8
 80008c0:	1a2d      	subs	r5, r5, r0
 80008c2:	fbb5 f0f7 	udiv	r0, r5, r7
 80008c6:	fb07 5510 	mls	r5, r7, r0, r5
 80008ca:	fb0e fe00 	mul.w	lr, lr, r0
 80008ce:	b2a4      	uxth	r4, r4
 80008d0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80008d4:	45a6      	cmp	lr, r4
 80008d6:	d908      	bls.n	80008ea <__udivmoddi4+0x156>
 80008d8:	eb1c 0404 	adds.w	r4, ip, r4
 80008dc:	f100 35ff 	add.w	r5, r0, #4294967295
 80008e0:	d202      	bcs.n	80008e8 <__udivmoddi4+0x154>
 80008e2:	45a6      	cmp	lr, r4
 80008e4:	f200 80b6 	bhi.w	8000a54 <__udivmoddi4+0x2c0>
 80008e8:	4628      	mov	r0, r5
 80008ea:	eba4 040e 	sub.w	r4, r4, lr
 80008ee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80008f2:	e79e      	b.n	8000832 <__udivmoddi4+0x9e>
 80008f4:	f1c1 0720 	rsb	r7, r1, #32
 80008f8:	408b      	lsls	r3, r1
 80008fa:	fa22 fc07 	lsr.w	ip, r2, r7
 80008fe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000902:	fa25 fa07 	lsr.w	sl, r5, r7
 8000906:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800090a:	fbba f8f9 	udiv	r8, sl, r9
 800090e:	fa20 f307 	lsr.w	r3, r0, r7
 8000912:	fb09 aa18 	mls	sl, r9, r8, sl
 8000916:	408d      	lsls	r5, r1
 8000918:	fa1f fe8c 	uxth.w	lr, ip
 800091c:	431d      	orrs	r5, r3
 800091e:	fa00 f301 	lsl.w	r3, r0, r1
 8000922:	fb08 f00e 	mul.w	r0, r8, lr
 8000926:	0c2c      	lsrs	r4, r5, #16
 8000928:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800092c:	42a0      	cmp	r0, r4
 800092e:	fa02 f201 	lsl.w	r2, r2, r1
 8000932:	d90b      	bls.n	800094c <__udivmoddi4+0x1b8>
 8000934:	eb1c 0404 	adds.w	r4, ip, r4
 8000938:	f108 3aff 	add.w	sl, r8, #4294967295
 800093c:	f080 8088 	bcs.w	8000a50 <__udivmoddi4+0x2bc>
 8000940:	42a0      	cmp	r0, r4
 8000942:	f240 8085 	bls.w	8000a50 <__udivmoddi4+0x2bc>
 8000946:	f1a8 0802 	sub.w	r8, r8, #2
 800094a:	4464      	add	r4, ip
 800094c:	1a24      	subs	r4, r4, r0
 800094e:	fbb4 f0f9 	udiv	r0, r4, r9
 8000952:	fb09 4410 	mls	r4, r9, r0, r4
 8000956:	fb00 fe0e 	mul.w	lr, r0, lr
 800095a:	b2ad      	uxth	r5, r5
 800095c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000960:	45a6      	cmp	lr, r4
 8000962:	d908      	bls.n	8000976 <__udivmoddi4+0x1e2>
 8000964:	eb1c 0404 	adds.w	r4, ip, r4
 8000968:	f100 35ff 	add.w	r5, r0, #4294967295
 800096c:	d26c      	bcs.n	8000a48 <__udivmoddi4+0x2b4>
 800096e:	45a6      	cmp	lr, r4
 8000970:	d96a      	bls.n	8000a48 <__udivmoddi4+0x2b4>
 8000972:	3802      	subs	r0, #2
 8000974:	4464      	add	r4, ip
 8000976:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800097a:	fba0 9502 	umull	r9, r5, r0, r2
 800097e:	eba4 040e 	sub.w	r4, r4, lr
 8000982:	42ac      	cmp	r4, r5
 8000984:	46c8      	mov	r8, r9
 8000986:	46ae      	mov	lr, r5
 8000988:	d356      	bcc.n	8000a38 <__udivmoddi4+0x2a4>
 800098a:	d053      	beq.n	8000a34 <__udivmoddi4+0x2a0>
 800098c:	2e00      	cmp	r6, #0
 800098e:	d069      	beq.n	8000a64 <__udivmoddi4+0x2d0>
 8000990:	ebb3 0208 	subs.w	r2, r3, r8
 8000994:	eb64 040e 	sbc.w	r4, r4, lr
 8000998:	fa22 f301 	lsr.w	r3, r2, r1
 800099c:	fa04 f707 	lsl.w	r7, r4, r7
 80009a0:	431f      	orrs	r7, r3
 80009a2:	40cc      	lsrs	r4, r1
 80009a4:	e9c6 7400 	strd	r7, r4, [r6]
 80009a8:	2100      	movs	r1, #0
 80009aa:	e747      	b.n	800083c <__udivmoddi4+0xa8>
 80009ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80009b0:	f1c2 0120 	rsb	r1, r2, #32
 80009b4:	fa25 f301 	lsr.w	r3, r5, r1
 80009b8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009bc:	fa20 f101 	lsr.w	r1, r0, r1
 80009c0:	4095      	lsls	r5, r2
 80009c2:	430d      	orrs	r5, r1
 80009c4:	fbb3 f1f7 	udiv	r1, r3, r7
 80009c8:	fb07 3311 	mls	r3, r7, r1, r3
 80009cc:	fa1f fe8c 	uxth.w	lr, ip
 80009d0:	0c28      	lsrs	r0, r5, #16
 80009d2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80009d6:	fb01 f30e 	mul.w	r3, r1, lr
 80009da:	4283      	cmp	r3, r0
 80009dc:	fa04 f402 	lsl.w	r4, r4, r2
 80009e0:	d908      	bls.n	80009f4 <__udivmoddi4+0x260>
 80009e2:	eb1c 0000 	adds.w	r0, ip, r0
 80009e6:	f101 38ff 	add.w	r8, r1, #4294967295
 80009ea:	d22f      	bcs.n	8000a4c <__udivmoddi4+0x2b8>
 80009ec:	4283      	cmp	r3, r0
 80009ee:	d92d      	bls.n	8000a4c <__udivmoddi4+0x2b8>
 80009f0:	3902      	subs	r1, #2
 80009f2:	4460      	add	r0, ip
 80009f4:	1ac0      	subs	r0, r0, r3
 80009f6:	fbb0 f3f7 	udiv	r3, r0, r7
 80009fa:	fb07 0013 	mls	r0, r7, r3, r0
 80009fe:	b2ad      	uxth	r5, r5
 8000a00:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000a04:	fb03 f00e 	mul.w	r0, r3, lr
 8000a08:	42a8      	cmp	r0, r5
 8000a0a:	d908      	bls.n	8000a1e <__udivmoddi4+0x28a>
 8000a0c:	eb1c 0505 	adds.w	r5, ip, r5
 8000a10:	f103 38ff 	add.w	r8, r3, #4294967295
 8000a14:	d216      	bcs.n	8000a44 <__udivmoddi4+0x2b0>
 8000a16:	42a8      	cmp	r0, r5
 8000a18:	d914      	bls.n	8000a44 <__udivmoddi4+0x2b0>
 8000a1a:	3b02      	subs	r3, #2
 8000a1c:	4465      	add	r5, ip
 8000a1e:	1a28      	subs	r0, r5, r0
 8000a20:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a24:	e738      	b.n	8000898 <__udivmoddi4+0x104>
 8000a26:	4631      	mov	r1, r6
 8000a28:	4630      	mov	r0, r6
 8000a2a:	e707      	b.n	800083c <__udivmoddi4+0xa8>
 8000a2c:	462f      	mov	r7, r5
 8000a2e:	e6e4      	b.n	80007fa <__udivmoddi4+0x66>
 8000a30:	4618      	mov	r0, r3
 8000a32:	e6f9      	b.n	8000828 <__udivmoddi4+0x94>
 8000a34:	454b      	cmp	r3, r9
 8000a36:	d2a9      	bcs.n	800098c <__udivmoddi4+0x1f8>
 8000a38:	ebb9 0802 	subs.w	r8, r9, r2
 8000a3c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000a40:	3801      	subs	r0, #1
 8000a42:	e7a3      	b.n	800098c <__udivmoddi4+0x1f8>
 8000a44:	4643      	mov	r3, r8
 8000a46:	e7ea      	b.n	8000a1e <__udivmoddi4+0x28a>
 8000a48:	4628      	mov	r0, r5
 8000a4a:	e794      	b.n	8000976 <__udivmoddi4+0x1e2>
 8000a4c:	4641      	mov	r1, r8
 8000a4e:	e7d1      	b.n	80009f4 <__udivmoddi4+0x260>
 8000a50:	46d0      	mov	r8, sl
 8000a52:	e77b      	b.n	800094c <__udivmoddi4+0x1b8>
 8000a54:	4464      	add	r4, ip
 8000a56:	3802      	subs	r0, #2
 8000a58:	e747      	b.n	80008ea <__udivmoddi4+0x156>
 8000a5a:	3b02      	subs	r3, #2
 8000a5c:	4465      	add	r5, ip
 8000a5e:	e72f      	b.n	80008c0 <__udivmoddi4+0x12c>
 8000a60:	4608      	mov	r0, r1
 8000a62:	e706      	b.n	8000872 <__udivmoddi4+0xde>
 8000a64:	4631      	mov	r1, r6
 8000a66:	e6e9      	b.n	800083c <__udivmoddi4+0xa8>

08000a68 <__aeabi_idiv0>:
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2203      	movs	r2, #3
 8000a78:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	2203      	movs	r2, #3
 8000a84:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_HIGH_RES;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	2204      	movs	r2, #4
 8000a8a:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_HIGH_RES;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2204      	movs	r2, #4
 8000a90:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	2203      	movs	r2, #3
 8000a96:	715a      	strb	r2, [r3, #5]
}
 8000a98:	bf00      	nop
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bc80      	pop	{r7}
 8000aa0:	4770      	bx	lr

08000aa2 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b08a      	sub	sp, #40	; 0x28
 8000aa6:	af04      	add	r7, sp, #16
 8000aa8:	60f8      	str	r0, [r7, #12]
 8000aaa:	460b      	mov	r3, r1
 8000aac:	607a      	str	r2, [r7, #4]
 8000aae:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000ab4:	005b      	lsls	r3, r3, #1
 8000ab6:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000abc:	7afb      	ldrb	r3, [r7, #11]
 8000abe:	b29a      	uxth	r2, r3
 8000ac0:	8af9      	ldrh	r1, [r7, #22]
 8000ac2:	f241 3388 	movw	r3, #5000	; 0x1388
 8000ac6:	9302      	str	r3, [sp, #8]
 8000ac8:	2302      	movs	r3, #2
 8000aca:	9301      	str	r3, [sp, #4]
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	9300      	str	r3, [sp, #0]
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	f003 fbb4 	bl	8004240 <HAL_I2C_Mem_Read>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d10b      	bne.n	8000af6 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8000ade:	7d7b      	ldrb	r3, [r7, #21]
 8000ae0:	021b      	lsls	r3, r3, #8
 8000ae2:	b21a      	sxth	r2, r3
 8000ae4:	7d3b      	ldrb	r3, [r7, #20]
 8000ae6:	b21b      	sxth	r3, r3
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	b21b      	sxth	r3, r3
 8000aec:	b29a      	uxth	r2, r3
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	801a      	strh	r2, [r3, #0]
		return true;
 8000af2:	2301      	movs	r3, #1
 8000af4:	e000      	b.n	8000af8 <read_register16+0x56>
	} else
		return false;
 8000af6:	2300      	movs	r3, #0

}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3718      	adds	r7, #24
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 8000b00:	b590      	push	{r4, r7, lr}
 8000b02:	b08b      	sub	sp, #44	; 0x2c
 8000b04:	af04      	add	r7, sp, #16
 8000b06:	60f8      	str	r0, [r7, #12]
 8000b08:	607a      	str	r2, [r7, #4]
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	460b      	mov	r3, r1
 8000b0e:	72fb      	strb	r3, [r7, #11]
 8000b10:	4613      	mov	r3, r2
 8000b12:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000b18:	005b      	lsls	r3, r3, #1
 8000b1a:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000b20:	7afb      	ldrb	r3, [r7, #11]
 8000b22:	b29a      	uxth	r2, r3
 8000b24:	7abb      	ldrb	r3, [r7, #10]
 8000b26:	b29b      	uxth	r3, r3
 8000b28:	8af9      	ldrh	r1, [r7, #22]
 8000b2a:	f241 3488 	movw	r4, #5000	; 0x1388
 8000b2e:	9402      	str	r4, [sp, #8]
 8000b30:	9301      	str	r3, [sp, #4]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	9300      	str	r3, [sp, #0]
 8000b36:	2301      	movs	r3, #1
 8000b38:	f003 fb82 	bl	8004240 <HAL_I2C_Mem_Read>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d101      	bne.n	8000b46 <read_data+0x46>
		return 0;
 8000b42:	2300      	movs	r3, #0
 8000b44:	e000      	b.n	8000b48 <read_data+0x48>
	else
		return 1;
 8000b46:	2301      	movs	r3, #1

}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	371c      	adds	r7, #28
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd90      	pop	{r4, r7, pc}

08000b50 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	2188      	movs	r1, #136	; 0x88
 8000b5e:	6878      	ldr	r0, [r7, #4]
 8000b60:	f7ff ff9f 	bl	8000aa2 <read_register16>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d06f      	beq.n	8000c4a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	3302      	adds	r3, #2
 8000b6e:	461a      	mov	r2, r3
 8000b70:	218a      	movs	r1, #138	; 0x8a
 8000b72:	6878      	ldr	r0, [r7, #4]
 8000b74:	f7ff ff95 	bl	8000aa2 <read_register16>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d065      	beq.n	8000c4a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	3304      	adds	r3, #4
 8000b82:	461a      	mov	r2, r3
 8000b84:	218c      	movs	r1, #140	; 0x8c
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f7ff ff8b 	bl	8000aa2 <read_register16>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d05b      	beq.n	8000c4a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	3306      	adds	r3, #6
 8000b96:	461a      	mov	r2, r3
 8000b98:	218e      	movs	r1, #142	; 0x8e
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f7ff ff81 	bl	8000aa2 <read_register16>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d051      	beq.n	8000c4a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	3308      	adds	r3, #8
 8000baa:	461a      	mov	r2, r3
 8000bac:	2190      	movs	r1, #144	; 0x90
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f7ff ff77 	bl	8000aa2 <read_register16>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d047      	beq.n	8000c4a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	330a      	adds	r3, #10
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	2192      	movs	r1, #146	; 0x92
 8000bc2:	6878      	ldr	r0, [r7, #4]
 8000bc4:	f7ff ff6d 	bl	8000aa2 <read_register16>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d03d      	beq.n	8000c4a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	330c      	adds	r3, #12
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	2194      	movs	r1, #148	; 0x94
 8000bd6:	6878      	ldr	r0, [r7, #4]
 8000bd8:	f7ff ff63 	bl	8000aa2 <read_register16>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d033      	beq.n	8000c4a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	330e      	adds	r3, #14
 8000be6:	461a      	mov	r2, r3
 8000be8:	2196      	movs	r1, #150	; 0x96
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	f7ff ff59 	bl	8000aa2 <read_register16>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d029      	beq.n	8000c4a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	3310      	adds	r3, #16
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	2198      	movs	r1, #152	; 0x98
 8000bfe:	6878      	ldr	r0, [r7, #4]
 8000c00:	f7ff ff4f 	bl	8000aa2 <read_register16>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d01f      	beq.n	8000c4a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	3312      	adds	r3, #18
 8000c0e:	461a      	mov	r2, r3
 8000c10:	219a      	movs	r1, #154	; 0x9a
 8000c12:	6878      	ldr	r0, [r7, #4]
 8000c14:	f7ff ff45 	bl	8000aa2 <read_register16>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d015      	beq.n	8000c4a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	3314      	adds	r3, #20
 8000c22:	461a      	mov	r2, r3
 8000c24:	219c      	movs	r1, #156	; 0x9c
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f7ff ff3b 	bl	8000aa2 <read_register16>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d00b      	beq.n	8000c4a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 8000c36:	461a      	mov	r2, r3
 8000c38:	219e      	movs	r1, #158	; 0x9e
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	f7ff ff31 	bl	8000aa2 <read_register16>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <read_calibration_data+0xfa>

		return true;
 8000c46:	2301      	movs	r3, #1
 8000c48:	e000      	b.n	8000c4c <read_calibration_data+0xfc>
	}

	return false;
 8000c4a:	2300      	movs	r3, #0
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	f103 0218 	add.w	r2, r3, #24
 8000c62:	2301      	movs	r3, #1
 8000c64:	21a1      	movs	r1, #161	; 0xa1
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	f7ff ff4a 	bl	8000b00 <read_data>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d14b      	bne.n	8000d0a <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	331a      	adds	r3, #26
 8000c76:	461a      	mov	r2, r3
 8000c78:	21e1      	movs	r1, #225	; 0xe1
 8000c7a:	6878      	ldr	r0, [r7, #4]
 8000c7c:	f7ff ff11 	bl	8000aa2 <read_register16>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d041      	beq.n	8000d0a <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	f103 021c 	add.w	r2, r3, #28
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	21e3      	movs	r1, #227	; 0xe3
 8000c90:	6878      	ldr	r0, [r7, #4]
 8000c92:	f7ff ff35 	bl	8000b00 <read_data>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d136      	bne.n	8000d0a <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 8000c9c:	f107 030e 	add.w	r3, r7, #14
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	21e4      	movs	r1, #228	; 0xe4
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	f7ff fefc 	bl	8000aa2 <read_register16>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d02c      	beq.n	8000d0a <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 8000cb0:	f107 030c 	add.w	r3, r7, #12
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	21e5      	movs	r1, #229	; 0xe5
 8000cb8:	6878      	ldr	r0, [r7, #4]
 8000cba:	f7ff fef2 	bl	8000aa2 <read_register16>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d022      	beq.n	8000d0a <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	f103 0222 	add.w	r2, r3, #34	; 0x22
 8000cca:	2301      	movs	r3, #1
 8000ccc:	21e7      	movs	r1, #231	; 0xe7
 8000cce:	6878      	ldr	r0, [r7, #4]
 8000cd0:	f7ff ff16 	bl	8000b00 <read_data>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d117      	bne.n	8000d0a <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 8000cda:	89fb      	ldrh	r3, [r7, #14]
 8000cdc:	011b      	lsls	r3, r3, #4
 8000cde:	b21b      	sxth	r3, r3
 8000ce0:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 8000ce4:	b21a      	sxth	r2, r3
 8000ce6:	89fb      	ldrh	r3, [r7, #14]
 8000ce8:	121b      	asrs	r3, r3, #8
 8000cea:	b21b      	sxth	r3, r3
 8000cec:	f003 030f 	and.w	r3, r3, #15
 8000cf0:	b21b      	sxth	r3, r3
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	b21a      	sxth	r2, r3
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 8000cfa:	89bb      	ldrh	r3, [r7, #12]
 8000cfc:	091b      	lsrs	r3, r3, #4
 8000cfe:	b29b      	uxth	r3, r3
 8000d00:	b21a      	sxth	r2, r3
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	841a      	strh	r2, [r3, #32]

		return true;
 8000d06:	2301      	movs	r3, #1
 8000d08:	e000      	b.n	8000d0c <read_hum_calibration_data+0xb8>
	}

	return false;
 8000d0a:	2300      	movs	r3, #0
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3710      	adds	r7, #16
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b088      	sub	sp, #32
 8000d18:	af04      	add	r7, sp, #16
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	460b      	mov	r3, r1
 8000d1e:	70fb      	strb	r3, [r7, #3]
 8000d20:	4613      	mov	r3, r2
 8000d22:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000d30:	78fb      	ldrb	r3, [r7, #3]
 8000d32:	b29a      	uxth	r2, r3
 8000d34:	89f9      	ldrh	r1, [r7, #14]
 8000d36:	f242 7310 	movw	r3, #10000	; 0x2710
 8000d3a:	9302      	str	r3, [sp, #8]
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	9301      	str	r3, [sp, #4]
 8000d40:	1cbb      	adds	r3, r7, #2
 8000d42:	9300      	str	r3, [sp, #0]
 8000d44:	2301      	movs	r3, #1
 8000d46:	f003 f981 	bl	800404c <HAL_I2C_Mem_Write>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d101      	bne.n	8000d54 <write_register8+0x40>
		return false;
 8000d50:	2300      	movs	r3, #0
 8000d52:	e000      	b.n	8000d56 <write_register8+0x42>
	else
		return true;
 8000d54:	2301      	movs	r3, #1
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b084      	sub	sp, #16
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
 8000d66:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000d6c:	2b76      	cmp	r3, #118	; 0x76
 8000d6e:	d005      	beq.n	8000d7c <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000d74:	2b77      	cmp	r3, #119	; 0x77
 8000d76:	d001      	beq.n	8000d7c <bmp280_init+0x1e>

		return false;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	e099      	b.n	8000eb0 <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8000d82:	2301      	movs	r3, #1
 8000d84:	21d0      	movs	r1, #208	; 0xd0
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f7ff feba 	bl	8000b00 <read_data>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <bmp280_init+0x38>
		return false;
 8000d92:	2300      	movs	r3, #0
 8000d94:	e08c      	b.n	8000eb0 <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000d9c:	2b58      	cmp	r3, #88	; 0x58
 8000d9e:	d006      	beq.n	8000dae <bmp280_init+0x50>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000da6:	2b60      	cmp	r3, #96	; 0x60
 8000da8:	d001      	beq.n	8000dae <bmp280_init+0x50>

		return false;
 8000daa:	2300      	movs	r3, #0
 8000dac:	e080      	b.n	8000eb0 <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8000dae:	22b6      	movs	r2, #182	; 0xb6
 8000db0:	21e0      	movs	r1, #224	; 0xe0
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f7ff ffae 	bl	8000d14 <write_register8>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <bmp280_init+0x64>
		return false;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e076      	b.n	8000eb0 <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8000dc2:	f107 020c 	add.w	r2, r7, #12
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	21f3      	movs	r1, #243	; 0xf3
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f7ff fe98 	bl	8000b00 <read_data>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d1f5      	bne.n	8000dc2 <bmp280_init+0x64>
				&& (status & 1) == 0)
 8000dd6:	7b3b      	ldrb	r3, [r7, #12]
 8000dd8:	f003 0301 	and.w	r3, r3, #1
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d1f0      	bne.n	8000dc2 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f7ff feb5 	bl	8000b50 <read_calibration_data>
 8000de6:	4603      	mov	r3, r0
 8000de8:	f083 0301 	eor.w	r3, r3, #1
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d100      	bne.n	8000df4 <bmp280_init+0x96>
 8000df2:	e001      	b.n	8000df8 <bmp280_init+0x9a>
		return false;
 8000df4:	2300      	movs	r3, #0
 8000df6:	e05b      	b.n	8000eb0 <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000dfe:	2b60      	cmp	r3, #96	; 0x60
 8000e00:	d10a      	bne.n	8000e18 <bmp280_init+0xba>
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f7ff ff26 	bl	8000c54 <read_hum_calibration_data>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	f083 0301 	eor.w	r3, r3, #1
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <bmp280_init+0xba>
		return false;
 8000e14:	2300      	movs	r3, #0
 8000e16:	e04b      	b.n	8000eb0 <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	795b      	ldrb	r3, [r3, #5]
 8000e1c:	015b      	lsls	r3, r3, #5
 8000e1e:	b25a      	sxtb	r2, r3
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	785b      	ldrb	r3, [r3, #1]
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	b25b      	sxtb	r3, r3
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	b25b      	sxtb	r3, r3
 8000e2c:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8000e2e:	7bfb      	ldrb	r3, [r7, #15]
 8000e30:	461a      	mov	r2, r3
 8000e32:	21f5      	movs	r1, #245	; 0xf5
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f7ff ff6d 	bl	8000d14 <write_register8>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <bmp280_init+0xe6>
		return false;
 8000e40:	2300      	movs	r3, #0
 8000e42:	e035      	b.n	8000eb0 <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d102      	bne.n	8000e52 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	2200      	movs	r2, #0
 8000e50:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	78db      	ldrb	r3, [r3, #3]
 8000e56:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 8000e58:	b25a      	sxtb	r2, r3
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	789b      	ldrb	r3, [r3, #2]
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	b25b      	sxtb	r3, r3
 8000e62:	4313      	orrs	r3, r2
 8000e64:	b25a      	sxtb	r2, r3
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	b25b      	sxtb	r3, r3
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8000e70:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000e78:	2b60      	cmp	r3, #96	; 0x60
 8000e7a:	d10d      	bne.n	8000e98 <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	791b      	ldrb	r3, [r3, #4]
 8000e80:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8000e82:	7b7b      	ldrb	r3, [r7, #13]
 8000e84:	461a      	mov	r2, r3
 8000e86:	21f2      	movs	r1, #242	; 0xf2
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	f7ff ff43 	bl	8000d14 <write_register8>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <bmp280_init+0x13a>
			return false;
 8000e94:	2300      	movs	r3, #0
 8000e96:	e00b      	b.n	8000eb0 <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8000e98:	7bbb      	ldrb	r3, [r7, #14]
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	21f4      	movs	r1, #244	; 0xf4
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	f7ff ff38 	bl	8000d14 <write_register8>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <bmp280_init+0x150>
		return false;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	e000      	b.n	8000eb0 <bmp280_init+0x152>
	}

	return true;
 8000eae:	2301      	movs	r3, #1
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3710      	adds	r7, #16
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 8000eb8:	b480      	push	{r7}
 8000eba:	b087      	sub	sp, #28
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	10da      	asrs	r2, r3, #3
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	881b      	ldrh	r3, [r3, #0]
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 8000ed0:	68fa      	ldr	r2, [r7, #12]
 8000ed2:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8000ed6:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8000eda:	12db      	asrs	r3, r3, #11
 8000edc:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	111b      	asrs	r3, r3, #4
 8000ee2:	68fa      	ldr	r2, [r7, #12]
 8000ee4:	8812      	ldrh	r2, [r2, #0]
 8000ee6:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8000ee8:	68ba      	ldr	r2, [r7, #8]
 8000eea:	1112      	asrs	r2, r2, #4
 8000eec:	68f9      	ldr	r1, [r7, #12]
 8000eee:	8809      	ldrh	r1, [r1, #0]
 8000ef0:	1a52      	subs	r2, r2, r1
 8000ef2:	fb02 f303 	mul.w	r3, r2, r3
 8000ef6:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 8000ef8:	68fa      	ldr	r2, [r7, #12]
 8000efa:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000efe:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8000f02:	139b      	asrs	r3, r3, #14
 8000f04:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8000f06:	697a      	ldr	r2, [r7, #20]
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	441a      	add	r2, r3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	4613      	mov	r3, r2
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	4413      	add	r3, r2
 8000f1a:	3380      	adds	r3, #128	; 0x80
 8000f1c:	121b      	asrs	r3, r3, #8
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	371c      	adds	r7, #28
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bc80      	pop	{r7}
 8000f26:	4770      	bx	lr

08000f28 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8000f28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f2c:	b0cc      	sub	sp, #304	; 0x130
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
 8000f34:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8000f38:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8000f3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000f40:	17da      	asrs	r2, r3, #31
 8000f42:	461c      	mov	r4, r3
 8000f44:	4615      	mov	r5, r2
 8000f46:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 8000f4a:	f145 3bff 	adc.w	fp, r5, #4294967295
 8000f4e:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	; 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8000f52:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8000f56:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000f5a:	fb03 f102 	mul.w	r1, r3, r2
 8000f5e:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8000f62:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000f66:	fb02 f303 	mul.w	r3, r2, r3
 8000f6a:	18ca      	adds	r2, r1, r3
 8000f6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000f70:	fba3 8903 	umull	r8, r9, r3, r3
 8000f74:	eb02 0309 	add.w	r3, r2, r9
 8000f78:	4699      	mov	r9, r3
 8000f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000f7e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000f82:	b21b      	sxth	r3, r3
 8000f84:	17da      	asrs	r2, r3, #31
 8000f86:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8000f8a:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8000f8e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8000f92:	4603      	mov	r3, r0
 8000f94:	fb03 f209 	mul.w	r2, r3, r9
 8000f98:	460b      	mov	r3, r1
 8000f9a:	fb08 f303 	mul.w	r3, r8, r3
 8000f9e:	4413      	add	r3, r2
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	fba8 2102 	umull	r2, r1, r8, r2
 8000fa6:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 8000faa:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8000fae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8000fb2:	4413      	add	r3, r2
 8000fb4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8000fb8:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8000fbc:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
 8000fc0:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8000fc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000fc8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000fcc:	b21b      	sxth	r3, r3
 8000fce:	17da      	asrs	r2, r3, #31
 8000fd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000fd4:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8000fd8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000fdc:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8000fe0:	462a      	mov	r2, r5
 8000fe2:	fb02 f203 	mul.w	r2, r2, r3
 8000fe6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000fea:	4621      	mov	r1, r4
 8000fec:	fb01 f303 	mul.w	r3, r1, r3
 8000ff0:	441a      	add	r2, r3
 8000ff2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000ff6:	4621      	mov	r1, r4
 8000ff8:	fba3 3101 	umull	r3, r1, r3, r1
 8000ffc:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 8001000:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001004:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001008:	18d3      	adds	r3, r2, r3
 800100a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800100e:	f04f 0000 	mov.w	r0, #0
 8001012:	f04f 0100 	mov.w	r1, #0
 8001016:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 800101a:	462b      	mov	r3, r5
 800101c:	0459      	lsls	r1, r3, #17
 800101e:	4622      	mov	r2, r4
 8001020:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 8001024:	4623      	mov	r3, r4
 8001026:	0458      	lsls	r0, r3, #17
 8001028:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800102c:	1814      	adds	r4, r2, r0
 800102e:	643c      	str	r4, [r7, #64]	; 0x40
 8001030:	414b      	adcs	r3, r1
 8001032:	647b      	str	r3, [r7, #68]	; 0x44
 8001034:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001038:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 800103c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001040:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001044:	b21b      	sxth	r3, r3
 8001046:	17da      	asrs	r2, r3, #31
 8001048:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800104c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001050:	f04f 0000 	mov.w	r0, #0
 8001054:	f04f 0100 	mov.w	r1, #0
 8001058:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800105c:	00d9      	lsls	r1, r3, #3
 800105e:	2000      	movs	r0, #0
 8001060:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001064:	1814      	adds	r4, r2, r0
 8001066:	63bc      	str	r4, [r7, #56]	; 0x38
 8001068:	414b      	adcs	r3, r1
 800106a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800106c:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001070:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001074:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001078:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800107c:	fb03 f102 	mul.w	r1, r3, r2
 8001080:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001084:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001088:	fb02 f303 	mul.w	r3, r2, r3
 800108c:	18ca      	adds	r2, r1, r3
 800108e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001092:	fba3 3103 	umull	r3, r1, r3, r3
 8001096:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
 800109a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800109e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80010a2:	18d3      	adds	r3, r2, r3
 80010a4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80010a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80010ac:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80010b0:	b21b      	sxth	r3, r3
 80010b2:	17da      	asrs	r2, r3, #31
 80010b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80010b8:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80010bc:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 80010c0:	4622      	mov	r2, r4
 80010c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80010c6:	4641      	mov	r1, r8
 80010c8:	fb01 f202 	mul.w	r2, r1, r2
 80010cc:	464d      	mov	r5, r9
 80010ce:	4618      	mov	r0, r3
 80010d0:	4621      	mov	r1, r4
 80010d2:	4603      	mov	r3, r0
 80010d4:	fb03 f305 	mul.w	r3, r3, r5
 80010d8:	4413      	add	r3, r2
 80010da:	4602      	mov	r2, r0
 80010dc:	4641      	mov	r1, r8
 80010de:	fba2 2101 	umull	r2, r1, r2, r1
 80010e2:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 80010e6:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 80010ea:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80010ee:	4413      	add	r3, r2
 80010f0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80010f4:	f04f 0000 	mov.w	r0, #0
 80010f8:	f04f 0100 	mov.w	r1, #0
 80010fc:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8001100:	4623      	mov	r3, r4
 8001102:	0a18      	lsrs	r0, r3, #8
 8001104:	462a      	mov	r2, r5
 8001106:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 800110a:	462b      	mov	r3, r5
 800110c:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 800110e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001112:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001116:	b21b      	sxth	r3, r3
 8001118:	17da      	asrs	r2, r3, #31
 800111a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800111e:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001122:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001126:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 800112a:	464a      	mov	r2, r9
 800112c:	fb02 f203 	mul.w	r2, r2, r3
 8001130:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001134:	4644      	mov	r4, r8
 8001136:	fb04 f303 	mul.w	r3, r4, r3
 800113a:	441a      	add	r2, r3
 800113c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001140:	4644      	mov	r4, r8
 8001142:	fba3 3404 	umull	r3, r4, r3, r4
 8001146:	f8c7 40ec 	str.w	r4, [r7, #236]	; 0xec
 800114a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800114e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001152:	18d3      	adds	r3, r2, r3
 8001154:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001158:	f04f 0200 	mov.w	r2, #0
 800115c:	f04f 0300 	mov.w	r3, #0
 8001160:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8001164:	464c      	mov	r4, r9
 8001166:	0323      	lsls	r3, r4, #12
 8001168:	46c4      	mov	ip, r8
 800116a:	ea43 531c 	orr.w	r3, r3, ip, lsr #20
 800116e:	4644      	mov	r4, r8
 8001170:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001172:	1884      	adds	r4, r0, r2
 8001174:	633c      	str	r4, [r7, #48]	; 0x30
 8001176:	eb41 0303 	adc.w	r3, r1, r3
 800117a:	637b      	str	r3, [r7, #52]	; 0x34
 800117c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001180:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8001184:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001188:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 800118c:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8001190:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001194:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001198:	88db      	ldrh	r3, [r3, #6]
 800119a:	b29b      	uxth	r3, r3
 800119c:	2200      	movs	r2, #0
 800119e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80011a2:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80011a6:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 80011aa:	4622      	mov	r2, r4
 80011ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80011b0:	4641      	mov	r1, r8
 80011b2:	fb01 f202 	mul.w	r2, r1, r2
 80011b6:	464d      	mov	r5, r9
 80011b8:	4618      	mov	r0, r3
 80011ba:	4621      	mov	r1, r4
 80011bc:	4603      	mov	r3, r0
 80011be:	fb03 f305 	mul.w	r3, r3, r5
 80011c2:	4413      	add	r3, r2
 80011c4:	4602      	mov	r2, r0
 80011c6:	4641      	mov	r1, r8
 80011c8:	fba2 2101 	umull	r2, r1, r2, r1
 80011cc:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 80011d0:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 80011d4:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80011d8:	4413      	add	r3, r2
 80011da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80011de:	f04f 0200 	mov.w	r2, #0
 80011e2:	f04f 0300 	mov.w	r3, #0
 80011e6:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 80011ea:	4629      	mov	r1, r5
 80011ec:	104a      	asrs	r2, r1, #1
 80011ee:	4629      	mov	r1, r5
 80011f0:	17cb      	asrs	r3, r1, #31
 80011f2:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128

	if (var1 == 0) {
 80011f6:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80011fa:	4313      	orrs	r3, r2
 80011fc:	d101      	bne.n	8001202 <compensate_pressure+0x2da>
		return 0;  // avoid exception caused by division by zero
 80011fe:	2300      	movs	r3, #0
 8001200:	e146      	b.n	8001490 <compensate_pressure+0x568>
	}

	p = 1048576 - adc_press;
 8001202:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001206:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800120a:	17da      	asrs	r2, r3, #31
 800120c:	62bb      	str	r3, [r7, #40]	; 0x28
 800120e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001210:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001214:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 8001218:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800121c:	105b      	asrs	r3, r3, #1
 800121e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001222:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001226:	07db      	lsls	r3, r3, #31
 8001228:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800122c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001230:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001234:	4604      	mov	r4, r0
 8001236:	1aa4      	subs	r4, r4, r2
 8001238:	67bc      	str	r4, [r7, #120]	; 0x78
 800123a:	eb61 0303 	sbc.w	r3, r1, r3
 800123e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001240:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001244:	4622      	mov	r2, r4
 8001246:	462b      	mov	r3, r5
 8001248:	1891      	adds	r1, r2, r2
 800124a:	6239      	str	r1, [r7, #32]
 800124c:	415b      	adcs	r3, r3
 800124e:	627b      	str	r3, [r7, #36]	; 0x24
 8001250:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001254:	4621      	mov	r1, r4
 8001256:	1851      	adds	r1, r2, r1
 8001258:	61b9      	str	r1, [r7, #24]
 800125a:	4629      	mov	r1, r5
 800125c:	414b      	adcs	r3, r1
 800125e:	61fb      	str	r3, [r7, #28]
 8001260:	f04f 0200 	mov.w	r2, #0
 8001264:	f04f 0300 	mov.w	r3, #0
 8001268:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800126c:	4649      	mov	r1, r9
 800126e:	018b      	lsls	r3, r1, #6
 8001270:	4641      	mov	r1, r8
 8001272:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001276:	4641      	mov	r1, r8
 8001278:	018a      	lsls	r2, r1, #6
 800127a:	4641      	mov	r1, r8
 800127c:	1889      	adds	r1, r1, r2
 800127e:	6139      	str	r1, [r7, #16]
 8001280:	4649      	mov	r1, r9
 8001282:	eb43 0101 	adc.w	r1, r3, r1
 8001286:	6179      	str	r1, [r7, #20]
 8001288:	f04f 0200 	mov.w	r2, #0
 800128c:	f04f 0300 	mov.w	r3, #0
 8001290:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001294:	4649      	mov	r1, r9
 8001296:	008b      	lsls	r3, r1, #2
 8001298:	46c4      	mov	ip, r8
 800129a:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 800129e:	4641      	mov	r1, r8
 80012a0:	008a      	lsls	r2, r1, #2
 80012a2:	4610      	mov	r0, r2
 80012a4:	4619      	mov	r1, r3
 80012a6:	4603      	mov	r3, r0
 80012a8:	4622      	mov	r2, r4
 80012aa:	189b      	adds	r3, r3, r2
 80012ac:	60bb      	str	r3, [r7, #8]
 80012ae:	460b      	mov	r3, r1
 80012b0:	462a      	mov	r2, r5
 80012b2:	eb42 0303 	adc.w	r3, r2, r3
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	f04f 0200 	mov.w	r2, #0
 80012bc:	f04f 0300 	mov.w	r3, #0
 80012c0:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80012c4:	4649      	mov	r1, r9
 80012c6:	008b      	lsls	r3, r1, #2
 80012c8:	46c4      	mov	ip, r8
 80012ca:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 80012ce:	4641      	mov	r1, r8
 80012d0:	008a      	lsls	r2, r1, #2
 80012d2:	4610      	mov	r0, r2
 80012d4:	4619      	mov	r1, r3
 80012d6:	4603      	mov	r3, r0
 80012d8:	4622      	mov	r2, r4
 80012da:	189b      	adds	r3, r3, r2
 80012dc:	673b      	str	r3, [r7, #112]	; 0x70
 80012de:	462b      	mov	r3, r5
 80012e0:	460a      	mov	r2, r1
 80012e2:	eb42 0303 	adc.w	r3, r2, r3
 80012e6:	677b      	str	r3, [r7, #116]	; 0x74
 80012e8:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80012ec:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80012f0:	f7ff fa00 	bl	80006f4 <__aeabi_ldivmod>
 80012f4:	4602      	mov	r2, r0
 80012f6:	460b      	mov	r3, r1
 80012f8:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 80012fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001300:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001304:	b21b      	sxth	r3, r3
 8001306:	17da      	asrs	r2, r3, #31
 8001308:	66bb      	str	r3, [r7, #104]	; 0x68
 800130a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800130c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001310:	f04f 0000 	mov.w	r0, #0
 8001314:	f04f 0100 	mov.w	r1, #0
 8001318:	0b50      	lsrs	r0, r2, #13
 800131a:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800131e:	1359      	asrs	r1, r3, #13
 8001320:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001324:	462b      	mov	r3, r5
 8001326:	fb00 f203 	mul.w	r2, r0, r3
 800132a:	4623      	mov	r3, r4
 800132c:	fb03 f301 	mul.w	r3, r3, r1
 8001330:	4413      	add	r3, r2
 8001332:	4622      	mov	r2, r4
 8001334:	fba2 2100 	umull	r2, r1, r2, r0
 8001338:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 800133c:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8001340:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001344:	4413      	add	r3, r2
 8001346:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800134a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800134e:	f04f 0000 	mov.w	r0, #0
 8001352:	f04f 0100 	mov.w	r1, #0
 8001356:	0b50      	lsrs	r0, r2, #13
 8001358:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800135c:	1359      	asrs	r1, r3, #13
 800135e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001362:	462b      	mov	r3, r5
 8001364:	fb00 f203 	mul.w	r2, r0, r3
 8001368:	4623      	mov	r3, r4
 800136a:	fb03 f301 	mul.w	r3, r3, r1
 800136e:	4413      	add	r3, r2
 8001370:	4622      	mov	r2, r4
 8001372:	fba2 2100 	umull	r2, r1, r2, r0
 8001376:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 800137a:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 800137e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001382:	4413      	add	r3, r2
 8001384:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001388:	f04f 0200 	mov.w	r2, #0
 800138c:	f04f 0300 	mov.w	r3, #0
 8001390:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8001394:	4621      	mov	r1, r4
 8001396:	0e4a      	lsrs	r2, r1, #25
 8001398:	4620      	mov	r0, r4
 800139a:	4629      	mov	r1, r5
 800139c:	460c      	mov	r4, r1
 800139e:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
 80013a2:	164b      	asrs	r3, r1, #25
 80013a4:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 80013a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80013ac:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80013b0:	b21b      	sxth	r3, r3
 80013b2:	17da      	asrs	r2, r3, #31
 80013b4:	663b      	str	r3, [r7, #96]	; 0x60
 80013b6:	667a      	str	r2, [r7, #100]	; 0x64
 80013b8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80013bc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80013c0:	462a      	mov	r2, r5
 80013c2:	fb02 f203 	mul.w	r2, r2, r3
 80013c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80013ca:	4621      	mov	r1, r4
 80013cc:	fb01 f303 	mul.w	r3, r1, r3
 80013d0:	4413      	add	r3, r2
 80013d2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80013d6:	4621      	mov	r1, r4
 80013d8:	fba2 2101 	umull	r2, r1, r2, r1
 80013dc:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 80013e0:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 80013e4:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80013e8:	4413      	add	r3, r2
 80013ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	f04f 0300 	mov.w	r3, #0
 80013f6:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 80013fa:	4621      	mov	r1, r4
 80013fc:	0cca      	lsrs	r2, r1, #19
 80013fe:	4620      	mov	r0, r4
 8001400:	4629      	mov	r1, r5
 8001402:	460c      	mov	r4, r1
 8001404:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 8001408:	14cb      	asrs	r3, r1, #19
 800140a:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 800140e:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8001412:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001416:	1884      	adds	r4, r0, r2
 8001418:	65bc      	str	r4, [r7, #88]	; 0x58
 800141a:	eb41 0303 	adc.w	r3, r1, r3
 800141e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001420:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001424:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001428:	4621      	mov	r1, r4
 800142a:	1889      	adds	r1, r1, r2
 800142c:	6539      	str	r1, [r7, #80]	; 0x50
 800142e:	4629      	mov	r1, r5
 8001430:	eb43 0101 	adc.w	r1, r3, r1
 8001434:	6579      	str	r1, [r7, #84]	; 0x54
 8001436:	f04f 0000 	mov.w	r0, #0
 800143a:	f04f 0100 	mov.w	r1, #0
 800143e:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001442:	4623      	mov	r3, r4
 8001444:	0a18      	lsrs	r0, r3, #8
 8001446:	462a      	mov	r2, r5
 8001448:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 800144c:	462b      	mov	r3, r5
 800144e:	1219      	asrs	r1, r3, #8
 8001450:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001454:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001458:	b21b      	sxth	r3, r3
 800145a:	17da      	asrs	r2, r3, #31
 800145c:	64bb      	str	r3, [r7, #72]	; 0x48
 800145e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001460:	f04f 0200 	mov.w	r2, #0
 8001464:	f04f 0300 	mov.w	r3, #0
 8001468:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 800146c:	464c      	mov	r4, r9
 800146e:	0123      	lsls	r3, r4, #4
 8001470:	46c4      	mov	ip, r8
 8001472:	ea43 731c 	orr.w	r3, r3, ip, lsr #28
 8001476:	4644      	mov	r4, r8
 8001478:	0122      	lsls	r2, r4, #4
 800147a:	1884      	adds	r4, r0, r2
 800147c:	603c      	str	r4, [r7, #0]
 800147e:	eb41 0303 	adc.w	r3, r1, r3
 8001482:	607b      	str	r3, [r7, #4]
 8001484:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001488:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	return p;
 800148c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
}
 8001490:	4618      	mov	r0, r3
 8001492:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001496:	46bd      	mov	sp, r7
 8001498:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800149c <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 800149c:	b480      	push	{r7}
 800149e:	b087      	sub	sp, #28
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	60b9      	str	r1, [r7, #8]
 80014a6:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 80014ae:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	039a      	lsls	r2, r3, #14
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80014ba:	051b      	lsls	r3, r3, #20
 80014bc:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80014c4:	4619      	mov	r1, r3
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	fb01 f303 	mul.w	r3, r1, r3
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80014d2:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 80014d4:	68fa      	ldr	r2, [r7, #12]
 80014d6:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 80014da:	4611      	mov	r1, r2
 80014dc:	697a      	ldr	r2, [r7, #20]
 80014de:	fb01 f202 	mul.w	r2, r1, r2
 80014e2:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 80014e4:	68f9      	ldr	r1, [r7, #12]
 80014e6:	7f09      	ldrb	r1, [r1, #28]
 80014e8:	4608      	mov	r0, r1
 80014ea:	6979      	ldr	r1, [r7, #20]
 80014ec:	fb00 f101 	mul.w	r1, r0, r1
 80014f0:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 80014f2:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 80014f6:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 80014fa:	1292      	asrs	r2, r2, #10
 80014fc:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8001500:	68f9      	ldr	r1, [r7, #12]
 8001502:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001506:	fb01 f202 	mul.w	r2, r1, r2
 800150a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800150e:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001510:	fb02 f303 	mul.w	r3, r2, r3
 8001514:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	13db      	asrs	r3, r3, #15
 800151a:	697a      	ldr	r2, [r7, #20]
 800151c:	13d2      	asrs	r2, r2, #15
 800151e:	fb02 f303 	mul.w	r3, r2, r3
 8001522:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8001524:	68fa      	ldr	r2, [r7, #12]
 8001526:	7e12      	ldrb	r2, [r2, #24]
 8001528:	fb02 f303 	mul.w	r3, r2, r3
 800152c:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 800152e:	697a      	ldr	r2, [r7, #20]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800153a:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001542:	bfa8      	it	ge
 8001544:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001548:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	131b      	asrs	r3, r3, #12
}
 800154e:	4618      	mov	r0, r3
 8001550:	371c      	adds	r7, #28
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr

08001558 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8001558:	b580      	push	{r7, lr}
 800155a:	b08c      	sub	sp, #48	; 0x30
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
 8001564:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800156c:	2b60      	cmp	r3, #96	; 0x60
 800156e:	d007      	beq.n	8001580 <bmp280_read_fixed+0x28>
		if (humidity)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d002      	beq.n	800157c <bmp280_read_fixed+0x24>
			*humidity = 0;
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 800157c:	2300      	movs	r3, #0
 800157e:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <bmp280_read_fixed+0x32>
 8001586:	2308      	movs	r3, #8
 8001588:	e000      	b.n	800158c <bmp280_read_fixed+0x34>
 800158a:	2306      	movs	r3, #6
 800158c:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 800158e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001590:	b2db      	uxtb	r3, r3
 8001592:	f107 0218 	add.w	r2, r7, #24
 8001596:	21f7      	movs	r1, #247	; 0xf7
 8001598:	68f8      	ldr	r0, [r7, #12]
 800159a:	f7ff fab1 	bl	8000b00 <read_data>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <bmp280_read_fixed+0x50>
		return false;
 80015a4:	2300      	movs	r3, #0
 80015a6:	e038      	b.n	800161a <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 80015a8:	7e3b      	ldrb	r3, [r7, #24]
 80015aa:	031a      	lsls	r2, r3, #12
 80015ac:	7e7b      	ldrb	r3, [r7, #25]
 80015ae:	011b      	lsls	r3, r3, #4
 80015b0:	4313      	orrs	r3, r2
 80015b2:	7eba      	ldrb	r2, [r7, #26]
 80015b4:	0912      	lsrs	r2, r2, #4
 80015b6:	b2d2      	uxtb	r2, r2
 80015b8:	4313      	orrs	r3, r2
 80015ba:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 80015bc:	7efb      	ldrb	r3, [r7, #27]
 80015be:	031a      	lsls	r2, r3, #12
 80015c0:	7f3b      	ldrb	r3, [r7, #28]
 80015c2:	011b      	lsls	r3, r3, #4
 80015c4:	4313      	orrs	r3, r2
 80015c6:	7f7a      	ldrb	r2, [r7, #29]
 80015c8:	0912      	lsrs	r2, r2, #4
 80015ca:	b2d2      	uxtb	r2, r2
 80015cc:	4313      	orrs	r3, r2
 80015ce:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 80015d0:	f107 0314 	add.w	r3, r7, #20
 80015d4:	461a      	mov	r2, r3
 80015d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015d8:	68f8      	ldr	r0, [r7, #12]
 80015da:	f7ff fc6d 	bl	8000eb8 <compensate_temperature>
 80015de:	4602      	mov	r2, r0
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	461a      	mov	r2, r3
 80015e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80015ea:	68f8      	ldr	r0, [r7, #12]
 80015ec:	f7ff fc9c 	bl	8000f28 <compensate_pressure>
 80015f0:	4602      	mov	r2, r0
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	601a      	str	r2, [r3, #0]

	if (humidity) {
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d00d      	beq.n	8001618 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 80015fc:	7fbb      	ldrb	r3, [r7, #30]
 80015fe:	021b      	lsls	r3, r3, #8
 8001600:	7ffa      	ldrb	r2, [r7, #31]
 8001602:	4313      	orrs	r3, r2
 8001604:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	461a      	mov	r2, r3
 800160a:	6a39      	ldr	r1, [r7, #32]
 800160c:	68f8      	ldr	r0, [r7, #12]
 800160e:	f7ff ff45 	bl	800149c <compensate_humidity>
 8001612:	4602      	mov	r2, r0
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	601a      	str	r2, [r3, #0]
	}

	return true;
 8001618:	2301      	movs	r3, #1
}
 800161a:	4618      	mov	r0, r3
 800161c:	3730      	adds	r7, #48	; 0x30
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
	...

08001624 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8001624:	b580      	push	{r7, lr}
 8001626:	b088      	sub	sp, #32
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
 8001630:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d002      	beq.n	800163e <bmp280_read_float+0x1a>
 8001638:	f107 0314 	add.w	r3, r7, #20
 800163c:	e000      	b.n	8001640 <bmp280_read_float+0x1c>
 800163e:	2300      	movs	r3, #0
 8001640:	f107 0218 	add.w	r2, r7, #24
 8001644:	f107 011c 	add.w	r1, r7, #28
 8001648:	68f8      	ldr	r0, [r7, #12]
 800164a:	f7ff ff85 	bl	8001558 <bmp280_read_fixed>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d02d      	beq.n	80016b0 <bmp280_read_float+0x8c>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	4618      	mov	r0, r3
 8001658:	f7fe fe32 	bl	80002c0 <__aeabi_i2f>
 800165c:	4603      	mov	r3, r0
 800165e:	4917      	ldr	r1, [pc, #92]	; (80016bc <bmp280_read_float+0x98>)
 8001660:	4618      	mov	r0, r3
 8001662:	f7fe ff35 	bl	80004d0 <__aeabi_fdiv>
 8001666:	4603      	mov	r3, r0
 8001668:	461a      	mov	r2, r3
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	601a      	str	r2, [r3, #0]
		*pressure = (float) fixed_pressure / 256;
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	4618      	mov	r0, r3
 8001672:	f7fe fe21 	bl	80002b8 <__aeabi_ui2f>
 8001676:	4603      	mov	r3, r0
 8001678:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800167c:	4618      	mov	r0, r3
 800167e:	f7fe ff27 	bl	80004d0 <__aeabi_fdiv>
 8001682:	4603      	mov	r3, r0
 8001684:	461a      	mov	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	601a      	str	r2, [r3, #0]
		if (humidity)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d00d      	beq.n	80016ac <bmp280_read_float+0x88>
			*humidity = (float) fixed_humidity / 1024;
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	4618      	mov	r0, r3
 8001694:	f7fe fe10 	bl	80002b8 <__aeabi_ui2f>
 8001698:	4603      	mov	r3, r0
 800169a:	f04f 4189 	mov.w	r1, #1149239296	; 0x44800000
 800169e:	4618      	mov	r0, r3
 80016a0:	f7fe ff16 	bl	80004d0 <__aeabi_fdiv>
 80016a4:	4603      	mov	r3, r0
 80016a6:	461a      	mov	r2, r3
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	601a      	str	r2, [r3, #0]
		return true;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e000      	b.n	80016b2 <bmp280_read_float+0x8e>
	}

	return false;
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3720      	adds	r7, #32
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	42c80000 	.word	0x42c80000

080016c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016c6:	f001 fac3 	bl	8002c50 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016ca:	f001 f81f 	bl	800270c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016ce:	f001 f8d9 	bl	8002884 <MX_GPIO_Init>
  MX_ADC1_Init();
 80016d2:	f001 f86b 	bl	80027ac <MX_ADC1_Init>
  MX_I2C1_Init();
 80016d6:	f001 f8a7 	bl	8002828 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 80016da:	48a8      	ldr	r0, [pc, #672]	; (800197c <main+0x2bc>)
 80016dc:	f001 fbf2 	bl	8002ec4 <HAL_ADC_Start>
  HAL_I2C_Init(&hi2c1);
 80016e0:	48a7      	ldr	r0, [pc, #668]	; (8001980 <main+0x2c0>)
 80016e2:	f002 fb6f 	bl	8003dc4 <HAL_I2C_Init>

  bmp280_init_default_params(&bmp280.params);
 80016e6:	48a7      	ldr	r0, [pc, #668]	; (8001984 <main+0x2c4>)
 80016e8:	f7ff f9c0 	bl	8000a6c <bmp280_init_default_params>
  bmp280.addr = BMP280_I2C_ADDRESS_0;
 80016ec:	4ba6      	ldr	r3, [pc, #664]	; (8001988 <main+0x2c8>)
 80016ee:	2276      	movs	r2, #118	; 0x76
 80016f0:	849a      	strh	r2, [r3, #36]	; 0x24
  bmp280.i2c= &hi2c1;
 80016f2:	4ba5      	ldr	r3, [pc, #660]	; (8001988 <main+0x2c8>)
 80016f4:	4aa2      	ldr	r2, [pc, #648]	; (8001980 <main+0x2c0>)
 80016f6:	629a      	str	r2, [r3, #40]	; 0x28
  if (bmp280_init(&bmp280, &bmp280.params)) {
 80016f8:	49a2      	ldr	r1, [pc, #648]	; (8001984 <main+0x2c4>)
 80016fa:	48a3      	ldr	r0, [pc, #652]	; (8001988 <main+0x2c8>)
 80016fc:	f7ff fb2f 	bl	8000d5e <bmp280_init>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d007      	beq.n	8001716 <main+0x56>
  	bool bme280p = bmp280.id == BME280_CHIP_ID;
 8001706:	4ba0      	ldr	r3, [pc, #640]	; (8001988 <main+0x2c8>)
 8001708:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800170c:	2b60      	cmp	r3, #96	; 0x60
 800170e:	bf0c      	ite	eq
 8001710:	2301      	moveq	r3, #1
 8001712:	2300      	movne	r3, #0
 8001714:	71fb      	strb	r3, [r7, #7]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	switch (STATE) {
 8001716:	4b9d      	ldr	r3, [pc, #628]	; (800198c <main+0x2cc>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2b04      	cmp	r3, #4
 800171c:	f200 87e6 	bhi.w	80026ec <main+0x102c>
 8001720:	a201      	add	r2, pc, #4	; (adr r2, 8001728 <main+0x68>)
 8001722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001726:	bf00      	nop
 8001728:	0800173d 	.word	0x0800173d
 800172c:	08001795 	.word	0x08001795
 8001730:	08001b6b 	.word	0x08001b6b
 8001734:	08001f55 	.word	0x08001f55
 8001738:	0800231d 	.word	0x0800231d
	case IDLE: //No hace nada
		HAL_GPIO_WritePin(LED_1V_GPIO_Port, LED_1V_Pin, 0);
 800173c:	2200      	movs	r2, #0
 800173e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001742:	4893      	ldr	r0, [pc, #588]	; (8001990 <main+0x2d0>)
 8001744:	f002 fb04 	bl	8003d50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_2V_GPIO_Port, LED_2V_Pin, 0);
 8001748:	2200      	movs	r2, #0
 800174a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800174e:	4891      	ldr	r0, [pc, #580]	; (8001994 <main+0x2d4>)
 8001750:	f002 fafe 	bl	8003d50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_1A_GPIO_Port, LED_1A_Pin, 0);
 8001754:	2200      	movs	r2, #0
 8001756:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800175a:	488e      	ldr	r0, [pc, #568]	; (8001994 <main+0x2d4>)
 800175c:	f002 faf8 	bl	8003d50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_2A_GPIO_Port, LED_2A_Pin, 0);
 8001760:	2200      	movs	r2, #0
 8001762:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001766:	488b      	ldr	r0, [pc, #556]	; (8001994 <main+0x2d4>)
 8001768:	f002 faf2 	bl	8003d50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_1R_GPIO_Port, LED_1R_Pin, 0);
 800176c:	2200      	movs	r2, #0
 800176e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001772:	4888      	ldr	r0, [pc, #544]	; (8001994 <main+0x2d4>)
 8001774:	f002 faec 	bl	8003d50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_2R_GPIO_Port, LED_2R_Pin, 0);
 8001778:	2200      	movs	r2, #0
 800177a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800177e:	4885      	ldr	r0, [pc, #532]	; (8001994 <main+0x2d4>)
 8001780:	f002 fae6 	bl	8003d50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 8001784:	2200      	movs	r2, #0
 8001786:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800178a:	4882      	ldr	r0, [pc, #520]	; (8001994 <main+0x2d4>)
 800178c:	f002 fae0 	bl	8003d50 <HAL_GPIO_WritePin>
		break;
 8001790:	f000 bfad 	b.w	80026ee <main+0x102e>

	case MT: //Medir temp
		//empezar código
		//pedir valor
		bmp280_read_float(&bmp280,&temperature,&pressure,&humidity);
 8001794:	4b80      	ldr	r3, [pc, #512]	; (8001998 <main+0x2d8>)
 8001796:	4a81      	ldr	r2, [pc, #516]	; (800199c <main+0x2dc>)
 8001798:	4981      	ldr	r1, [pc, #516]	; (80019a0 <main+0x2e0>)
 800179a:	487b      	ldr	r0, [pc, #492]	; (8001988 <main+0x2c8>)
 800179c:	f7ff ff42 	bl	8001624 <bmp280_read_float>
		if (temperature < 0){
 80017a0:	4b7f      	ldr	r3, [pc, #508]	; (80019a0 <main+0x2e0>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f04f 0100 	mov.w	r1, #0
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7fe ff7b 	bl	80006a4 <__aeabi_fcmplt>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d02b      	beq.n	800180c <main+0x14c>
			//no encender led
			HAL_GPIO_WritePin(LED_1V_GPIO_Port, LED_1V_Pin, 0);
 80017b4:	2200      	movs	r2, #0
 80017b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017ba:	4875      	ldr	r0, [pc, #468]	; (8001990 <main+0x2d0>)
 80017bc:	f002 fac8 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2V_GPIO_Port, LED_2V_Pin, 0);
 80017c0:	2200      	movs	r2, #0
 80017c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017c6:	4873      	ldr	r0, [pc, #460]	; (8001994 <main+0x2d4>)
 80017c8:	f002 fac2 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1A_GPIO_Port, LED_1A_Pin, 0);
 80017cc:	2200      	movs	r2, #0
 80017ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017d2:	4870      	ldr	r0, [pc, #448]	; (8001994 <main+0x2d4>)
 80017d4:	f002 fabc 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2A_GPIO_Port, LED_2A_Pin, 0);
 80017d8:	2200      	movs	r2, #0
 80017da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017de:	486d      	ldr	r0, [pc, #436]	; (8001994 <main+0x2d4>)
 80017e0:	f002 fab6 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1R_GPIO_Port, LED_1R_Pin, 0);
 80017e4:	2200      	movs	r2, #0
 80017e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017ea:	486a      	ldr	r0, [pc, #424]	; (8001994 <main+0x2d4>)
 80017ec:	f002 fab0 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2R_GPIO_Port, LED_2R_Pin, 0);
 80017f0:	2200      	movs	r2, #0
 80017f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017f6:	4867      	ldr	r0, [pc, #412]	; (8001994 <main+0x2d4>)
 80017f8:	f002 faaa 	bl	8003d50 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 80017fc:	2200      	movs	r2, #0
 80017fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001802:	4864      	ldr	r0, [pc, #400]	; (8001994 <main+0x2d4>)
 8001804:	f002 faa4 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2R_GPIO_Port, LED_2R_Pin, 0);

			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
		}

		break;
 8001808:	f000 bf71 	b.w	80026ee <main+0x102e>
		} else if (temperature > 0 && temperature <= 10){
 800180c:	4b64      	ldr	r3, [pc, #400]	; (80019a0 <main+0x2e0>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f04f 0100 	mov.w	r1, #0
 8001814:	4618      	mov	r0, r3
 8001816:	f7fe ff63 	bl	80006e0 <__aeabi_fcmpgt>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d033      	beq.n	8001888 <main+0x1c8>
 8001820:	4b5f      	ldr	r3, [pc, #380]	; (80019a0 <main+0x2e0>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	495f      	ldr	r1, [pc, #380]	; (80019a4 <main+0x2e4>)
 8001826:	4618      	mov	r0, r3
 8001828:	f7fe ff46 	bl	80006b8 <__aeabi_fcmple>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d02a      	beq.n	8001888 <main+0x1c8>
			HAL_GPIO_WritePin(LED_1V_GPIO_Port, LED_1V_Pin, 1);
 8001832:	2201      	movs	r2, #1
 8001834:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001838:	4855      	ldr	r0, [pc, #340]	; (8001990 <main+0x2d0>)
 800183a:	f002 fa89 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2V_GPIO_Port, LED_2V_Pin, 0);
 800183e:	2200      	movs	r2, #0
 8001840:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001844:	4853      	ldr	r0, [pc, #332]	; (8001994 <main+0x2d4>)
 8001846:	f002 fa83 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1A_GPIO_Port, LED_1A_Pin, 0);
 800184a:	2200      	movs	r2, #0
 800184c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001850:	4850      	ldr	r0, [pc, #320]	; (8001994 <main+0x2d4>)
 8001852:	f002 fa7d 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2A_GPIO_Port, LED_2A_Pin, 0);
 8001856:	2200      	movs	r2, #0
 8001858:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800185c:	484d      	ldr	r0, [pc, #308]	; (8001994 <main+0x2d4>)
 800185e:	f002 fa77 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1R_GPIO_Port, LED_1R_Pin, 0);
 8001862:	2200      	movs	r2, #0
 8001864:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001868:	484a      	ldr	r0, [pc, #296]	; (8001994 <main+0x2d4>)
 800186a:	f002 fa71 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2R_GPIO_Port, LED_2R_Pin, 0);
 800186e:	2200      	movs	r2, #0
 8001870:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001874:	4847      	ldr	r0, [pc, #284]	; (8001994 <main+0x2d4>)
 8001876:	f002 fa6b 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0); //Prende el Buzzer
 800187a:	2200      	movs	r2, #0
 800187c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001880:	4844      	ldr	r0, [pc, #272]	; (8001994 <main+0x2d4>)
 8001882:	f002 fa65 	bl	8003d50 <HAL_GPIO_WritePin>
 8001886:	e16e      	b.n	8001b66 <main+0x4a6>
		} else if (temperature > 10 && temperature <= 21){
 8001888:	4b45      	ldr	r3, [pc, #276]	; (80019a0 <main+0x2e0>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4945      	ldr	r1, [pc, #276]	; (80019a4 <main+0x2e4>)
 800188e:	4618      	mov	r0, r3
 8001890:	f7fe ff26 	bl	80006e0 <__aeabi_fcmpgt>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d033      	beq.n	8001902 <main+0x242>
 800189a:	4b41      	ldr	r3, [pc, #260]	; (80019a0 <main+0x2e0>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4942      	ldr	r1, [pc, #264]	; (80019a8 <main+0x2e8>)
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7fe ff09 	bl	80006b8 <__aeabi_fcmple>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d02a      	beq.n	8001902 <main+0x242>
			HAL_GPIO_WritePin(LED_1V_GPIO_Port, LED_1V_Pin, 1);
 80018ac:	2201      	movs	r2, #1
 80018ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018b2:	4837      	ldr	r0, [pc, #220]	; (8001990 <main+0x2d0>)
 80018b4:	f002 fa4c 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2V_GPIO_Port, LED_2V_Pin, 1);
 80018b8:	2201      	movs	r2, #1
 80018ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018be:	4835      	ldr	r0, [pc, #212]	; (8001994 <main+0x2d4>)
 80018c0:	f002 fa46 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1A_GPIO_Port, LED_1A_Pin, 0);
 80018c4:	2200      	movs	r2, #0
 80018c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018ca:	4832      	ldr	r0, [pc, #200]	; (8001994 <main+0x2d4>)
 80018cc:	f002 fa40 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2A_GPIO_Port, LED_2A_Pin, 0);
 80018d0:	2200      	movs	r2, #0
 80018d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018d6:	482f      	ldr	r0, [pc, #188]	; (8001994 <main+0x2d4>)
 80018d8:	f002 fa3a 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1R_GPIO_Port, LED_1R_Pin, 0);
 80018dc:	2200      	movs	r2, #0
 80018de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018e2:	482c      	ldr	r0, [pc, #176]	; (8001994 <main+0x2d4>)
 80018e4:	f002 fa34 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2R_GPIO_Port, LED_2R_Pin, 0);
 80018e8:	2200      	movs	r2, #0
 80018ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018ee:	4829      	ldr	r0, [pc, #164]	; (8001994 <main+0x2d4>)
 80018f0:	f002 fa2e 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 80018f4:	2200      	movs	r2, #0
 80018f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018fa:	4826      	ldr	r0, [pc, #152]	; (8001994 <main+0x2d4>)
 80018fc:	f002 fa28 	bl	8003d50 <HAL_GPIO_WritePin>
 8001900:	e131      	b.n	8001b66 <main+0x4a6>
		} else if (temperature > 21 && temperature <= 23){
 8001902:	4b27      	ldr	r3, [pc, #156]	; (80019a0 <main+0x2e0>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4928      	ldr	r1, [pc, #160]	; (80019a8 <main+0x2e8>)
 8001908:	4618      	mov	r0, r3
 800190a:	f7fe fee9 	bl	80006e0 <__aeabi_fcmpgt>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d04d      	beq.n	80019b0 <main+0x2f0>
 8001914:	4b22      	ldr	r3, [pc, #136]	; (80019a0 <main+0x2e0>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4924      	ldr	r1, [pc, #144]	; (80019ac <main+0x2ec>)
 800191a:	4618      	mov	r0, r3
 800191c:	f7fe fecc 	bl	80006b8 <__aeabi_fcmple>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d044      	beq.n	80019b0 <main+0x2f0>
			HAL_GPIO_WritePin(LED_1V_GPIO_Port, LED_1V_Pin, 1);
 8001926:	2201      	movs	r2, #1
 8001928:	f44f 7180 	mov.w	r1, #256	; 0x100
 800192c:	4818      	ldr	r0, [pc, #96]	; (8001990 <main+0x2d0>)
 800192e:	f002 fa0f 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2V_GPIO_Port, LED_2V_Pin, 1);
 8001932:	2201      	movs	r2, #1
 8001934:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001938:	4816      	ldr	r0, [pc, #88]	; (8001994 <main+0x2d4>)
 800193a:	f002 fa09 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1A_GPIO_Port, LED_1A_Pin, 1);
 800193e:	2201      	movs	r2, #1
 8001940:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001944:	4813      	ldr	r0, [pc, #76]	; (8001994 <main+0x2d4>)
 8001946:	f002 fa03 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2A_GPIO_Port, LED_2A_Pin, 0);
 800194a:	2200      	movs	r2, #0
 800194c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001950:	4810      	ldr	r0, [pc, #64]	; (8001994 <main+0x2d4>)
 8001952:	f002 f9fd 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1R_GPIO_Port, LED_1R_Pin, 0);
 8001956:	2200      	movs	r2, #0
 8001958:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800195c:	480d      	ldr	r0, [pc, #52]	; (8001994 <main+0x2d4>)
 800195e:	f002 f9f7 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2R_GPIO_Port, LED_2R_Pin, 0);
 8001962:	2200      	movs	r2, #0
 8001964:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001968:	480a      	ldr	r0, [pc, #40]	; (8001994 <main+0x2d4>)
 800196a:	f002 f9f1 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 800196e:	2200      	movs	r2, #0
 8001970:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001974:	4807      	ldr	r0, [pc, #28]	; (8001994 <main+0x2d4>)
 8001976:	f002 f9eb 	bl	8003d50 <HAL_GPIO_WritePin>
 800197a:	e0f4      	b.n	8001b66 <main+0x4a6>
 800197c:	2000005c 	.word	0x2000005c
 8001980:	2000008c 	.word	0x2000008c
 8001984:	20000054 	.word	0x20000054
 8001988:	20000028 	.word	0x20000028
 800198c:	200000e0 	.word	0x200000e0
 8001990:	40010800 	.word	0x40010800
 8001994:	40010c00 	.word	0x40010c00
 8001998:	200000e8 	.word	0x200000e8
 800199c:	200000ec 	.word	0x200000ec
 80019a0:	200000e4 	.word	0x200000e4
 80019a4:	41200000 	.word	0x41200000
 80019a8:	41a80000 	.word	0x41a80000
 80019ac:	41b80000 	.word	0x41b80000
		} else if (temperature > 23 && temperature <= 25){
 80019b0:	4bab      	ldr	r3, [pc, #684]	; (8001c60 <main+0x5a0>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	49ab      	ldr	r1, [pc, #684]	; (8001c64 <main+0x5a4>)
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7fe fe92 	bl	80006e0 <__aeabi_fcmpgt>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d033      	beq.n	8001a2a <main+0x36a>
 80019c2:	4ba7      	ldr	r3, [pc, #668]	; (8001c60 <main+0x5a0>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	49a8      	ldr	r1, [pc, #672]	; (8001c68 <main+0x5a8>)
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7fe fe75 	bl	80006b8 <__aeabi_fcmple>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d02a      	beq.n	8001a2a <main+0x36a>
			HAL_GPIO_WritePin(LED_1V_GPIO_Port, LED_1V_Pin, 1);
 80019d4:	2201      	movs	r2, #1
 80019d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019da:	48a4      	ldr	r0, [pc, #656]	; (8001c6c <main+0x5ac>)
 80019dc:	f002 f9b8 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2V_GPIO_Port, LED_2V_Pin, 1);
 80019e0:	2201      	movs	r2, #1
 80019e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019e6:	48a2      	ldr	r0, [pc, #648]	; (8001c70 <main+0x5b0>)
 80019e8:	f002 f9b2 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1A_GPIO_Port, LED_1A_Pin, 1);
 80019ec:	2201      	movs	r2, #1
 80019ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019f2:	489f      	ldr	r0, [pc, #636]	; (8001c70 <main+0x5b0>)
 80019f4:	f002 f9ac 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2A_GPIO_Port, LED_2A_Pin, 1);
 80019f8:	2201      	movs	r2, #1
 80019fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019fe:	489c      	ldr	r0, [pc, #624]	; (8001c70 <main+0x5b0>)
 8001a00:	f002 f9a6 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1R_GPIO_Port, LED_1R_Pin, 0);
 8001a04:	2200      	movs	r2, #0
 8001a06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a0a:	4899      	ldr	r0, [pc, #612]	; (8001c70 <main+0x5b0>)
 8001a0c:	f002 f9a0 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2R_GPIO_Port, LED_2R_Pin, 0);
 8001a10:	2200      	movs	r2, #0
 8001a12:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a16:	4896      	ldr	r0, [pc, #600]	; (8001c70 <main+0x5b0>)
 8001a18:	f002 f99a 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a22:	4893      	ldr	r0, [pc, #588]	; (8001c70 <main+0x5b0>)
 8001a24:	f002 f994 	bl	8003d50 <HAL_GPIO_WritePin>
 8001a28:	e09d      	b.n	8001b66 <main+0x4a6>
		} else if (temperature > 25 && temperature <= 27){
 8001a2a:	4b8d      	ldr	r3, [pc, #564]	; (8001c60 <main+0x5a0>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	498e      	ldr	r1, [pc, #568]	; (8001c68 <main+0x5a8>)
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7fe fe55 	bl	80006e0 <__aeabi_fcmpgt>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d033      	beq.n	8001aa4 <main+0x3e4>
 8001a3c:	4b88      	ldr	r3, [pc, #544]	; (8001c60 <main+0x5a0>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	498c      	ldr	r1, [pc, #560]	; (8001c74 <main+0x5b4>)
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7fe fe38 	bl	80006b8 <__aeabi_fcmple>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d02a      	beq.n	8001aa4 <main+0x3e4>
			HAL_GPIO_WritePin(LED_1V_GPIO_Port, LED_1V_Pin, 1);
 8001a4e:	2201      	movs	r2, #1
 8001a50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a54:	4885      	ldr	r0, [pc, #532]	; (8001c6c <main+0x5ac>)
 8001a56:	f002 f97b 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2V_GPIO_Port, LED_2V_Pin, 1);
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a60:	4883      	ldr	r0, [pc, #524]	; (8001c70 <main+0x5b0>)
 8001a62:	f002 f975 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1A_GPIO_Port, LED_1A_Pin, 1);
 8001a66:	2201      	movs	r2, #1
 8001a68:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a6c:	4880      	ldr	r0, [pc, #512]	; (8001c70 <main+0x5b0>)
 8001a6e:	f002 f96f 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2A_GPIO_Port, LED_2A_Pin, 1);
 8001a72:	2201      	movs	r2, #1
 8001a74:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a78:	487d      	ldr	r0, [pc, #500]	; (8001c70 <main+0x5b0>)
 8001a7a:	f002 f969 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1R_GPIO_Port, LED_1R_Pin, 1);
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a84:	487a      	ldr	r0, [pc, #488]	; (8001c70 <main+0x5b0>)
 8001a86:	f002 f963 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2R_GPIO_Port, LED_2R_Pin, 0);
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a90:	4877      	ldr	r0, [pc, #476]	; (8001c70 <main+0x5b0>)
 8001a92:	f002 f95d 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 8001a96:	2201      	movs	r2, #1
 8001a98:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a9c:	4874      	ldr	r0, [pc, #464]	; (8001c70 <main+0x5b0>)
 8001a9e:	f002 f957 	bl	8003d50 <HAL_GPIO_WritePin>
 8001aa2:	e060      	b.n	8001b66 <main+0x4a6>
		} else if (temperature > 27){
 8001aa4:	4b6e      	ldr	r3, [pc, #440]	; (8001c60 <main+0x5a0>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4972      	ldr	r1, [pc, #456]	; (8001c74 <main+0x5b4>)
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7fe fe18 	bl	80006e0 <__aeabi_fcmpgt>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d02b      	beq.n	8001b0e <main+0x44e>
			HAL_GPIO_WritePin(LED_1V_GPIO_Port, LED_1V_Pin, 1);
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001abc:	486b      	ldr	r0, [pc, #428]	; (8001c6c <main+0x5ac>)
 8001abe:	f002 f947 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2V_GPIO_Port, LED_2V_Pin, 1);
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ac8:	4869      	ldr	r0, [pc, #420]	; (8001c70 <main+0x5b0>)
 8001aca:	f002 f941 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1A_GPIO_Port, LED_1A_Pin, 1);
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ad4:	4866      	ldr	r0, [pc, #408]	; (8001c70 <main+0x5b0>)
 8001ad6:	f002 f93b 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2A_GPIO_Port, LED_2A_Pin, 1);
 8001ada:	2201      	movs	r2, #1
 8001adc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ae0:	4863      	ldr	r0, [pc, #396]	; (8001c70 <main+0x5b0>)
 8001ae2:	f002 f935 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1R_GPIO_Port, LED_1R_Pin, 1);
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001aec:	4860      	ldr	r0, [pc, #384]	; (8001c70 <main+0x5b0>)
 8001aee:	f002 f92f 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2R_GPIO_Port, LED_2R_Pin, 1);
 8001af2:	2201      	movs	r2, #1
 8001af4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001af8:	485d      	ldr	r0, [pc, #372]	; (8001c70 <main+0x5b0>)
 8001afa:	f002 f929 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 8001afe:	2201      	movs	r2, #1
 8001b00:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b04:	485a      	ldr	r0, [pc, #360]	; (8001c70 <main+0x5b0>)
 8001b06:	f002 f923 	bl	8003d50 <HAL_GPIO_WritePin>
		break;
 8001b0a:	f000 bdf0 	b.w	80026ee <main+0x102e>
			HAL_GPIO_WritePin(LED_1V_GPIO_Port, LED_1V_Pin, 0);
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b14:	4855      	ldr	r0, [pc, #340]	; (8001c6c <main+0x5ac>)
 8001b16:	f002 f91b 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2V_GPIO_Port, LED_2V_Pin, 0);
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b20:	4853      	ldr	r0, [pc, #332]	; (8001c70 <main+0x5b0>)
 8001b22:	f002 f915 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1A_GPIO_Port, LED_1A_Pin, 0);
 8001b26:	2200      	movs	r2, #0
 8001b28:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b2c:	4850      	ldr	r0, [pc, #320]	; (8001c70 <main+0x5b0>)
 8001b2e:	f002 f90f 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2A_GPIO_Port, LED_2A_Pin, 0);
 8001b32:	2200      	movs	r2, #0
 8001b34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b38:	484d      	ldr	r0, [pc, #308]	; (8001c70 <main+0x5b0>)
 8001b3a:	f002 f909 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1R_GPIO_Port, LED_1R_Pin, 0);
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b44:	484a      	ldr	r0, [pc, #296]	; (8001c70 <main+0x5b0>)
 8001b46:	f002 f903 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2R_GPIO_Port, LED_2R_Pin, 0);
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b50:	4847      	ldr	r0, [pc, #284]	; (8001c70 <main+0x5b0>)
 8001b52:	f002 f8fd 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 8001b56:	2200      	movs	r2, #0
 8001b58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b5c:	4844      	ldr	r0, [pc, #272]	; (8001c70 <main+0x5b0>)
 8001b5e:	f002 f8f7 	bl	8003d50 <HAL_GPIO_WritePin>
		break;
 8001b62:	f000 bdc4 	b.w	80026ee <main+0x102e>
 8001b66:	f000 bdc2 	b.w	80026ee <main+0x102e>

	case MH: //Medir humedad
		//empezar código
		//pedir valor
		bmp280_read_float(&bmp280,&temperature,&pressure,&humidity);
 8001b6a:	4b43      	ldr	r3, [pc, #268]	; (8001c78 <main+0x5b8>)
 8001b6c:	4a43      	ldr	r2, [pc, #268]	; (8001c7c <main+0x5bc>)
 8001b6e:	493c      	ldr	r1, [pc, #240]	; (8001c60 <main+0x5a0>)
 8001b70:	4843      	ldr	r0, [pc, #268]	; (8001c80 <main+0x5c0>)
 8001b72:	f7ff fd57 	bl	8001624 <bmp280_read_float>
		if (humidity < 0){
 8001b76:	4b40      	ldr	r3, [pc, #256]	; (8001c78 <main+0x5b8>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f04f 0100 	mov.w	r1, #0
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7fe fd90 	bl	80006a4 <__aeabi_fcmplt>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d02b      	beq.n	8001be2 <main+0x522>
			//no encender led
			HAL_GPIO_WritePin(LED_1V_GPIO_Port, LED_1V_Pin, 0);
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b90:	4836      	ldr	r0, [pc, #216]	; (8001c6c <main+0x5ac>)
 8001b92:	f002 f8dd 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2V_GPIO_Port, LED_2V_Pin, 0);
 8001b96:	2200      	movs	r2, #0
 8001b98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b9c:	4834      	ldr	r0, [pc, #208]	; (8001c70 <main+0x5b0>)
 8001b9e:	f002 f8d7 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1A_GPIO_Port, LED_1A_Pin, 0);
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ba8:	4831      	ldr	r0, [pc, #196]	; (8001c70 <main+0x5b0>)
 8001baa:	f002 f8d1 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2A_GPIO_Port, LED_2A_Pin, 0);
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bb4:	482e      	ldr	r0, [pc, #184]	; (8001c70 <main+0x5b0>)
 8001bb6:	f002 f8cb 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1R_GPIO_Port, LED_1R_Pin, 0);
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bc0:	482b      	ldr	r0, [pc, #172]	; (8001c70 <main+0x5b0>)
 8001bc2:	f002 f8c5 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2R_GPIO_Port, LED_2R_Pin, 0);
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bcc:	4828      	ldr	r0, [pc, #160]	; (8001c70 <main+0x5b0>)
 8001bce:	f002 f8bf 	bl	8003d50 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bd8:	4825      	ldr	r0, [pc, #148]	; (8001c70 <main+0x5b0>)
 8001bda:	f002 f8b9 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2R_GPIO_Port, LED_2R_Pin, 0);

			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
		}

	    break;
 8001bde:	f000 bd86 	b.w	80026ee <main+0x102e>
		} else if (humidity > 0 && humidity <= 20){
 8001be2:	4b25      	ldr	r3, [pc, #148]	; (8001c78 <main+0x5b8>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f04f 0100 	mov.w	r1, #0
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7fe fd78 	bl	80006e0 <__aeabi_fcmpgt>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d048      	beq.n	8001c88 <main+0x5c8>
 8001bf6:	4b20      	ldr	r3, [pc, #128]	; (8001c78 <main+0x5b8>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4922      	ldr	r1, [pc, #136]	; (8001c84 <main+0x5c4>)
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7fe fd5b 	bl	80006b8 <__aeabi_fcmple>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d03f      	beq.n	8001c88 <main+0x5c8>
			HAL_GPIO_WritePin(LED_1V_GPIO_Port, LED_1V_Pin, 1);
 8001c08:	2201      	movs	r2, #1
 8001c0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c0e:	4817      	ldr	r0, [pc, #92]	; (8001c6c <main+0x5ac>)
 8001c10:	f002 f89e 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2V_GPIO_Port, LED_2V_Pin, 0);
 8001c14:	2200      	movs	r2, #0
 8001c16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c1a:	4815      	ldr	r0, [pc, #84]	; (8001c70 <main+0x5b0>)
 8001c1c:	f002 f898 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1A_GPIO_Port, LED_1A_Pin, 0);
 8001c20:	2200      	movs	r2, #0
 8001c22:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c26:	4812      	ldr	r0, [pc, #72]	; (8001c70 <main+0x5b0>)
 8001c28:	f002 f892 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2A_GPIO_Port, LED_2A_Pin, 0);
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c32:	480f      	ldr	r0, [pc, #60]	; (8001c70 <main+0x5b0>)
 8001c34:	f002 f88c 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1R_GPIO_Port, LED_1R_Pin, 0);
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c3e:	480c      	ldr	r0, [pc, #48]	; (8001c70 <main+0x5b0>)
 8001c40:	f002 f886 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2R_GPIO_Port, LED_2R_Pin, 0);
 8001c44:	2200      	movs	r2, #0
 8001c46:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c4a:	4809      	ldr	r0, [pc, #36]	; (8001c70 <main+0x5b0>)
 8001c4c:	f002 f880 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 8001c50:	2200      	movs	r2, #0
 8001c52:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c56:	4806      	ldr	r0, [pc, #24]	; (8001c70 <main+0x5b0>)
 8001c58:	f002 f87a 	bl	8003d50 <HAL_GPIO_WritePin>
 8001c5c:	e168      	b.n	8001f30 <main+0x870>
 8001c5e:	bf00      	nop
 8001c60:	200000e4 	.word	0x200000e4
 8001c64:	41b80000 	.word	0x41b80000
 8001c68:	41c80000 	.word	0x41c80000
 8001c6c:	40010800 	.word	0x40010800
 8001c70:	40010c00 	.word	0x40010c00
 8001c74:	41d80000 	.word	0x41d80000
 8001c78:	200000e8 	.word	0x200000e8
 8001c7c:	200000ec 	.word	0x200000ec
 8001c80:	20000028 	.word	0x20000028
 8001c84:	41a00000 	.word	0x41a00000
		} else if (humidity > 20 && humidity <= 40){
 8001c88:	4baa      	ldr	r3, [pc, #680]	; (8001f34 <main+0x874>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	49aa      	ldr	r1, [pc, #680]	; (8001f38 <main+0x878>)
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7fe fd26 	bl	80006e0 <__aeabi_fcmpgt>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d033      	beq.n	8001d02 <main+0x642>
 8001c9a:	4ba6      	ldr	r3, [pc, #664]	; (8001f34 <main+0x874>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	49a7      	ldr	r1, [pc, #668]	; (8001f3c <main+0x87c>)
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7fe fd09 	bl	80006b8 <__aeabi_fcmple>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d02a      	beq.n	8001d02 <main+0x642>
			HAL_GPIO_WritePin(LED_1V_GPIO_Port, LED_1V_Pin, 1);
 8001cac:	2201      	movs	r2, #1
 8001cae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cb2:	48a3      	ldr	r0, [pc, #652]	; (8001f40 <main+0x880>)
 8001cb4:	f002 f84c 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2V_GPIO_Port, LED_2V_Pin, 1);
 8001cb8:	2201      	movs	r2, #1
 8001cba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cbe:	48a1      	ldr	r0, [pc, #644]	; (8001f44 <main+0x884>)
 8001cc0:	f002 f846 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1A_GPIO_Port, LED_1A_Pin, 0);
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cca:	489e      	ldr	r0, [pc, #632]	; (8001f44 <main+0x884>)
 8001ccc:	f002 f840 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2A_GPIO_Port, LED_2A_Pin, 0);
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cd6:	489b      	ldr	r0, [pc, #620]	; (8001f44 <main+0x884>)
 8001cd8:	f002 f83a 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1R_GPIO_Port, LED_1R_Pin, 0);
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ce2:	4898      	ldr	r0, [pc, #608]	; (8001f44 <main+0x884>)
 8001ce4:	f002 f834 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2R_GPIO_Port, LED_2R_Pin, 0);
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001cee:	4895      	ldr	r0, [pc, #596]	; (8001f44 <main+0x884>)
 8001cf0:	f002 f82e 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cfa:	4892      	ldr	r0, [pc, #584]	; (8001f44 <main+0x884>)
 8001cfc:	f002 f828 	bl	8003d50 <HAL_GPIO_WritePin>
 8001d00:	e116      	b.n	8001f30 <main+0x870>
		} else if (humidity > 40 && humidity <= 60){
 8001d02:	4b8c      	ldr	r3, [pc, #560]	; (8001f34 <main+0x874>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	498d      	ldr	r1, [pc, #564]	; (8001f3c <main+0x87c>)
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7fe fce9 	bl	80006e0 <__aeabi_fcmpgt>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d033      	beq.n	8001d7c <main+0x6bc>
 8001d14:	4b87      	ldr	r3, [pc, #540]	; (8001f34 <main+0x874>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	498b      	ldr	r1, [pc, #556]	; (8001f48 <main+0x888>)
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7fe fccc 	bl	80006b8 <__aeabi_fcmple>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d02a      	beq.n	8001d7c <main+0x6bc>
			HAL_GPIO_WritePin(LED_1V_GPIO_Port, LED_1V_Pin, 1);
 8001d26:	2201      	movs	r2, #1
 8001d28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d2c:	4884      	ldr	r0, [pc, #528]	; (8001f40 <main+0x880>)
 8001d2e:	f002 f80f 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2V_GPIO_Port, LED_2V_Pin, 1);
 8001d32:	2201      	movs	r2, #1
 8001d34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d38:	4882      	ldr	r0, [pc, #520]	; (8001f44 <main+0x884>)
 8001d3a:	f002 f809 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1A_GPIO_Port, LED_1A_Pin, 1);
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d44:	487f      	ldr	r0, [pc, #508]	; (8001f44 <main+0x884>)
 8001d46:	f002 f803 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2A_GPIO_Port, LED_2A_Pin, 0);
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d50:	487c      	ldr	r0, [pc, #496]	; (8001f44 <main+0x884>)
 8001d52:	f001 fffd 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1R_GPIO_Port, LED_1R_Pin, 0);
 8001d56:	2200      	movs	r2, #0
 8001d58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d5c:	4879      	ldr	r0, [pc, #484]	; (8001f44 <main+0x884>)
 8001d5e:	f001 fff7 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2R_GPIO_Port, LED_2R_Pin, 0);
 8001d62:	2200      	movs	r2, #0
 8001d64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d68:	4876      	ldr	r0, [pc, #472]	; (8001f44 <main+0x884>)
 8001d6a:	f001 fff1 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d74:	4873      	ldr	r0, [pc, #460]	; (8001f44 <main+0x884>)
 8001d76:	f001 ffeb 	bl	8003d50 <HAL_GPIO_WritePin>
 8001d7a:	e0d9      	b.n	8001f30 <main+0x870>
		} else if (humidity > 60 && humidity <= 80){
 8001d7c:	4b6d      	ldr	r3, [pc, #436]	; (8001f34 <main+0x874>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4971      	ldr	r1, [pc, #452]	; (8001f48 <main+0x888>)
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7fe fcac 	bl	80006e0 <__aeabi_fcmpgt>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d033      	beq.n	8001df6 <main+0x736>
 8001d8e:	4b69      	ldr	r3, [pc, #420]	; (8001f34 <main+0x874>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	496e      	ldr	r1, [pc, #440]	; (8001f4c <main+0x88c>)
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7fe fc8f 	bl	80006b8 <__aeabi_fcmple>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d02a      	beq.n	8001df6 <main+0x736>
			HAL_GPIO_WritePin(LED_1V_GPIO_Port, LED_1V_Pin, 1);
 8001da0:	2201      	movs	r2, #1
 8001da2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001da6:	4866      	ldr	r0, [pc, #408]	; (8001f40 <main+0x880>)
 8001da8:	f001 ffd2 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2V_GPIO_Port, LED_2V_Pin, 1);
 8001dac:	2201      	movs	r2, #1
 8001dae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001db2:	4864      	ldr	r0, [pc, #400]	; (8001f44 <main+0x884>)
 8001db4:	f001 ffcc 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1A_GPIO_Port, LED_1A_Pin, 1);
 8001db8:	2201      	movs	r2, #1
 8001dba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001dbe:	4861      	ldr	r0, [pc, #388]	; (8001f44 <main+0x884>)
 8001dc0:	f001 ffc6 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2A_GPIO_Port, LED_2A_Pin, 1);
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dca:	485e      	ldr	r0, [pc, #376]	; (8001f44 <main+0x884>)
 8001dcc:	f001 ffc0 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1R_GPIO_Port, LED_1R_Pin, 0);
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dd6:	485b      	ldr	r0, [pc, #364]	; (8001f44 <main+0x884>)
 8001dd8:	f001 ffba 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2R_GPIO_Port, LED_2R_Pin, 0);
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001de2:	4858      	ldr	r0, [pc, #352]	; (8001f44 <main+0x884>)
 8001de4:	f001 ffb4 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 8001de8:	2201      	movs	r2, #1
 8001dea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dee:	4855      	ldr	r0, [pc, #340]	; (8001f44 <main+0x884>)
 8001df0:	f001 ffae 	bl	8003d50 <HAL_GPIO_WritePin>
 8001df4:	e09c      	b.n	8001f30 <main+0x870>
		} else if (humidity > 80 && humidity <= 100){
 8001df6:	4b4f      	ldr	r3, [pc, #316]	; (8001f34 <main+0x874>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4954      	ldr	r1, [pc, #336]	; (8001f4c <main+0x88c>)
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7fe fc6f 	bl	80006e0 <__aeabi_fcmpgt>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d033      	beq.n	8001e70 <main+0x7b0>
 8001e08:	4b4a      	ldr	r3, [pc, #296]	; (8001f34 <main+0x874>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4950      	ldr	r1, [pc, #320]	; (8001f50 <main+0x890>)
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7fe fc52 	bl	80006b8 <__aeabi_fcmple>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d02a      	beq.n	8001e70 <main+0x7b0>
			HAL_GPIO_WritePin(LED_1V_GPIO_Port, LED_1V_Pin, 1);
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e20:	4847      	ldr	r0, [pc, #284]	; (8001f40 <main+0x880>)
 8001e22:	f001 ff95 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2V_GPIO_Port, LED_2V_Pin, 1);
 8001e26:	2201      	movs	r2, #1
 8001e28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e2c:	4845      	ldr	r0, [pc, #276]	; (8001f44 <main+0x884>)
 8001e2e:	f001 ff8f 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1A_GPIO_Port, LED_1A_Pin, 1);
 8001e32:	2201      	movs	r2, #1
 8001e34:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e38:	4842      	ldr	r0, [pc, #264]	; (8001f44 <main+0x884>)
 8001e3a:	f001 ff89 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2A_GPIO_Port, LED_2A_Pin, 1);
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e44:	483f      	ldr	r0, [pc, #252]	; (8001f44 <main+0x884>)
 8001e46:	f001 ff83 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1R_GPIO_Port, LED_1R_Pin, 1);
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e50:	483c      	ldr	r0, [pc, #240]	; (8001f44 <main+0x884>)
 8001e52:	f001 ff7d 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2R_GPIO_Port, LED_2R_Pin, 0);
 8001e56:	2200      	movs	r2, #0
 8001e58:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e5c:	4839      	ldr	r0, [pc, #228]	; (8001f44 <main+0x884>)
 8001e5e:	f001 ff77 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 8001e62:	2201      	movs	r2, #1
 8001e64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e68:	4836      	ldr	r0, [pc, #216]	; (8001f44 <main+0x884>)
 8001e6a:	f001 ff71 	bl	8003d50 <HAL_GPIO_WritePin>
 8001e6e:	e05f      	b.n	8001f30 <main+0x870>
		} else if (humidity > 100){
 8001e70:	4b30      	ldr	r3, [pc, #192]	; (8001f34 <main+0x874>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4936      	ldr	r1, [pc, #216]	; (8001f50 <main+0x890>)
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7fe fc32 	bl	80006e0 <__aeabi_fcmpgt>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d02b      	beq.n	8001eda <main+0x81a>
			HAL_GPIO_WritePin(LED_1V_GPIO_Port, LED_1V_Pin, 1);
 8001e82:	2201      	movs	r2, #1
 8001e84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e88:	482d      	ldr	r0, [pc, #180]	; (8001f40 <main+0x880>)
 8001e8a:	f001 ff61 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2V_GPIO_Port, LED_2V_Pin, 1);
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e94:	482b      	ldr	r0, [pc, #172]	; (8001f44 <main+0x884>)
 8001e96:	f001 ff5b 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1A_GPIO_Port, LED_1A_Pin, 1);
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ea0:	4828      	ldr	r0, [pc, #160]	; (8001f44 <main+0x884>)
 8001ea2:	f001 ff55 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2A_GPIO_Port, LED_2A_Pin, 1);
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001eac:	4825      	ldr	r0, [pc, #148]	; (8001f44 <main+0x884>)
 8001eae:	f001 ff4f 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1R_GPIO_Port, LED_1R_Pin, 1);
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001eb8:	4822      	ldr	r0, [pc, #136]	; (8001f44 <main+0x884>)
 8001eba:	f001 ff49 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2R_GPIO_Port, LED_2R_Pin, 1);
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ec4:	481f      	ldr	r0, [pc, #124]	; (8001f44 <main+0x884>)
 8001ec6:	f001 ff43 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ed0:	481c      	ldr	r0, [pc, #112]	; (8001f44 <main+0x884>)
 8001ed2:	f001 ff3d 	bl	8003d50 <HAL_GPIO_WritePin>
	    break;
 8001ed6:	f000 bc0a 	b.w	80026ee <main+0x102e>
			HAL_GPIO_WritePin(LED_1V_GPIO_Port, LED_1V_Pin, 0);
 8001eda:	2200      	movs	r2, #0
 8001edc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ee0:	4817      	ldr	r0, [pc, #92]	; (8001f40 <main+0x880>)
 8001ee2:	f001 ff35 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2V_GPIO_Port, LED_2V_Pin, 0);
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001eec:	4815      	ldr	r0, [pc, #84]	; (8001f44 <main+0x884>)
 8001eee:	f001 ff2f 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1A_GPIO_Port, LED_1A_Pin, 0);
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ef8:	4812      	ldr	r0, [pc, #72]	; (8001f44 <main+0x884>)
 8001efa:	f001 ff29 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2A_GPIO_Port, LED_2A_Pin, 0);
 8001efe:	2200      	movs	r2, #0
 8001f00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f04:	480f      	ldr	r0, [pc, #60]	; (8001f44 <main+0x884>)
 8001f06:	f001 ff23 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1R_GPIO_Port, LED_1R_Pin, 0);
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f10:	480c      	ldr	r0, [pc, #48]	; (8001f44 <main+0x884>)
 8001f12:	f001 ff1d 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2R_GPIO_Port, LED_2R_Pin, 0);
 8001f16:	2200      	movs	r2, #0
 8001f18:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f1c:	4809      	ldr	r0, [pc, #36]	; (8001f44 <main+0x884>)
 8001f1e:	f001 ff17 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 8001f22:	2200      	movs	r2, #0
 8001f24:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f28:	4806      	ldr	r0, [pc, #24]	; (8001f44 <main+0x884>)
 8001f2a:	f001 ff11 	bl	8003d50 <HAL_GPIO_WritePin>
	    break;
 8001f2e:	e3de      	b.n	80026ee <main+0x102e>
 8001f30:	e3dd      	b.n	80026ee <main+0x102e>
 8001f32:	bf00      	nop
 8001f34:	200000e8 	.word	0x200000e8
 8001f38:	41a00000 	.word	0x41a00000
 8001f3c:	42200000 	.word	0x42200000
 8001f40:	40010800 	.word	0x40010800
 8001f44:	40010c00 	.word	0x40010c00
 8001f48:	42700000 	.word	0x42700000
 8001f4c:	42a00000 	.word	0x42a00000
 8001f50:	42c80000 	.word	0x42c80000

	case MP: //medir presión
		//empezar código
		//pedir valor
		bmp280_read_float(&bmp280,&temperature,&pressure,&humidity);
 8001f54:	4bb6      	ldr	r3, [pc, #728]	; (8002230 <main+0xb70>)
 8001f56:	4ab7      	ldr	r2, [pc, #732]	; (8002234 <main+0xb74>)
 8001f58:	49b7      	ldr	r1, [pc, #732]	; (8002238 <main+0xb78>)
 8001f5a:	48b8      	ldr	r0, [pc, #736]	; (800223c <main+0xb7c>)
 8001f5c:	f7ff fb62 	bl	8001624 <bmp280_read_float>
		if (pressure < 0){
 8001f60:	4bb4      	ldr	r3, [pc, #720]	; (8002234 <main+0xb74>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f04f 0100 	mov.w	r1, #0
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7fe fb9b 	bl	80006a4 <__aeabi_fcmplt>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d02a      	beq.n	8001fca <main+0x90a>
		//no encender led
			HAL_GPIO_WritePin(LED_1V_GPIO_Port, LED_1V_Pin, 0);
 8001f74:	2200      	movs	r2, #0
 8001f76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f7a:	48b1      	ldr	r0, [pc, #708]	; (8002240 <main+0xb80>)
 8001f7c:	f001 fee8 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2V_GPIO_Port, LED_2V_Pin, 0);
 8001f80:	2200      	movs	r2, #0
 8001f82:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f86:	48af      	ldr	r0, [pc, #700]	; (8002244 <main+0xb84>)
 8001f88:	f001 fee2 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1A_GPIO_Port, LED_1A_Pin, 0);
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f92:	48ac      	ldr	r0, [pc, #688]	; (8002244 <main+0xb84>)
 8001f94:	f001 fedc 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2A_GPIO_Port, LED_2A_Pin, 0);
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f9e:	48a9      	ldr	r0, [pc, #676]	; (8002244 <main+0xb84>)
 8001fa0:	f001 fed6 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1R_GPIO_Port, LED_1R_Pin, 0);
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001faa:	48a6      	ldr	r0, [pc, #664]	; (8002244 <main+0xb84>)
 8001fac:	f001 fed0 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2R_GPIO_Port, LED_2R_Pin, 0);
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fb6:	48a3      	ldr	r0, [pc, #652]	; (8002244 <main+0xb84>)
 8001fb8:	f001 feca 	bl	8003d50 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fc2:	48a0      	ldr	r0, [pc, #640]	; (8002244 <main+0xb84>)
 8001fc4:	f001 fec4 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2R_GPIO_Port, LED_2R_Pin, 0);

			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
			}

			break;
 8001fc8:	e391      	b.n	80026ee <main+0x102e>
		} else if (pressure > 0 && pressure <= 20){
 8001fca:	4b9a      	ldr	r3, [pc, #616]	; (8002234 <main+0xb74>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f04f 0100 	mov.w	r1, #0
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7fe fb84 	bl	80006e0 <__aeabi_fcmpgt>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d033      	beq.n	8002046 <main+0x986>
 8001fde:	4b95      	ldr	r3, [pc, #596]	; (8002234 <main+0xb74>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4999      	ldr	r1, [pc, #612]	; (8002248 <main+0xb88>)
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7fe fb67 	bl	80006b8 <__aeabi_fcmple>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d02a      	beq.n	8002046 <main+0x986>
			HAL_GPIO_WritePin(LED_1V_GPIO_Port, LED_1V_Pin, 1);
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ff6:	4892      	ldr	r0, [pc, #584]	; (8002240 <main+0xb80>)
 8001ff8:	f001 feaa 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2V_GPIO_Port, LED_2V_Pin, 0);
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002002:	4890      	ldr	r0, [pc, #576]	; (8002244 <main+0xb84>)
 8002004:	f001 fea4 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1A_GPIO_Port, LED_1A_Pin, 0);
 8002008:	2200      	movs	r2, #0
 800200a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800200e:	488d      	ldr	r0, [pc, #564]	; (8002244 <main+0xb84>)
 8002010:	f001 fe9e 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2A_GPIO_Port, LED_2A_Pin, 0);
 8002014:	2200      	movs	r2, #0
 8002016:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800201a:	488a      	ldr	r0, [pc, #552]	; (8002244 <main+0xb84>)
 800201c:	f001 fe98 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1R_GPIO_Port, LED_1R_Pin, 0);
 8002020:	2200      	movs	r2, #0
 8002022:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002026:	4887      	ldr	r0, [pc, #540]	; (8002244 <main+0xb84>)
 8002028:	f001 fe92 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2R_GPIO_Port, LED_2R_Pin, 0);
 800202c:	2200      	movs	r2, #0
 800202e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002032:	4884      	ldr	r0, [pc, #528]	; (8002244 <main+0xb84>)
 8002034:	f001 fe8c 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 8002038:	2200      	movs	r2, #0
 800203a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800203e:	4881      	ldr	r0, [pc, #516]	; (8002244 <main+0xb84>)
 8002040:	f001 fe86 	bl	8003d50 <HAL_GPIO_WritePin>
 8002044:	e169      	b.n	800231a <main+0xc5a>
		} else if (pressure > 20 && pressure <= 40){
 8002046:	4b7b      	ldr	r3, [pc, #492]	; (8002234 <main+0xb74>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	497f      	ldr	r1, [pc, #508]	; (8002248 <main+0xb88>)
 800204c:	4618      	mov	r0, r3
 800204e:	f7fe fb47 	bl	80006e0 <__aeabi_fcmpgt>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d033      	beq.n	80020c0 <main+0xa00>
 8002058:	4b76      	ldr	r3, [pc, #472]	; (8002234 <main+0xb74>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	497b      	ldr	r1, [pc, #492]	; (800224c <main+0xb8c>)
 800205e:	4618      	mov	r0, r3
 8002060:	f7fe fb2a 	bl	80006b8 <__aeabi_fcmple>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d02a      	beq.n	80020c0 <main+0xa00>
			HAL_GPIO_WritePin(LED_1V_GPIO_Port, LED_1V_Pin, 1);
 800206a:	2201      	movs	r2, #1
 800206c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002070:	4873      	ldr	r0, [pc, #460]	; (8002240 <main+0xb80>)
 8002072:	f001 fe6d 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2V_GPIO_Port, LED_2V_Pin, 1);
 8002076:	2201      	movs	r2, #1
 8002078:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800207c:	4871      	ldr	r0, [pc, #452]	; (8002244 <main+0xb84>)
 800207e:	f001 fe67 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1A_GPIO_Port, LED_1A_Pin, 0);
 8002082:	2200      	movs	r2, #0
 8002084:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002088:	486e      	ldr	r0, [pc, #440]	; (8002244 <main+0xb84>)
 800208a:	f001 fe61 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2A_GPIO_Port, LED_2A_Pin, 0);
 800208e:	2200      	movs	r2, #0
 8002090:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002094:	486b      	ldr	r0, [pc, #428]	; (8002244 <main+0xb84>)
 8002096:	f001 fe5b 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1R_GPIO_Port, LED_1R_Pin, 0);
 800209a:	2200      	movs	r2, #0
 800209c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020a0:	4868      	ldr	r0, [pc, #416]	; (8002244 <main+0xb84>)
 80020a2:	f001 fe55 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2R_GPIO_Port, LED_2R_Pin, 0);
 80020a6:	2200      	movs	r2, #0
 80020a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020ac:	4865      	ldr	r0, [pc, #404]	; (8002244 <main+0xb84>)
 80020ae:	f001 fe4f 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 80020b2:	2201      	movs	r2, #1
 80020b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020b8:	4862      	ldr	r0, [pc, #392]	; (8002244 <main+0xb84>)
 80020ba:	f001 fe49 	bl	8003d50 <HAL_GPIO_WritePin>
 80020be:	e12c      	b.n	800231a <main+0xc5a>
		} else if (pressure > 40 && pressure <= 60){
 80020c0:	4b5c      	ldr	r3, [pc, #368]	; (8002234 <main+0xb74>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4961      	ldr	r1, [pc, #388]	; (800224c <main+0xb8c>)
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7fe fb0a 	bl	80006e0 <__aeabi_fcmpgt>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d033      	beq.n	800213a <main+0xa7a>
 80020d2:	4b58      	ldr	r3, [pc, #352]	; (8002234 <main+0xb74>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	495e      	ldr	r1, [pc, #376]	; (8002250 <main+0xb90>)
 80020d8:	4618      	mov	r0, r3
 80020da:	f7fe faed 	bl	80006b8 <__aeabi_fcmple>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d02a      	beq.n	800213a <main+0xa7a>
			HAL_GPIO_WritePin(LED_1V_GPIO_Port, LED_1V_Pin, 1);
 80020e4:	2201      	movs	r2, #1
 80020e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020ea:	4855      	ldr	r0, [pc, #340]	; (8002240 <main+0xb80>)
 80020ec:	f001 fe30 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2V_GPIO_Port, LED_2V_Pin, 1);
 80020f0:	2201      	movs	r2, #1
 80020f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020f6:	4853      	ldr	r0, [pc, #332]	; (8002244 <main+0xb84>)
 80020f8:	f001 fe2a 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1A_GPIO_Port, LED_1A_Pin, 1);
 80020fc:	2201      	movs	r2, #1
 80020fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002102:	4850      	ldr	r0, [pc, #320]	; (8002244 <main+0xb84>)
 8002104:	f001 fe24 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2A_GPIO_Port, LED_2A_Pin, 0);
 8002108:	2200      	movs	r2, #0
 800210a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800210e:	484d      	ldr	r0, [pc, #308]	; (8002244 <main+0xb84>)
 8002110:	f001 fe1e 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1R_GPIO_Port, LED_1R_Pin, 0);
 8002114:	2200      	movs	r2, #0
 8002116:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800211a:	484a      	ldr	r0, [pc, #296]	; (8002244 <main+0xb84>)
 800211c:	f001 fe18 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2R_GPIO_Port, LED_2R_Pin, 0);
 8002120:	2200      	movs	r2, #0
 8002122:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002126:	4847      	ldr	r0, [pc, #284]	; (8002244 <main+0xb84>)
 8002128:	f001 fe12 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 800212c:	2201      	movs	r2, #1
 800212e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002132:	4844      	ldr	r0, [pc, #272]	; (8002244 <main+0xb84>)
 8002134:	f001 fe0c 	bl	8003d50 <HAL_GPIO_WritePin>
 8002138:	e0ef      	b.n	800231a <main+0xc5a>
		} else if (pressure > 60 && pressure <= 80){
 800213a:	4b3e      	ldr	r3, [pc, #248]	; (8002234 <main+0xb74>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4944      	ldr	r1, [pc, #272]	; (8002250 <main+0xb90>)
 8002140:	4618      	mov	r0, r3
 8002142:	f7fe facd 	bl	80006e0 <__aeabi_fcmpgt>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d033      	beq.n	80021b4 <main+0xaf4>
 800214c:	4b39      	ldr	r3, [pc, #228]	; (8002234 <main+0xb74>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4940      	ldr	r1, [pc, #256]	; (8002254 <main+0xb94>)
 8002152:	4618      	mov	r0, r3
 8002154:	f7fe fab0 	bl	80006b8 <__aeabi_fcmple>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d02a      	beq.n	80021b4 <main+0xaf4>
			HAL_GPIO_WritePin(LED_1V_GPIO_Port, LED_1V_Pin, 1);
 800215e:	2201      	movs	r2, #1
 8002160:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002164:	4836      	ldr	r0, [pc, #216]	; (8002240 <main+0xb80>)
 8002166:	f001 fdf3 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2V_GPIO_Port, LED_2V_Pin, 1);
 800216a:	2201      	movs	r2, #1
 800216c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002170:	4834      	ldr	r0, [pc, #208]	; (8002244 <main+0xb84>)
 8002172:	f001 fded 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1A_GPIO_Port, LED_1A_Pin, 1);
 8002176:	2201      	movs	r2, #1
 8002178:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800217c:	4831      	ldr	r0, [pc, #196]	; (8002244 <main+0xb84>)
 800217e:	f001 fde7 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2A_GPIO_Port, LED_2A_Pin, 1);
 8002182:	2201      	movs	r2, #1
 8002184:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002188:	482e      	ldr	r0, [pc, #184]	; (8002244 <main+0xb84>)
 800218a:	f001 fde1 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1R_GPIO_Port, LED_1R_Pin, 0);
 800218e:	2200      	movs	r2, #0
 8002190:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002194:	482b      	ldr	r0, [pc, #172]	; (8002244 <main+0xb84>)
 8002196:	f001 fddb 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2R_GPIO_Port, LED_2R_Pin, 0);
 800219a:	2200      	movs	r2, #0
 800219c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021a0:	4828      	ldr	r0, [pc, #160]	; (8002244 <main+0xb84>)
 80021a2:	f001 fdd5 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 80021a6:	2201      	movs	r2, #1
 80021a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021ac:	4825      	ldr	r0, [pc, #148]	; (8002244 <main+0xb84>)
 80021ae:	f001 fdcf 	bl	8003d50 <HAL_GPIO_WritePin>
 80021b2:	e0b2      	b.n	800231a <main+0xc5a>
		} else if (pressure > 80 && pressure <= 100){
 80021b4:	4b1f      	ldr	r3, [pc, #124]	; (8002234 <main+0xb74>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4926      	ldr	r1, [pc, #152]	; (8002254 <main+0xb94>)
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7fe fa90 	bl	80006e0 <__aeabi_fcmpgt>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d04a      	beq.n	800225c <main+0xb9c>
 80021c6:	4b1b      	ldr	r3, [pc, #108]	; (8002234 <main+0xb74>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4923      	ldr	r1, [pc, #140]	; (8002258 <main+0xb98>)
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7fe fa73 	bl	80006b8 <__aeabi_fcmple>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d041      	beq.n	800225c <main+0xb9c>
			HAL_GPIO_WritePin(LED_1V_GPIO_Port, LED_1V_Pin, 1);
 80021d8:	2201      	movs	r2, #1
 80021da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021de:	4818      	ldr	r0, [pc, #96]	; (8002240 <main+0xb80>)
 80021e0:	f001 fdb6 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2V_GPIO_Port, LED_2V_Pin, 1);
 80021e4:	2201      	movs	r2, #1
 80021e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021ea:	4816      	ldr	r0, [pc, #88]	; (8002244 <main+0xb84>)
 80021ec:	f001 fdb0 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1A_GPIO_Port, LED_1A_Pin, 1);
 80021f0:	2201      	movs	r2, #1
 80021f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80021f6:	4813      	ldr	r0, [pc, #76]	; (8002244 <main+0xb84>)
 80021f8:	f001 fdaa 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2A_GPIO_Port, LED_2A_Pin, 1);
 80021fc:	2201      	movs	r2, #1
 80021fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002202:	4810      	ldr	r0, [pc, #64]	; (8002244 <main+0xb84>)
 8002204:	f001 fda4 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1R_GPIO_Port, LED_1R_Pin, 1);
 8002208:	2201      	movs	r2, #1
 800220a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800220e:	480d      	ldr	r0, [pc, #52]	; (8002244 <main+0xb84>)
 8002210:	f001 fd9e 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2R_GPIO_Port, LED_2R_Pin, 0);
 8002214:	2200      	movs	r2, #0
 8002216:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800221a:	480a      	ldr	r0, [pc, #40]	; (8002244 <main+0xb84>)
 800221c:	f001 fd98 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 8002220:	2201      	movs	r2, #1
 8002222:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002226:	4807      	ldr	r0, [pc, #28]	; (8002244 <main+0xb84>)
 8002228:	f001 fd92 	bl	8003d50 <HAL_GPIO_WritePin>
 800222c:	e075      	b.n	800231a <main+0xc5a>
 800222e:	bf00      	nop
 8002230:	200000e8 	.word	0x200000e8
 8002234:	200000ec 	.word	0x200000ec
 8002238:	200000e4 	.word	0x200000e4
 800223c:	20000028 	.word	0x20000028
 8002240:	40010800 	.word	0x40010800
 8002244:	40010c00 	.word	0x40010c00
 8002248:	41a00000 	.word	0x41a00000
 800224c:	42200000 	.word	0x42200000
 8002250:	42700000 	.word	0x42700000
 8002254:	42a00000 	.word	0x42a00000
 8002258:	42c80000 	.word	0x42c80000
		} else if (pressure > 100){
 800225c:	4bad      	ldr	r3, [pc, #692]	; (8002514 <main+0xe54>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	49ad      	ldr	r1, [pc, #692]	; (8002518 <main+0xe58>)
 8002262:	4618      	mov	r0, r3
 8002264:	f7fe fa3c 	bl	80006e0 <__aeabi_fcmpgt>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d02a      	beq.n	80022c4 <main+0xc04>
			HAL_GPIO_WritePin(LED_1V_GPIO_Port, LED_1V_Pin, 1);
 800226e:	2201      	movs	r2, #1
 8002270:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002274:	48a9      	ldr	r0, [pc, #676]	; (800251c <main+0xe5c>)
 8002276:	f001 fd6b 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2V_GPIO_Port, LED_2V_Pin, 1);
 800227a:	2201      	movs	r2, #1
 800227c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002280:	48a7      	ldr	r0, [pc, #668]	; (8002520 <main+0xe60>)
 8002282:	f001 fd65 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1A_GPIO_Port, LED_1A_Pin, 1);
 8002286:	2201      	movs	r2, #1
 8002288:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800228c:	48a4      	ldr	r0, [pc, #656]	; (8002520 <main+0xe60>)
 800228e:	f001 fd5f 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2A_GPIO_Port, LED_2A_Pin, 1);
 8002292:	2201      	movs	r2, #1
 8002294:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002298:	48a1      	ldr	r0, [pc, #644]	; (8002520 <main+0xe60>)
 800229a:	f001 fd59 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1R_GPIO_Port, LED_1R_Pin, 1);
 800229e:	2201      	movs	r2, #1
 80022a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022a4:	489e      	ldr	r0, [pc, #632]	; (8002520 <main+0xe60>)
 80022a6:	f001 fd53 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2R_GPIO_Port, LED_2R_Pin, 1);
 80022aa:	2201      	movs	r2, #1
 80022ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022b0:	489b      	ldr	r0, [pc, #620]	; (8002520 <main+0xe60>)
 80022b2:	f001 fd4d 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 80022b6:	2201      	movs	r2, #1
 80022b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022bc:	4898      	ldr	r0, [pc, #608]	; (8002520 <main+0xe60>)
 80022be:	f001 fd47 	bl	8003d50 <HAL_GPIO_WritePin>
			break;
 80022c2:	e214      	b.n	80026ee <main+0x102e>
			HAL_GPIO_WritePin(LED_1V_GPIO_Port, LED_1V_Pin, 0);
 80022c4:	2200      	movs	r2, #0
 80022c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022ca:	4894      	ldr	r0, [pc, #592]	; (800251c <main+0xe5c>)
 80022cc:	f001 fd40 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2V_GPIO_Port, LED_2V_Pin, 0);
 80022d0:	2200      	movs	r2, #0
 80022d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022d6:	4892      	ldr	r0, [pc, #584]	; (8002520 <main+0xe60>)
 80022d8:	f001 fd3a 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1A_GPIO_Port, LED_1A_Pin, 0);
 80022dc:	2200      	movs	r2, #0
 80022de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80022e2:	488f      	ldr	r0, [pc, #572]	; (8002520 <main+0xe60>)
 80022e4:	f001 fd34 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2A_GPIO_Port, LED_2A_Pin, 0);
 80022e8:	2200      	movs	r2, #0
 80022ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022ee:	488c      	ldr	r0, [pc, #560]	; (8002520 <main+0xe60>)
 80022f0:	f001 fd2e 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1R_GPIO_Port, LED_1R_Pin, 0);
 80022f4:	2200      	movs	r2, #0
 80022f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022fa:	4889      	ldr	r0, [pc, #548]	; (8002520 <main+0xe60>)
 80022fc:	f001 fd28 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2R_GPIO_Port, LED_2R_Pin, 0);
 8002300:	2200      	movs	r2, #0
 8002302:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002306:	4886      	ldr	r0, [pc, #536]	; (8002520 <main+0xe60>)
 8002308:	f001 fd22 	bl	8003d50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 800230c:	2201      	movs	r2, #1
 800230e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002312:	4883      	ldr	r0, [pc, #524]	; (8002520 <main+0xe60>)
 8002314:	f001 fd1c 	bl	8003d50 <HAL_GPIO_WritePin>
			break;
 8002318:	e1e9      	b.n	80026ee <main+0x102e>
 800231a:	e1e8      	b.n	80026ee <main+0x102e>

	case ML: //medir luz
		//empezar código
		//pedir valor
		HAL_ADC_PollForConversion(&hadc1, 100);
 800231c:	2164      	movs	r1, #100	; 0x64
 800231e:	4881      	ldr	r0, [pc, #516]	; (8002524 <main+0xe64>)
 8002320:	f000 fe7e 	bl	8003020 <HAL_ADC_PollForConversion>
		light = HAL_ADC_GetValue(&hadc1);
 8002324:	487f      	ldr	r0, [pc, #508]	; (8002524 <main+0xe64>)
 8002326:	f000 ff81 	bl	800322c <HAL_ADC_GetValue>
 800232a:	4603      	mov	r3, r0
 800232c:	4618      	mov	r0, r3
 800232e:	f7fd ffc3 	bl	80002b8 <__aeabi_ui2f>
 8002332:	4603      	mov	r3, r0
 8002334:	4a7c      	ldr	r2, [pc, #496]	; (8002528 <main+0xe68>)
 8002336:	6013      	str	r3, [r2, #0]
		if (light < 0){
 8002338:	4b7b      	ldr	r3, [pc, #492]	; (8002528 <main+0xe68>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f04f 0100 	mov.w	r1, #0
 8002340:	4618      	mov	r0, r3
 8002342:	f7fe f9af 	bl	80006a4 <__aeabi_fcmplt>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d02a      	beq.n	80023a2 <main+0xce2>
		//no encender led
		HAL_GPIO_WritePin(LED_1V_GPIO_Port, LED_1V_Pin, 0);
 800234c:	2200      	movs	r2, #0
 800234e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002352:	4872      	ldr	r0, [pc, #456]	; (800251c <main+0xe5c>)
 8002354:	f001 fcfc 	bl	8003d50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_2V_GPIO_Port, LED_2V_Pin, 0);
 8002358:	2200      	movs	r2, #0
 800235a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800235e:	4870      	ldr	r0, [pc, #448]	; (8002520 <main+0xe60>)
 8002360:	f001 fcf6 	bl	8003d50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_1A_GPIO_Port, LED_1A_Pin, 0);
 8002364:	2200      	movs	r2, #0
 8002366:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800236a:	486d      	ldr	r0, [pc, #436]	; (8002520 <main+0xe60>)
 800236c:	f001 fcf0 	bl	8003d50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_2A_GPIO_Port, LED_2A_Pin, 0);
 8002370:	2200      	movs	r2, #0
 8002372:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002376:	486a      	ldr	r0, [pc, #424]	; (8002520 <main+0xe60>)
 8002378:	f001 fcea 	bl	8003d50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_1R_GPIO_Port, LED_1R_Pin, 0);
 800237c:	2200      	movs	r2, #0
 800237e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002382:	4867      	ldr	r0, [pc, #412]	; (8002520 <main+0xe60>)
 8002384:	f001 fce4 	bl	8003d50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_2R_GPIO_Port, LED_2R_Pin, 0);
 8002388:	2200      	movs	r2, #0
 800238a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800238e:	4864      	ldr	r0, [pc, #400]	; (8002520 <main+0xe60>)
 8002390:	f001 fcde 	bl	8003d50 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 8002394:	2200      	movs	r2, #0
 8002396:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800239a:	4861      	ldr	r0, [pc, #388]	; (8002520 <main+0xe60>)
 800239c:	f001 fcd8 	bl	8003d50 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);

		}

			break;
 80023a0:	e1a5      	b.n	80026ee <main+0x102e>
		} else if (light > 0 && light <= 20000){
 80023a2:	4b61      	ldr	r3, [pc, #388]	; (8002528 <main+0xe68>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f04f 0100 	mov.w	r1, #0
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7fe f998 	bl	80006e0 <__aeabi_fcmpgt>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d033      	beq.n	800241e <main+0xd5e>
 80023b6:	4b5c      	ldr	r3, [pc, #368]	; (8002528 <main+0xe68>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	495c      	ldr	r1, [pc, #368]	; (800252c <main+0xe6c>)
 80023bc:	4618      	mov	r0, r3
 80023be:	f7fe f97b 	bl	80006b8 <__aeabi_fcmple>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d02a      	beq.n	800241e <main+0xd5e>
		HAL_GPIO_WritePin(LED_1V_GPIO_Port, LED_1V_Pin, 1);
 80023c8:	2201      	movs	r2, #1
 80023ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023ce:	4853      	ldr	r0, [pc, #332]	; (800251c <main+0xe5c>)
 80023d0:	f001 fcbe 	bl	8003d50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_2V_GPIO_Port, LED_2V_Pin, 0);
 80023d4:	2200      	movs	r2, #0
 80023d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023da:	4851      	ldr	r0, [pc, #324]	; (8002520 <main+0xe60>)
 80023dc:	f001 fcb8 	bl	8003d50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_1A_GPIO_Port, LED_1A_Pin, 0);
 80023e0:	2200      	movs	r2, #0
 80023e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80023e6:	484e      	ldr	r0, [pc, #312]	; (8002520 <main+0xe60>)
 80023e8:	f001 fcb2 	bl	8003d50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_2A_GPIO_Port, LED_2A_Pin, 0);
 80023ec:	2200      	movs	r2, #0
 80023ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023f2:	484b      	ldr	r0, [pc, #300]	; (8002520 <main+0xe60>)
 80023f4:	f001 fcac 	bl	8003d50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_1R_GPIO_Port, LED_1R_Pin, 0);
 80023f8:	2200      	movs	r2, #0
 80023fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023fe:	4848      	ldr	r0, [pc, #288]	; (8002520 <main+0xe60>)
 8002400:	f001 fca6 	bl	8003d50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_2R_GPIO_Port, LED_2R_Pin, 0);
 8002404:	2200      	movs	r2, #0
 8002406:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800240a:	4845      	ldr	r0, [pc, #276]	; (8002520 <main+0xe60>)
 800240c:	f001 fca0 	bl	8003d50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 8002410:	2201      	movs	r2, #1
 8002412:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002416:	4842      	ldr	r0, [pc, #264]	; (8002520 <main+0xe60>)
 8002418:	f001 fc9a 	bl	8003d50 <HAL_GPIO_WritePin>
 800241c:	e165      	b.n	80026ea <main+0x102a>
		} else if (light > 20000 && light <= 25000){
 800241e:	4b42      	ldr	r3, [pc, #264]	; (8002528 <main+0xe68>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4942      	ldr	r1, [pc, #264]	; (800252c <main+0xe6c>)
 8002424:	4618      	mov	r0, r3
 8002426:	f7fe f95b 	bl	80006e0 <__aeabi_fcmpgt>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d033      	beq.n	8002498 <main+0xdd8>
 8002430:	4b3d      	ldr	r3, [pc, #244]	; (8002528 <main+0xe68>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	493e      	ldr	r1, [pc, #248]	; (8002530 <main+0xe70>)
 8002436:	4618      	mov	r0, r3
 8002438:	f7fe f93e 	bl	80006b8 <__aeabi_fcmple>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d02a      	beq.n	8002498 <main+0xdd8>
		HAL_GPIO_WritePin(LED_1V_GPIO_Port, LED_1V_Pin, 1);
 8002442:	2201      	movs	r2, #1
 8002444:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002448:	4834      	ldr	r0, [pc, #208]	; (800251c <main+0xe5c>)
 800244a:	f001 fc81 	bl	8003d50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_2V_GPIO_Port, LED_2V_Pin, 1);
 800244e:	2201      	movs	r2, #1
 8002450:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002454:	4832      	ldr	r0, [pc, #200]	; (8002520 <main+0xe60>)
 8002456:	f001 fc7b 	bl	8003d50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_1A_GPIO_Port, LED_1A_Pin, 0);
 800245a:	2200      	movs	r2, #0
 800245c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002460:	482f      	ldr	r0, [pc, #188]	; (8002520 <main+0xe60>)
 8002462:	f001 fc75 	bl	8003d50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_2A_GPIO_Port, LED_2A_Pin, 0);
 8002466:	2200      	movs	r2, #0
 8002468:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800246c:	482c      	ldr	r0, [pc, #176]	; (8002520 <main+0xe60>)
 800246e:	f001 fc6f 	bl	8003d50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_1R_GPIO_Port, LED_1R_Pin, 0);
 8002472:	2200      	movs	r2, #0
 8002474:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002478:	4829      	ldr	r0, [pc, #164]	; (8002520 <main+0xe60>)
 800247a:	f001 fc69 	bl	8003d50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_2R_GPIO_Port, LED_2R_Pin, 0);
 800247e:	2200      	movs	r2, #0
 8002480:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002484:	4826      	ldr	r0, [pc, #152]	; (8002520 <main+0xe60>)
 8002486:	f001 fc63 	bl	8003d50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 800248a:	2201      	movs	r2, #1
 800248c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002490:	4823      	ldr	r0, [pc, #140]	; (8002520 <main+0xe60>)
 8002492:	f001 fc5d 	bl	8003d50 <HAL_GPIO_WritePin>
 8002496:	e128      	b.n	80026ea <main+0x102a>
		} else if (light > 25000 && light <= 30000){
 8002498:	4b23      	ldr	r3, [pc, #140]	; (8002528 <main+0xe68>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4924      	ldr	r1, [pc, #144]	; (8002530 <main+0xe70>)
 800249e:	4618      	mov	r0, r3
 80024a0:	f7fe f91e 	bl	80006e0 <__aeabi_fcmpgt>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d046      	beq.n	8002538 <main+0xe78>
 80024aa:	4b1f      	ldr	r3, [pc, #124]	; (8002528 <main+0xe68>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4921      	ldr	r1, [pc, #132]	; (8002534 <main+0xe74>)
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7fe f901 	bl	80006b8 <__aeabi_fcmple>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d03d      	beq.n	8002538 <main+0xe78>
		HAL_GPIO_WritePin(LED_1V_GPIO_Port, LED_1V_Pin, 1);
 80024bc:	2201      	movs	r2, #1
 80024be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024c2:	4816      	ldr	r0, [pc, #88]	; (800251c <main+0xe5c>)
 80024c4:	f001 fc44 	bl	8003d50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_2V_GPIO_Port, LED_2V_Pin, 1);
 80024c8:	2201      	movs	r2, #1
 80024ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024ce:	4814      	ldr	r0, [pc, #80]	; (8002520 <main+0xe60>)
 80024d0:	f001 fc3e 	bl	8003d50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_1A_GPIO_Port, LED_1A_Pin, 1);
 80024d4:	2201      	movs	r2, #1
 80024d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80024da:	4811      	ldr	r0, [pc, #68]	; (8002520 <main+0xe60>)
 80024dc:	f001 fc38 	bl	8003d50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_2A_GPIO_Port, LED_2A_Pin, 0);
 80024e0:	2200      	movs	r2, #0
 80024e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024e6:	480e      	ldr	r0, [pc, #56]	; (8002520 <main+0xe60>)
 80024e8:	f001 fc32 	bl	8003d50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_1R_GPIO_Port, LED_1R_Pin, 0);
 80024ec:	2200      	movs	r2, #0
 80024ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024f2:	480b      	ldr	r0, [pc, #44]	; (8002520 <main+0xe60>)
 80024f4:	f001 fc2c 	bl	8003d50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_2R_GPIO_Port, LED_2R_Pin, 0);
 80024f8:	2200      	movs	r2, #0
 80024fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024fe:	4808      	ldr	r0, [pc, #32]	; (8002520 <main+0xe60>)
 8002500:	f001 fc26 	bl	8003d50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 8002504:	2201      	movs	r2, #1
 8002506:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800250a:	4805      	ldr	r0, [pc, #20]	; (8002520 <main+0xe60>)
 800250c:	f001 fc20 	bl	8003d50 <HAL_GPIO_WritePin>
 8002510:	e0eb      	b.n	80026ea <main+0x102a>
 8002512:	bf00      	nop
 8002514:	200000ec 	.word	0x200000ec
 8002518:	42c80000 	.word	0x42c80000
 800251c:	40010800 	.word	0x40010800
 8002520:	40010c00 	.word	0x40010c00
 8002524:	2000005c 	.word	0x2000005c
 8002528:	200000f0 	.word	0x200000f0
 800252c:	469c4000 	.word	0x469c4000
 8002530:	46c35000 	.word	0x46c35000
 8002534:	46ea6000 	.word	0x46ea6000
		} else if (light > 30000 && light <= 35000){
 8002538:	4b6e      	ldr	r3, [pc, #440]	; (80026f4 <main+0x1034>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	496e      	ldr	r1, [pc, #440]	; (80026f8 <main+0x1038>)
 800253e:	4618      	mov	r0, r3
 8002540:	f7fe f8ce 	bl	80006e0 <__aeabi_fcmpgt>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d033      	beq.n	80025b2 <main+0xef2>
 800254a:	4b6a      	ldr	r3, [pc, #424]	; (80026f4 <main+0x1034>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	496b      	ldr	r1, [pc, #428]	; (80026fc <main+0x103c>)
 8002550:	4618      	mov	r0, r3
 8002552:	f7fe f8b1 	bl	80006b8 <__aeabi_fcmple>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d02a      	beq.n	80025b2 <main+0xef2>
		HAL_GPIO_WritePin(LED_1V_GPIO_Port, LED_1V_Pin, 1);
 800255c:	2201      	movs	r2, #1
 800255e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002562:	4867      	ldr	r0, [pc, #412]	; (8002700 <main+0x1040>)
 8002564:	f001 fbf4 	bl	8003d50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_2V_GPIO_Port, LED_2V_Pin, 1);
 8002568:	2201      	movs	r2, #1
 800256a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800256e:	4865      	ldr	r0, [pc, #404]	; (8002704 <main+0x1044>)
 8002570:	f001 fbee 	bl	8003d50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_1A_GPIO_Port, LED_1A_Pin, 1);
 8002574:	2201      	movs	r2, #1
 8002576:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800257a:	4862      	ldr	r0, [pc, #392]	; (8002704 <main+0x1044>)
 800257c:	f001 fbe8 	bl	8003d50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_2A_GPIO_Port, LED_2A_Pin, 1);
 8002580:	2201      	movs	r2, #1
 8002582:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002586:	485f      	ldr	r0, [pc, #380]	; (8002704 <main+0x1044>)
 8002588:	f001 fbe2 	bl	8003d50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_1R_GPIO_Port, LED_1R_Pin, 0);
 800258c:	2200      	movs	r2, #0
 800258e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002592:	485c      	ldr	r0, [pc, #368]	; (8002704 <main+0x1044>)
 8002594:	f001 fbdc 	bl	8003d50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_2R_GPIO_Port, LED_2R_Pin, 0);
 8002598:	2200      	movs	r2, #0
 800259a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800259e:	4859      	ldr	r0, [pc, #356]	; (8002704 <main+0x1044>)
 80025a0:	f001 fbd6 	bl	8003d50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 80025a4:	2201      	movs	r2, #1
 80025a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80025aa:	4856      	ldr	r0, [pc, #344]	; (8002704 <main+0x1044>)
 80025ac:	f001 fbd0 	bl	8003d50 <HAL_GPIO_WritePin>
 80025b0:	e09b      	b.n	80026ea <main+0x102a>
		} else if (light > 35000 && light <= 40000){
 80025b2:	4b50      	ldr	r3, [pc, #320]	; (80026f4 <main+0x1034>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4951      	ldr	r1, [pc, #324]	; (80026fc <main+0x103c>)
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7fe f891 	bl	80006e0 <__aeabi_fcmpgt>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d033      	beq.n	800262c <main+0xf6c>
 80025c4:	4b4b      	ldr	r3, [pc, #300]	; (80026f4 <main+0x1034>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	494f      	ldr	r1, [pc, #316]	; (8002708 <main+0x1048>)
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7fe f874 	bl	80006b8 <__aeabi_fcmple>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d02a      	beq.n	800262c <main+0xf6c>
		HAL_GPIO_WritePin(LED_1V_GPIO_Port, LED_1V_Pin, 1);
 80025d6:	2201      	movs	r2, #1
 80025d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025dc:	4848      	ldr	r0, [pc, #288]	; (8002700 <main+0x1040>)
 80025de:	f001 fbb7 	bl	8003d50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_2V_GPIO_Port, LED_2V_Pin, 1);
 80025e2:	2201      	movs	r2, #1
 80025e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025e8:	4846      	ldr	r0, [pc, #280]	; (8002704 <main+0x1044>)
 80025ea:	f001 fbb1 	bl	8003d50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_1A_GPIO_Port, LED_1A_Pin, 1);
 80025ee:	2201      	movs	r2, #1
 80025f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80025f4:	4843      	ldr	r0, [pc, #268]	; (8002704 <main+0x1044>)
 80025f6:	f001 fbab 	bl	8003d50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_2A_GPIO_Port, LED_2A_Pin, 1);
 80025fa:	2201      	movs	r2, #1
 80025fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002600:	4840      	ldr	r0, [pc, #256]	; (8002704 <main+0x1044>)
 8002602:	f001 fba5 	bl	8003d50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_1R_GPIO_Port, LED_1R_Pin, 1);
 8002606:	2201      	movs	r2, #1
 8002608:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800260c:	483d      	ldr	r0, [pc, #244]	; (8002704 <main+0x1044>)
 800260e:	f001 fb9f 	bl	8003d50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_2R_GPIO_Port, LED_2R_Pin, 0);
 8002612:	2200      	movs	r2, #0
 8002614:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002618:	483a      	ldr	r0, [pc, #232]	; (8002704 <main+0x1044>)
 800261a:	f001 fb99 	bl	8003d50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 800261e:	2201      	movs	r2, #1
 8002620:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002624:	4837      	ldr	r0, [pc, #220]	; (8002704 <main+0x1044>)
 8002626:	f001 fb93 	bl	8003d50 <HAL_GPIO_WritePin>
 800262a:	e05e      	b.n	80026ea <main+0x102a>
		} else if (light > 40000){
 800262c:	4b31      	ldr	r3, [pc, #196]	; (80026f4 <main+0x1034>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4935      	ldr	r1, [pc, #212]	; (8002708 <main+0x1048>)
 8002632:	4618      	mov	r0, r3
 8002634:	f7fe f854 	bl	80006e0 <__aeabi_fcmpgt>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d02a      	beq.n	8002694 <main+0xfd4>
		HAL_GPIO_WritePin(LED_1V_GPIO_Port, LED_1V_Pin, 1);
 800263e:	2201      	movs	r2, #1
 8002640:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002644:	482e      	ldr	r0, [pc, #184]	; (8002700 <main+0x1040>)
 8002646:	f001 fb83 	bl	8003d50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_2V_GPIO_Port, LED_2V_Pin, 1);
 800264a:	2201      	movs	r2, #1
 800264c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002650:	482c      	ldr	r0, [pc, #176]	; (8002704 <main+0x1044>)
 8002652:	f001 fb7d 	bl	8003d50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_1A_GPIO_Port, LED_1A_Pin, 1);
 8002656:	2201      	movs	r2, #1
 8002658:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800265c:	4829      	ldr	r0, [pc, #164]	; (8002704 <main+0x1044>)
 800265e:	f001 fb77 	bl	8003d50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_2A_GPIO_Port, LED_2A_Pin, 1);
 8002662:	2201      	movs	r2, #1
 8002664:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002668:	4826      	ldr	r0, [pc, #152]	; (8002704 <main+0x1044>)
 800266a:	f001 fb71 	bl	8003d50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_1R_GPIO_Port, LED_1R_Pin, 1);
 800266e:	2201      	movs	r2, #1
 8002670:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002674:	4823      	ldr	r0, [pc, #140]	; (8002704 <main+0x1044>)
 8002676:	f001 fb6b 	bl	8003d50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_2R_GPIO_Port, LED_2R_Pin, 1);
 800267a:	2201      	movs	r2, #1
 800267c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002680:	4820      	ldr	r0, [pc, #128]	; (8002704 <main+0x1044>)
 8002682:	f001 fb65 	bl	8003d50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 8002686:	2201      	movs	r2, #1
 8002688:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800268c:	481d      	ldr	r0, [pc, #116]	; (8002704 <main+0x1044>)
 800268e:	f001 fb5f 	bl	8003d50 <HAL_GPIO_WritePin>
			break;
 8002692:	e02c      	b.n	80026ee <main+0x102e>
		HAL_GPIO_WritePin(LED_1V_GPIO_Port, LED_1V_Pin, 0);
 8002694:	2200      	movs	r2, #0
 8002696:	f44f 7180 	mov.w	r1, #256	; 0x100
 800269a:	4819      	ldr	r0, [pc, #100]	; (8002700 <main+0x1040>)
 800269c:	f001 fb58 	bl	8003d50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_2V_GPIO_Port, LED_2V_Pin, 0);
 80026a0:	2200      	movs	r2, #0
 80026a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026a6:	4817      	ldr	r0, [pc, #92]	; (8002704 <main+0x1044>)
 80026a8:	f001 fb52 	bl	8003d50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_1A_GPIO_Port, LED_1A_Pin, 0);
 80026ac:	2200      	movs	r2, #0
 80026ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80026b2:	4814      	ldr	r0, [pc, #80]	; (8002704 <main+0x1044>)
 80026b4:	f001 fb4c 	bl	8003d50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_2A_GPIO_Port, LED_2A_Pin, 0);
 80026b8:	2200      	movs	r2, #0
 80026ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026be:	4811      	ldr	r0, [pc, #68]	; (8002704 <main+0x1044>)
 80026c0:	f001 fb46 	bl	8003d50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_1R_GPIO_Port, LED_1R_Pin, 0);
 80026c4:	2200      	movs	r2, #0
 80026c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80026ca:	480e      	ldr	r0, [pc, #56]	; (8002704 <main+0x1044>)
 80026cc:	f001 fb40 	bl	8003d50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_2R_GPIO_Port, LED_2R_Pin, 0);
 80026d0:	2200      	movs	r2, #0
 80026d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80026d6:	480b      	ldr	r0, [pc, #44]	; (8002704 <main+0x1044>)
 80026d8:	f001 fb3a 	bl	8003d50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 80026dc:	2200      	movs	r2, #0
 80026de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80026e2:	4808      	ldr	r0, [pc, #32]	; (8002704 <main+0x1044>)
 80026e4:	f001 fb34 	bl	8003d50 <HAL_GPIO_WritePin>
			break;
 80026e8:	e001      	b.n	80026ee <main+0x102e>
 80026ea:	e000      	b.n	80026ee <main+0x102e>

	default:
		break;
 80026ec:	bf00      	nop
	switch (STATE) {
 80026ee:	f7ff b812 	b.w	8001716 <main+0x56>
 80026f2:	bf00      	nop
 80026f4:	200000f0 	.word	0x200000f0
 80026f8:	46ea6000 	.word	0x46ea6000
 80026fc:	4708b800 	.word	0x4708b800
 8002700:	40010800 	.word	0x40010800
 8002704:	40010c00 	.word	0x40010c00
 8002708:	471c4000 	.word	0x471c4000

0800270c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b094      	sub	sp, #80	; 0x50
 8002710:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002712:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002716:	2228      	movs	r2, #40	; 0x28
 8002718:	2100      	movs	r1, #0
 800271a:	4618      	mov	r0, r3
 800271c:	f004 fdda 	bl	80072d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002720:	f107 0314 	add.w	r3, r7, #20
 8002724:	2200      	movs	r2, #0
 8002726:	601a      	str	r2, [r3, #0]
 8002728:	605a      	str	r2, [r3, #4]
 800272a:	609a      	str	r2, [r3, #8]
 800272c:	60da      	str	r2, [r3, #12]
 800272e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002730:	1d3b      	adds	r3, r7, #4
 8002732:	2200      	movs	r2, #0
 8002734:	601a      	str	r2, [r3, #0]
 8002736:	605a      	str	r2, [r3, #4]
 8002738:	609a      	str	r2, [r3, #8]
 800273a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800273c:	2302      	movs	r3, #2
 800273e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002740:	2301      	movs	r3, #1
 8002742:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002744:	2310      	movs	r3, #16
 8002746:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002748:	2300      	movs	r3, #0
 800274a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800274c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002750:	4618      	mov	r0, r3
 8002752:	f004 f80b 	bl	800676c <HAL_RCC_OscConfig>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <SystemClock_Config+0x54>
  {
    Error_Handler();
 800275c:	f000 f924 	bl	80029a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002760:	230f      	movs	r3, #15
 8002762:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002764:	2300      	movs	r3, #0
 8002766:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002768:	2300      	movs	r3, #0
 800276a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800276c:	2300      	movs	r3, #0
 800276e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002770:	2300      	movs	r3, #0
 8002772:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002774:	f107 0314 	add.w	r3, r7, #20
 8002778:	2100      	movs	r1, #0
 800277a:	4618      	mov	r0, r3
 800277c:	f004 fa78 	bl	8006c70 <HAL_RCC_ClockConfig>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8002786:	f000 f90f 	bl	80029a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800278a:	2302      	movs	r3, #2
 800278c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800278e:	2300      	movs	r3, #0
 8002790:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002792:	1d3b      	adds	r3, r7, #4
 8002794:	4618      	mov	r0, r3
 8002796:	f004 fc03 	bl	8006fa0 <HAL_RCCEx_PeriphCLKConfig>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80027a0:	f000 f902 	bl	80029a8 <Error_Handler>
  }
}
 80027a4:	bf00      	nop
 80027a6:	3750      	adds	r7, #80	; 0x50
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80027b2:	1d3b      	adds	r3, r7, #4
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	605a      	str	r2, [r3, #4]
 80027ba:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80027bc:	4b18      	ldr	r3, [pc, #96]	; (8002820 <MX_ADC1_Init+0x74>)
 80027be:	4a19      	ldr	r2, [pc, #100]	; (8002824 <MX_ADC1_Init+0x78>)
 80027c0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80027c2:	4b17      	ldr	r3, [pc, #92]	; (8002820 <MX_ADC1_Init+0x74>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80027c8:	4b15      	ldr	r3, [pc, #84]	; (8002820 <MX_ADC1_Init+0x74>)
 80027ca:	2201      	movs	r2, #1
 80027cc:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80027ce:	4b14      	ldr	r3, [pc, #80]	; (8002820 <MX_ADC1_Init+0x74>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80027d4:	4b12      	ldr	r3, [pc, #72]	; (8002820 <MX_ADC1_Init+0x74>)
 80027d6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80027da:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80027dc:	4b10      	ldr	r3, [pc, #64]	; (8002820 <MX_ADC1_Init+0x74>)
 80027de:	2200      	movs	r2, #0
 80027e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80027e2:	4b0f      	ldr	r3, [pc, #60]	; (8002820 <MX_ADC1_Init+0x74>)
 80027e4:	2201      	movs	r2, #1
 80027e6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80027e8:	480d      	ldr	r0, [pc, #52]	; (8002820 <MX_ADC1_Init+0x74>)
 80027ea:	f000 fa93 	bl	8002d14 <HAL_ADC_Init>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80027f4:	f000 f8d8 	bl	80029a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80027f8:	2300      	movs	r3, #0
 80027fa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80027fc:	2301      	movs	r3, #1
 80027fe:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002800:	2300      	movs	r3, #0
 8002802:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002804:	1d3b      	adds	r3, r7, #4
 8002806:	4619      	mov	r1, r3
 8002808:	4805      	ldr	r0, [pc, #20]	; (8002820 <MX_ADC1_Init+0x74>)
 800280a:	f000 fdf1 	bl	80033f0 <HAL_ADC_ConfigChannel>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d001      	beq.n	8002818 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8002814:	f000 f8c8 	bl	80029a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002818:	bf00      	nop
 800281a:	3710      	adds	r7, #16
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	2000005c 	.word	0x2000005c
 8002824:	40012400 	.word	0x40012400

08002828 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800282c:	4b12      	ldr	r3, [pc, #72]	; (8002878 <MX_I2C1_Init+0x50>)
 800282e:	4a13      	ldr	r2, [pc, #76]	; (800287c <MX_I2C1_Init+0x54>)
 8002830:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002832:	4b11      	ldr	r3, [pc, #68]	; (8002878 <MX_I2C1_Init+0x50>)
 8002834:	4a12      	ldr	r2, [pc, #72]	; (8002880 <MX_I2C1_Init+0x58>)
 8002836:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002838:	4b0f      	ldr	r3, [pc, #60]	; (8002878 <MX_I2C1_Init+0x50>)
 800283a:	2200      	movs	r2, #0
 800283c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800283e:	4b0e      	ldr	r3, [pc, #56]	; (8002878 <MX_I2C1_Init+0x50>)
 8002840:	2200      	movs	r2, #0
 8002842:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002844:	4b0c      	ldr	r3, [pc, #48]	; (8002878 <MX_I2C1_Init+0x50>)
 8002846:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800284a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800284c:	4b0a      	ldr	r3, [pc, #40]	; (8002878 <MX_I2C1_Init+0x50>)
 800284e:	2200      	movs	r2, #0
 8002850:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002852:	4b09      	ldr	r3, [pc, #36]	; (8002878 <MX_I2C1_Init+0x50>)
 8002854:	2200      	movs	r2, #0
 8002856:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002858:	4b07      	ldr	r3, [pc, #28]	; (8002878 <MX_I2C1_Init+0x50>)
 800285a:	2200      	movs	r2, #0
 800285c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800285e:	4b06      	ldr	r3, [pc, #24]	; (8002878 <MX_I2C1_Init+0x50>)
 8002860:	2200      	movs	r2, #0
 8002862:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002864:	4804      	ldr	r0, [pc, #16]	; (8002878 <MX_I2C1_Init+0x50>)
 8002866:	f001 faad 	bl	8003dc4 <HAL_I2C_Init>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002870:	f000 f89a 	bl	80029a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002874:	bf00      	nop
 8002876:	bd80      	pop	{r7, pc}
 8002878:	2000008c 	.word	0x2000008c
 800287c:	40005400 	.word	0x40005400
 8002880:	000186a0 	.word	0x000186a0

08002884 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b088      	sub	sp, #32
 8002888:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800288a:	f107 0310 	add.w	r3, r7, #16
 800288e:	2200      	movs	r2, #0
 8002890:	601a      	str	r2, [r3, #0]
 8002892:	605a      	str	r2, [r3, #4]
 8002894:	609a      	str	r2, [r3, #8]
 8002896:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002898:	4b3f      	ldr	r3, [pc, #252]	; (8002998 <MX_GPIO_Init+0x114>)
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	4a3e      	ldr	r2, [pc, #248]	; (8002998 <MX_GPIO_Init+0x114>)
 800289e:	f043 0310 	orr.w	r3, r3, #16
 80028a2:	6193      	str	r3, [r2, #24]
 80028a4:	4b3c      	ldr	r3, [pc, #240]	; (8002998 <MX_GPIO_Init+0x114>)
 80028a6:	699b      	ldr	r3, [r3, #24]
 80028a8:	f003 0310 	and.w	r3, r3, #16
 80028ac:	60fb      	str	r3, [r7, #12]
 80028ae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028b0:	4b39      	ldr	r3, [pc, #228]	; (8002998 <MX_GPIO_Init+0x114>)
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	4a38      	ldr	r2, [pc, #224]	; (8002998 <MX_GPIO_Init+0x114>)
 80028b6:	f043 0320 	orr.w	r3, r3, #32
 80028ba:	6193      	str	r3, [r2, #24]
 80028bc:	4b36      	ldr	r3, [pc, #216]	; (8002998 <MX_GPIO_Init+0x114>)
 80028be:	699b      	ldr	r3, [r3, #24]
 80028c0:	f003 0320 	and.w	r3, r3, #32
 80028c4:	60bb      	str	r3, [r7, #8]
 80028c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028c8:	4b33      	ldr	r3, [pc, #204]	; (8002998 <MX_GPIO_Init+0x114>)
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	4a32      	ldr	r2, [pc, #200]	; (8002998 <MX_GPIO_Init+0x114>)
 80028ce:	f043 0304 	orr.w	r3, r3, #4
 80028d2:	6193      	str	r3, [r2, #24]
 80028d4:	4b30      	ldr	r3, [pc, #192]	; (8002998 <MX_GPIO_Init+0x114>)
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	f003 0304 	and.w	r3, r3, #4
 80028dc:	607b      	str	r3, [r7, #4]
 80028de:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028e0:	4b2d      	ldr	r3, [pc, #180]	; (8002998 <MX_GPIO_Init+0x114>)
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	4a2c      	ldr	r2, [pc, #176]	; (8002998 <MX_GPIO_Init+0x114>)
 80028e6:	f043 0308 	orr.w	r3, r3, #8
 80028ea:	6193      	str	r3, [r2, #24]
 80028ec:	4b2a      	ldr	r3, [pc, #168]	; (8002998 <MX_GPIO_Init+0x114>)
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	f003 0308 	and.w	r3, r3, #8
 80028f4:	603b      	str	r3, [r7, #0]
 80028f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BUZZER_Pin|LED_2R_Pin|LED_1R_Pin|LED_2A_Pin
 80028f8:	2200      	movs	r2, #0
 80028fa:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 80028fe:	4827      	ldr	r0, [pc, #156]	; (800299c <MX_GPIO_Init+0x118>)
 8002900:	f001 fa26 	bl	8003d50 <HAL_GPIO_WritePin>
                          |LED_1A_Pin|LED_2V_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_1V_GPIO_Port, LED_1V_Pin, GPIO_PIN_RESET);
 8002904:	2200      	movs	r2, #0
 8002906:	f44f 7180 	mov.w	r1, #256	; 0x100
 800290a:	4825      	ldr	r0, [pc, #148]	; (80029a0 <MX_GPIO_Init+0x11c>)
 800290c:	f001 fa20 	bl	8003d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUZZER_Pin LED_2R_Pin LED_1R_Pin LED_2A_Pin
                           LED_1A_Pin LED_2V_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin|LED_2R_Pin|LED_1R_Pin|LED_2A_Pin
 8002910:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8002914:	613b      	str	r3, [r7, #16]
                          |LED_1A_Pin|LED_2V_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002916:	2301      	movs	r3, #1
 8002918:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291a:	2300      	movs	r3, #0
 800291c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800291e:	2302      	movs	r3, #2
 8002920:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002922:	f107 0310 	add.w	r3, r7, #16
 8002926:	4619      	mov	r1, r3
 8002928:	481c      	ldr	r0, [pc, #112]	; (800299c <MX_GPIO_Init+0x118>)
 800292a:	f001 f88d 	bl	8003a48 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_1V_Pin */
  GPIO_InitStruct.Pin = LED_1V_Pin;
 800292e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002932:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002934:	2301      	movs	r3, #1
 8002936:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002938:	2300      	movs	r3, #0
 800293a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800293c:	2302      	movs	r3, #2
 800293e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_1V_GPIO_Port, &GPIO_InitStruct);
 8002940:	f107 0310 	add.w	r3, r7, #16
 8002944:	4619      	mov	r1, r3
 8002946:	4816      	ldr	r0, [pc, #88]	; (80029a0 <MX_GPIO_Init+0x11c>)
 8002948:	f001 f87e 	bl	8003a48 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_LUZ_Pin BTN_HUM_Pin BTN_TEMP_Pin */
  GPIO_InitStruct.Pin = BTN_LUZ_Pin|BTN_HUM_Pin|BTN_TEMP_Pin;
 800294c:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8002950:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002952:	2300      	movs	r3, #0
 8002954:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002956:	2302      	movs	r3, #2
 8002958:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800295a:	f107 0310 	add.w	r3, r7, #16
 800295e:	4619      	mov	r1, r3
 8002960:	480f      	ldr	r0, [pc, #60]	; (80029a0 <MX_GPIO_Init+0x11c>)
 8002962:	f001 f871 	bl	8003a48 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_ONOFF_Pin */
  GPIO_InitStruct.Pin = BTN_ONOFF_Pin;
 8002966:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800296a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800296c:	4b0d      	ldr	r3, [pc, #52]	; (80029a4 <MX_GPIO_Init+0x120>)
 800296e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002970:	2302      	movs	r3, #2
 8002972:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN_ONOFF_GPIO_Port, &GPIO_InitStruct);
 8002974:	f107 0310 	add.w	r3, r7, #16
 8002978:	4619      	mov	r1, r3
 800297a:	4809      	ldr	r0, [pc, #36]	; (80029a0 <MX_GPIO_Init+0x11c>)
 800297c:	f001 f864 	bl	8003a48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002980:	2200      	movs	r2, #0
 8002982:	2100      	movs	r1, #0
 8002984:	2028      	movs	r0, #40	; 0x28
 8002986:	f000 ffa6 	bl	80038d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800298a:	2028      	movs	r0, #40	; 0x28
 800298c:	f000 ffbf 	bl	800390e <HAL_NVIC_EnableIRQ>

}
 8002990:	bf00      	nop
 8002992:	3720      	adds	r7, #32
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	40021000 	.word	0x40021000
 800299c:	40010c00 	.word	0x40010c00
 80029a0:	40010800 	.word	0x40010800
 80029a4:	10110000 	.word	0x10110000

080029a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029ac:	b672      	cpsid	i
}
 80029ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029b0:	e7fe      	b.n	80029b0 <Error_Handler+0x8>
	...

080029b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80029ba:	4b15      	ldr	r3, [pc, #84]	; (8002a10 <HAL_MspInit+0x5c>)
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	4a14      	ldr	r2, [pc, #80]	; (8002a10 <HAL_MspInit+0x5c>)
 80029c0:	f043 0301 	orr.w	r3, r3, #1
 80029c4:	6193      	str	r3, [r2, #24]
 80029c6:	4b12      	ldr	r3, [pc, #72]	; (8002a10 <HAL_MspInit+0x5c>)
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	60bb      	str	r3, [r7, #8]
 80029d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029d2:	4b0f      	ldr	r3, [pc, #60]	; (8002a10 <HAL_MspInit+0x5c>)
 80029d4:	69db      	ldr	r3, [r3, #28]
 80029d6:	4a0e      	ldr	r2, [pc, #56]	; (8002a10 <HAL_MspInit+0x5c>)
 80029d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029dc:	61d3      	str	r3, [r2, #28]
 80029de:	4b0c      	ldr	r3, [pc, #48]	; (8002a10 <HAL_MspInit+0x5c>)
 80029e0:	69db      	ldr	r3, [r3, #28]
 80029e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e6:	607b      	str	r3, [r7, #4]
 80029e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80029ea:	4b0a      	ldr	r3, [pc, #40]	; (8002a14 <HAL_MspInit+0x60>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	60fb      	str	r3, [r7, #12]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80029f6:	60fb      	str	r3, [r7, #12]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	4a04      	ldr	r2, [pc, #16]	; (8002a14 <HAL_MspInit+0x60>)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a06:	bf00      	nop
 8002a08:	3714      	adds	r7, #20
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bc80      	pop	{r7}
 8002a0e:	4770      	bx	lr
 8002a10:	40021000 	.word	0x40021000
 8002a14:	40010000 	.word	0x40010000

08002a18 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b088      	sub	sp, #32
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a20:	f107 0310 	add.w	r3, r7, #16
 8002a24:	2200      	movs	r2, #0
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	605a      	str	r2, [r3, #4]
 8002a2a:	609a      	str	r2, [r3, #8]
 8002a2c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a18      	ldr	r2, [pc, #96]	; (8002a94 <HAL_ADC_MspInit+0x7c>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d129      	bne.n	8002a8c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002a38:	4b17      	ldr	r3, [pc, #92]	; (8002a98 <HAL_ADC_MspInit+0x80>)
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	4a16      	ldr	r2, [pc, #88]	; (8002a98 <HAL_ADC_MspInit+0x80>)
 8002a3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a42:	6193      	str	r3, [r2, #24]
 8002a44:	4b14      	ldr	r3, [pc, #80]	; (8002a98 <HAL_ADC_MspInit+0x80>)
 8002a46:	699b      	ldr	r3, [r3, #24]
 8002a48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a4c:	60fb      	str	r3, [r7, #12]
 8002a4e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a50:	4b11      	ldr	r3, [pc, #68]	; (8002a98 <HAL_ADC_MspInit+0x80>)
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	4a10      	ldr	r2, [pc, #64]	; (8002a98 <HAL_ADC_MspInit+0x80>)
 8002a56:	f043 0304 	orr.w	r3, r3, #4
 8002a5a:	6193      	str	r3, [r2, #24]
 8002a5c:	4b0e      	ldr	r3, [pc, #56]	; (8002a98 <HAL_ADC_MspInit+0x80>)
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	f003 0304 	and.w	r3, r3, #4
 8002a64:	60bb      	str	r3, [r7, #8]
 8002a66:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = LUZ_Pin;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(LUZ_GPIO_Port, &GPIO_InitStruct);
 8002a70:	f107 0310 	add.w	r3, r7, #16
 8002a74:	4619      	mov	r1, r3
 8002a76:	4809      	ldr	r0, [pc, #36]	; (8002a9c <HAL_ADC_MspInit+0x84>)
 8002a78:	f000 ffe6 	bl	8003a48 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	2100      	movs	r1, #0
 8002a80:	2012      	movs	r0, #18
 8002a82:	f000 ff28 	bl	80038d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002a86:	2012      	movs	r0, #18
 8002a88:	f000 ff41 	bl	800390e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002a8c:	bf00      	nop
 8002a8e:	3720      	adds	r7, #32
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	40012400 	.word	0x40012400
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	40010800 	.word	0x40010800

08002aa0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b088      	sub	sp, #32
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa8:	f107 0310 	add.w	r3, r7, #16
 8002aac:	2200      	movs	r2, #0
 8002aae:	601a      	str	r2, [r3, #0]
 8002ab0:	605a      	str	r2, [r3, #4]
 8002ab2:	609a      	str	r2, [r3, #8]
 8002ab4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a1d      	ldr	r2, [pc, #116]	; (8002b30 <HAL_I2C_MspInit+0x90>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d133      	bne.n	8002b28 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ac0:	4b1c      	ldr	r3, [pc, #112]	; (8002b34 <HAL_I2C_MspInit+0x94>)
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	4a1b      	ldr	r2, [pc, #108]	; (8002b34 <HAL_I2C_MspInit+0x94>)
 8002ac6:	f043 0308 	orr.w	r3, r3, #8
 8002aca:	6193      	str	r3, [r2, #24]
 8002acc:	4b19      	ldr	r3, [pc, #100]	; (8002b34 <HAL_I2C_MspInit+0x94>)
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	f003 0308 	and.w	r3, r3, #8
 8002ad4:	60fb      	str	r3, [r7, #12]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002ad8:	23c0      	movs	r3, #192	; 0xc0
 8002ada:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002adc:	2312      	movs	r3, #18
 8002ade:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ae4:	f107 0310 	add.w	r3, r7, #16
 8002ae8:	4619      	mov	r1, r3
 8002aea:	4813      	ldr	r0, [pc, #76]	; (8002b38 <HAL_I2C_MspInit+0x98>)
 8002aec:	f000 ffac 	bl	8003a48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002af0:	4b10      	ldr	r3, [pc, #64]	; (8002b34 <HAL_I2C_MspInit+0x94>)
 8002af2:	69db      	ldr	r3, [r3, #28]
 8002af4:	4a0f      	ldr	r2, [pc, #60]	; (8002b34 <HAL_I2C_MspInit+0x94>)
 8002af6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002afa:	61d3      	str	r3, [r2, #28]
 8002afc:	4b0d      	ldr	r3, [pc, #52]	; (8002b34 <HAL_I2C_MspInit+0x94>)
 8002afe:	69db      	ldr	r3, [r3, #28]
 8002b00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b04:	60bb      	str	r3, [r7, #8]
 8002b06:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002b08:	2200      	movs	r2, #0
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	201f      	movs	r0, #31
 8002b0e:	f000 fee2 	bl	80038d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002b12:	201f      	movs	r0, #31
 8002b14:	f000 fefb 	bl	800390e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002b18:	2200      	movs	r2, #0
 8002b1a:	2100      	movs	r1, #0
 8002b1c:	2020      	movs	r0, #32
 8002b1e:	f000 feda 	bl	80038d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002b22:	2020      	movs	r0, #32
 8002b24:	f000 fef3 	bl	800390e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002b28:	bf00      	nop
 8002b2a:	3720      	adds	r7, #32
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	40005400 	.word	0x40005400
 8002b34:	40021000 	.word	0x40021000
 8002b38:	40010c00 	.word	0x40010c00

08002b3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b40:	e7fe      	b.n	8002b40 <NMI_Handler+0x4>

08002b42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b42:	b480      	push	{r7}
 8002b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b46:	e7fe      	b.n	8002b46 <HardFault_Handler+0x4>

08002b48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b4c:	e7fe      	b.n	8002b4c <MemManage_Handler+0x4>

08002b4e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b52:	e7fe      	b.n	8002b52 <BusFault_Handler+0x4>

08002b54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b58:	e7fe      	b.n	8002b58 <UsageFault_Handler+0x4>

08002b5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b5a:	b480      	push	{r7}
 8002b5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b5e:	bf00      	nop
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bc80      	pop	{r7}
 8002b64:	4770      	bx	lr

08002b66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b66:	b480      	push	{r7}
 8002b68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b6a:	bf00      	nop
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bc80      	pop	{r7}
 8002b70:	4770      	bx	lr

08002b72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b72:	b480      	push	{r7}
 8002b74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b76:	bf00      	nop
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bc80      	pop	{r7}
 8002b7c:	4770      	bx	lr

08002b7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b7e:	b580      	push	{r7, lr}
 8002b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b82:	f000 f8ab 	bl	8002cdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b86:	bf00      	nop
 8002b88:	bd80      	pop	{r7, pc}
	...

08002b8c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002b90:	4802      	ldr	r0, [pc, #8]	; (8002b9c <ADC1_2_IRQHandler+0x10>)
 8002b92:	f000 fb57 	bl	8003244 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002b96:	bf00      	nop
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	2000005c 	.word	0x2000005c

08002ba0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_LUZ_Pin);
 8002ba4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002ba8:	f001 f8ea 	bl	8003d80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002bac:	bf00      	nop
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002bb4:	4802      	ldr	r0, [pc, #8]	; (8002bc0 <I2C1_EV_IRQHandler+0x10>)
 8002bb6:	f001 fdab 	bl	8004710 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002bba:	bf00      	nop
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	2000008c 	.word	0x2000008c

08002bc4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002bc8:	4802      	ldr	r0, [pc, #8]	; (8002bd4 <I2C1_ER_IRQHandler+0x10>)
 8002bca:	f001 ff12 	bl	80049f2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002bce:	bf00      	nop
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	2000008c 	.word	0x2000008c

08002bd8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_HUM_Pin);
 8002bdc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002be0:	f001 f8ce 	bl	8003d80 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_TEMP_Pin);
 8002be4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002be8:	f001 f8ca 	bl	8003d80 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_ONOFF_Pin);
 8002bec:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002bf0:	f001 f8c6 	bl	8003d80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002bf4:	bf00      	nop
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bfc:	bf00      	nop
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bc80      	pop	{r7}
 8002c02:	4770      	bx	lr

08002c04 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c04:	480c      	ldr	r0, [pc, #48]	; (8002c38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c06:	490d      	ldr	r1, [pc, #52]	; (8002c3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c08:	4a0d      	ldr	r2, [pc, #52]	; (8002c40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c0c:	e002      	b.n	8002c14 <LoopCopyDataInit>

08002c0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c12:	3304      	adds	r3, #4

08002c14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c18:	d3f9      	bcc.n	8002c0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c1a:	4a0a      	ldr	r2, [pc, #40]	; (8002c44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c1c:	4c0a      	ldr	r4, [pc, #40]	; (8002c48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c20:	e001      	b.n	8002c26 <LoopFillZerobss>

08002c22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c24:	3204      	adds	r2, #4

08002c26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c28:	d3fb      	bcc.n	8002c22 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002c2a:	f7ff ffe5 	bl	8002bf8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c2e:	f004 fb2d 	bl	800728c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002c32:	f7fe fd45 	bl	80016c0 <main>
  bx lr
 8002c36:	4770      	bx	lr
  ldr r0, =_sdata
 8002c38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c3c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002c40:	08007344 	.word	0x08007344
  ldr r2, =_sbss
 8002c44:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002c48:	200000f8 	.word	0x200000f8

08002c4c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002c4c:	e7fe      	b.n	8002c4c <CAN1_RX1_IRQHandler>
	...

08002c50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c54:	4b08      	ldr	r3, [pc, #32]	; (8002c78 <HAL_Init+0x28>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a07      	ldr	r2, [pc, #28]	; (8002c78 <HAL_Init+0x28>)
 8002c5a:	f043 0310 	orr.w	r3, r3, #16
 8002c5e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c60:	2003      	movs	r0, #3
 8002c62:	f000 fe2d 	bl	80038c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c66:	200f      	movs	r0, #15
 8002c68:	f000 f808 	bl	8002c7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c6c:	f7ff fea2 	bl	80029b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	40022000 	.word	0x40022000

08002c7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c84:	4b12      	ldr	r3, [pc, #72]	; (8002cd0 <HAL_InitTick+0x54>)
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	4b12      	ldr	r3, [pc, #72]	; (8002cd4 <HAL_InitTick+0x58>)
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c92:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f000 fe45 	bl	800392a <HAL_SYSTICK_Config>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e00e      	b.n	8002cc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2b0f      	cmp	r3, #15
 8002cae:	d80a      	bhi.n	8002cc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	6879      	ldr	r1, [r7, #4]
 8002cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8002cb8:	f000 fe0d 	bl	80038d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cbc:	4a06      	ldr	r2, [pc, #24]	; (8002cd8 <HAL_InitTick+0x5c>)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	e000      	b.n	8002cc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3708      	adds	r7, #8
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	20000000 	.word	0x20000000
 8002cd4:	20000008 	.word	0x20000008
 8002cd8:	20000004 	.word	0x20000004

08002cdc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ce0:	4b05      	ldr	r3, [pc, #20]	; (8002cf8 <HAL_IncTick+0x1c>)
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	4b05      	ldr	r3, [pc, #20]	; (8002cfc <HAL_IncTick+0x20>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4413      	add	r3, r2
 8002cec:	4a03      	ldr	r2, [pc, #12]	; (8002cfc <HAL_IncTick+0x20>)
 8002cee:	6013      	str	r3, [r2, #0]
}
 8002cf0:	bf00      	nop
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bc80      	pop	{r7}
 8002cf6:	4770      	bx	lr
 8002cf8:	20000008 	.word	0x20000008
 8002cfc:	200000f4 	.word	0x200000f4

08002d00 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
  return uwTick;
 8002d04:	4b02      	ldr	r3, [pc, #8]	; (8002d10 <HAL_GetTick+0x10>)
 8002d06:	681b      	ldr	r3, [r3, #0]
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bc80      	pop	{r7}
 8002d0e:	4770      	bx	lr
 8002d10:	200000f4 	.word	0x200000f4

08002d14 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002d20:	2300      	movs	r3, #0
 8002d22:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002d24:	2300      	movs	r3, #0
 8002d26:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d101      	bne.n	8002d36 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e0be      	b.n	8002eb4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d109      	bne.n	8002d58 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f7ff fe60 	bl	8002a18 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f000 fc9b 	bl	8003694 <ADC_ConversionStop_Disable>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d66:	f003 0310 	and.w	r3, r3, #16
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f040 8099 	bne.w	8002ea2 <HAL_ADC_Init+0x18e>
 8002d70:	7dfb      	ldrb	r3, [r7, #23]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f040 8095 	bne.w	8002ea2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d80:	f023 0302 	bic.w	r3, r3, #2
 8002d84:	f043 0202 	orr.w	r2, r3, #2
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002d94:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	7b1b      	ldrb	r3, [r3, #12]
 8002d9a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002d9c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002d9e:	68ba      	ldr	r2, [r7, #8]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dac:	d003      	beq.n	8002db6 <HAL_ADC_Init+0xa2>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d102      	bne.n	8002dbc <HAL_ADC_Init+0xa8>
 8002db6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002dba:	e000      	b.n	8002dbe <HAL_ADC_Init+0xaa>
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	7d1b      	ldrb	r3, [r3, #20]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d119      	bne.n	8002e00 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	7b1b      	ldrb	r3, [r3, #12]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d109      	bne.n	8002de8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	035a      	lsls	r2, r3, #13
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002de4:	613b      	str	r3, [r7, #16]
 8002de6:	e00b      	b.n	8002e00 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dec:	f043 0220 	orr.w	r2, r3, #32
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df8:	f043 0201 	orr.w	r2, r3, #1
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	693a      	ldr	r2, [r7, #16]
 8002e10:	430a      	orrs	r2, r1
 8002e12:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	689a      	ldr	r2, [r3, #8]
 8002e1a:	4b28      	ldr	r3, [pc, #160]	; (8002ebc <HAL_ADC_Init+0x1a8>)
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	6812      	ldr	r2, [r2, #0]
 8002e22:	68b9      	ldr	r1, [r7, #8]
 8002e24:	430b      	orrs	r3, r1
 8002e26:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e30:	d003      	beq.n	8002e3a <HAL_ADC_Init+0x126>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d104      	bne.n	8002e44 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	051b      	lsls	r3, r3, #20
 8002e42:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	430a      	orrs	r2, r1
 8002e56:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	689a      	ldr	r2, [r3, #8]
 8002e5e:	4b18      	ldr	r3, [pc, #96]	; (8002ec0 <HAL_ADC_Init+0x1ac>)
 8002e60:	4013      	ands	r3, r2
 8002e62:	68ba      	ldr	r2, [r7, #8]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d10b      	bne.n	8002e80 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e72:	f023 0303 	bic.w	r3, r3, #3
 8002e76:	f043 0201 	orr.w	r2, r3, #1
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002e7e:	e018      	b.n	8002eb2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e84:	f023 0312 	bic.w	r3, r3, #18
 8002e88:	f043 0210 	orr.w	r2, r3, #16
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e94:	f043 0201 	orr.w	r2, r3, #1
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002ea0:	e007      	b.n	8002eb2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea6:	f043 0210 	orr.w	r2, r3, #16
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002eb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3718      	adds	r7, #24
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	ffe1f7fd 	.word	0xffe1f7fd
 8002ec0:	ff1f0efe 	.word	0xff1f0efe

08002ec4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d101      	bne.n	8002ede <HAL_ADC_Start+0x1a>
 8002eda:	2302      	movs	r3, #2
 8002edc:	e098      	b.n	8003010 <HAL_ADC_Start+0x14c>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 fb7a 	bl	80035e0 <ADC_Enable>
 8002eec:	4603      	mov	r3, r0
 8002eee:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002ef0:	7bfb      	ldrb	r3, [r7, #15]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	f040 8087 	bne.w	8003006 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002efc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f00:	f023 0301 	bic.w	r3, r3, #1
 8002f04:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a41      	ldr	r2, [pc, #260]	; (8003018 <HAL_ADC_Start+0x154>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d105      	bne.n	8002f22 <HAL_ADC_Start+0x5e>
 8002f16:	4b41      	ldr	r3, [pc, #260]	; (800301c <HAL_ADC_Start+0x158>)
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d115      	bne.n	8002f4e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f26:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d026      	beq.n	8002f8a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f40:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f44:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002f4c:	e01d      	b.n	8002f8a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f52:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a2f      	ldr	r2, [pc, #188]	; (800301c <HAL_ADC_Start+0x158>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d004      	beq.n	8002f6e <HAL_ADC_Start+0xaa>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a2b      	ldr	r2, [pc, #172]	; (8003018 <HAL_ADC_Start+0x154>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d10d      	bne.n	8002f8a <HAL_ADC_Start+0xc6>
 8002f6e:	4b2b      	ldr	r3, [pc, #172]	; (800301c <HAL_ADC_Start+0x158>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d007      	beq.n	8002f8a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f7e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f82:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d006      	beq.n	8002fa4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9a:	f023 0206 	bic.w	r2, r3, #6
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	62da      	str	r2, [r3, #44]	; 0x2c
 8002fa2:	e002      	b.n	8002faa <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f06f 0202 	mvn.w	r2, #2
 8002fba:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002fc6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002fca:	d113      	bne.n	8002ff4 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002fd0:	4a11      	ldr	r2, [pc, #68]	; (8003018 <HAL_ADC_Start+0x154>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d105      	bne.n	8002fe2 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002fd6:	4b11      	ldr	r3, [pc, #68]	; (800301c <HAL_ADC_Start+0x158>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d108      	bne.n	8002ff4 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	689a      	ldr	r2, [r3, #8]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002ff0:	609a      	str	r2, [r3, #8]
 8002ff2:	e00c      	b.n	800300e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	689a      	ldr	r2, [r3, #8]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003002:	609a      	str	r2, [r3, #8]
 8003004:	e003      	b.n	800300e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800300e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003010:	4618      	mov	r0, r3
 8003012:	3710      	adds	r7, #16
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	40012800 	.word	0x40012800
 800301c:	40012400 	.word	0x40012400

08003020 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003020:	b590      	push	{r4, r7, lr}
 8003022:	b087      	sub	sp, #28
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800302a:	2300      	movs	r3, #0
 800302c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800302e:	2300      	movs	r3, #0
 8003030:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8003032:	2300      	movs	r3, #0
 8003034:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8003036:	f7ff fe63 	bl	8002d00 <HAL_GetTick>
 800303a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00b      	beq.n	8003062 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304e:	f043 0220 	orr.w	r2, r3, #32
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e0d3      	b.n	800320a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800306c:	2b00      	cmp	r3, #0
 800306e:	d131      	bne.n	80030d4 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003076:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800307a:	2b00      	cmp	r3, #0
 800307c:	d12a      	bne.n	80030d4 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800307e:	e021      	b.n	80030c4 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003086:	d01d      	beq.n	80030c4 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d007      	beq.n	800309e <HAL_ADC_PollForConversion+0x7e>
 800308e:	f7ff fe37 	bl	8002d00 <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	683a      	ldr	r2, [r7, #0]
 800309a:	429a      	cmp	r2, r3
 800309c:	d212      	bcs.n	80030c4 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0302 	and.w	r3, r3, #2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d10b      	bne.n	80030c4 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b0:	f043 0204 	orr.w	r2, r3, #4
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e0a2      	b.n	800320a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d0d6      	beq.n	8003080 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80030d2:	e070      	b.n	80031b6 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80030d4:	4b4f      	ldr	r3, [pc, #316]	; (8003214 <HAL_ADC_PollForConversion+0x1f4>)
 80030d6:	681c      	ldr	r4, [r3, #0]
 80030d8:	2002      	movs	r0, #2
 80030da:	f004 f817 	bl	800710c <HAL_RCCEx_GetPeriphCLKFreq>
 80030de:	4603      	mov	r3, r0
 80030e0:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	6919      	ldr	r1, [r3, #16]
 80030ea:	4b4b      	ldr	r3, [pc, #300]	; (8003218 <HAL_ADC_PollForConversion+0x1f8>)
 80030ec:	400b      	ands	r3, r1
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d118      	bne.n	8003124 <HAL_ADC_PollForConversion+0x104>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68d9      	ldr	r1, [r3, #12]
 80030f8:	4b48      	ldr	r3, [pc, #288]	; (800321c <HAL_ADC_PollForConversion+0x1fc>)
 80030fa:	400b      	ands	r3, r1
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d111      	bne.n	8003124 <HAL_ADC_PollForConversion+0x104>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	6919      	ldr	r1, [r3, #16]
 8003106:	4b46      	ldr	r3, [pc, #280]	; (8003220 <HAL_ADC_PollForConversion+0x200>)
 8003108:	400b      	ands	r3, r1
 800310a:	2b00      	cmp	r3, #0
 800310c:	d108      	bne.n	8003120 <HAL_ADC_PollForConversion+0x100>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68d9      	ldr	r1, [r3, #12]
 8003114:	4b43      	ldr	r3, [pc, #268]	; (8003224 <HAL_ADC_PollForConversion+0x204>)
 8003116:	400b      	ands	r3, r1
 8003118:	2b00      	cmp	r3, #0
 800311a:	d101      	bne.n	8003120 <HAL_ADC_PollForConversion+0x100>
 800311c:	2314      	movs	r3, #20
 800311e:	e020      	b.n	8003162 <HAL_ADC_PollForConversion+0x142>
 8003120:	2329      	movs	r3, #41	; 0x29
 8003122:	e01e      	b.n	8003162 <HAL_ADC_PollForConversion+0x142>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	6919      	ldr	r1, [r3, #16]
 800312a:	4b3d      	ldr	r3, [pc, #244]	; (8003220 <HAL_ADC_PollForConversion+0x200>)
 800312c:	400b      	ands	r3, r1
 800312e:	2b00      	cmp	r3, #0
 8003130:	d106      	bne.n	8003140 <HAL_ADC_PollForConversion+0x120>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68d9      	ldr	r1, [r3, #12]
 8003138:	4b3a      	ldr	r3, [pc, #232]	; (8003224 <HAL_ADC_PollForConversion+0x204>)
 800313a:	400b      	ands	r3, r1
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00d      	beq.n	800315c <HAL_ADC_PollForConversion+0x13c>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	6919      	ldr	r1, [r3, #16]
 8003146:	4b38      	ldr	r3, [pc, #224]	; (8003228 <HAL_ADC_PollForConversion+0x208>)
 8003148:	400b      	ands	r3, r1
 800314a:	2b00      	cmp	r3, #0
 800314c:	d108      	bne.n	8003160 <HAL_ADC_PollForConversion+0x140>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	68d9      	ldr	r1, [r3, #12]
 8003154:	4b34      	ldr	r3, [pc, #208]	; (8003228 <HAL_ADC_PollForConversion+0x208>)
 8003156:	400b      	ands	r3, r1
 8003158:	2b00      	cmp	r3, #0
 800315a:	d101      	bne.n	8003160 <HAL_ADC_PollForConversion+0x140>
 800315c:	2354      	movs	r3, #84	; 0x54
 800315e:	e000      	b.n	8003162 <HAL_ADC_PollForConversion+0x142>
 8003160:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8003162:	fb02 f303 	mul.w	r3, r2, r3
 8003166:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003168:	e021      	b.n	80031ae <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003170:	d01a      	beq.n	80031a8 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d007      	beq.n	8003188 <HAL_ADC_PollForConversion+0x168>
 8003178:	f7ff fdc2 	bl	8002d00 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	683a      	ldr	r2, [r7, #0]
 8003184:	429a      	cmp	r2, r3
 8003186:	d20f      	bcs.n	80031a8 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	429a      	cmp	r2, r3
 800318e:	d90b      	bls.n	80031a8 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003194:	f043 0204 	orr.w	r2, r3, #4
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e030      	b.n	800320a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	3301      	adds	r3, #1
 80031ac:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d8d9      	bhi.n	800316a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f06f 0212 	mvn.w	r2, #18
 80031be:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80031d6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80031da:	d115      	bne.n	8003208 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d111      	bne.n	8003208 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d105      	bne.n	8003208 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003200:	f043 0201 	orr.w	r2, r3, #1
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	371c      	adds	r7, #28
 800320e:	46bd      	mov	sp, r7
 8003210:	bd90      	pop	{r4, r7, pc}
 8003212:	bf00      	nop
 8003214:	20000000 	.word	0x20000000
 8003218:	24924924 	.word	0x24924924
 800321c:	00924924 	.word	0x00924924
 8003220:	12492492 	.word	0x12492492
 8003224:	00492492 	.word	0x00492492
 8003228:	00249249 	.word	0x00249249

0800322c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800323a:	4618      	mov	r0, r3
 800323c:	370c      	adds	r7, #12
 800323e:	46bd      	mov	sp, r7
 8003240:	bc80      	pop	{r7}
 8003242:	4770      	bx	lr

08003244 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f003 0320 	and.w	r3, r3, #32
 8003256:	2b20      	cmp	r3, #32
 8003258:	d140      	bne.n	80032dc <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0302 	and.w	r3, r3, #2
 8003264:	2b02      	cmp	r3, #2
 8003266:	d139      	bne.n	80032dc <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800326c:	f003 0310 	and.w	r3, r3, #16
 8003270:	2b00      	cmp	r3, #0
 8003272:	d105      	bne.n	8003280 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003278:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800328a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800328e:	d11d      	bne.n	80032cc <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003294:	2b00      	cmp	r3, #0
 8003296:	d119      	bne.n	80032cc <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	685a      	ldr	r2, [r3, #4]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f022 0220 	bic.w	r2, r2, #32
 80032a6:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d105      	bne.n	80032cc <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c4:	f043 0201 	orr.w	r2, r3, #1
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f000 f87c 	bl	80033ca <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f06f 0212 	mvn.w	r2, #18
 80032da:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e6:	2b80      	cmp	r3, #128	; 0x80
 80032e8:	d14f      	bne.n	800338a <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0304 	and.w	r3, r3, #4
 80032f4:	2b04      	cmp	r3, #4
 80032f6:	d148      	bne.n	800338a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fc:	f003 0310 	and.w	r3, r3, #16
 8003300:	2b00      	cmp	r3, #0
 8003302:	d105      	bne.n	8003310 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003308:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800331a:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800331e:	d012      	beq.n	8003346 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800332a:	2b00      	cmp	r3, #0
 800332c:	d125      	bne.n	800337a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003338:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800333c:	d11d      	bne.n	800337a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003342:	2b00      	cmp	r3, #0
 8003344:	d119      	bne.n	800337a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	685a      	ldr	r2, [r3, #4]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003354:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800335a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800336a:	2b00      	cmp	r3, #0
 800336c:	d105      	bne.n	800337a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003372:	f043 0201 	orr.w	r2, r3, #1
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 f9cb 	bl	8003716 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f06f 020c 	mvn.w	r2, #12
 8003388:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003394:	2b40      	cmp	r3, #64	; 0x40
 8003396:	d114      	bne.n	80033c2 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d10d      	bne.n	80033c2 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033aa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 f812 	bl	80033dc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f06f 0201 	mvn.w	r2, #1
 80033c0:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80033c2:	bf00      	nop
 80033c4:	3708      	adds	r7, #8
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80033ca:	b480      	push	{r7}
 80033cc:	b083      	sub	sp, #12
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80033d2:	bf00      	nop
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bc80      	pop	{r7}
 80033da:	4770      	bx	lr

080033dc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80033e4:	bf00      	nop
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bc80      	pop	{r7}
 80033ec:	4770      	bx	lr
	...

080033f0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80033f0:	b480      	push	{r7}
 80033f2:	b085      	sub	sp, #20
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033fa:	2300      	movs	r3, #0
 80033fc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80033fe:	2300      	movs	r3, #0
 8003400:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003408:	2b01      	cmp	r3, #1
 800340a:	d101      	bne.n	8003410 <HAL_ADC_ConfigChannel+0x20>
 800340c:	2302      	movs	r3, #2
 800340e:	e0dc      	b.n	80035ca <HAL_ADC_ConfigChannel+0x1da>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	2b06      	cmp	r3, #6
 800341e:	d81c      	bhi.n	800345a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685a      	ldr	r2, [r3, #4]
 800342a:	4613      	mov	r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	4413      	add	r3, r2
 8003430:	3b05      	subs	r3, #5
 8003432:	221f      	movs	r2, #31
 8003434:	fa02 f303 	lsl.w	r3, r2, r3
 8003438:	43db      	mvns	r3, r3
 800343a:	4019      	ands	r1, r3
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	6818      	ldr	r0, [r3, #0]
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685a      	ldr	r2, [r3, #4]
 8003444:	4613      	mov	r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	4413      	add	r3, r2
 800344a:	3b05      	subs	r3, #5
 800344c:	fa00 f203 	lsl.w	r2, r0, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	430a      	orrs	r2, r1
 8003456:	635a      	str	r2, [r3, #52]	; 0x34
 8003458:	e03c      	b.n	80034d4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	2b0c      	cmp	r3, #12
 8003460:	d81c      	bhi.n	800349c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685a      	ldr	r2, [r3, #4]
 800346c:	4613      	mov	r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	4413      	add	r3, r2
 8003472:	3b23      	subs	r3, #35	; 0x23
 8003474:	221f      	movs	r2, #31
 8003476:	fa02 f303 	lsl.w	r3, r2, r3
 800347a:	43db      	mvns	r3, r3
 800347c:	4019      	ands	r1, r3
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	6818      	ldr	r0, [r3, #0]
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	685a      	ldr	r2, [r3, #4]
 8003486:	4613      	mov	r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	4413      	add	r3, r2
 800348c:	3b23      	subs	r3, #35	; 0x23
 800348e:	fa00 f203 	lsl.w	r2, r0, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	430a      	orrs	r2, r1
 8003498:	631a      	str	r2, [r3, #48]	; 0x30
 800349a:	e01b      	b.n	80034d4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685a      	ldr	r2, [r3, #4]
 80034a6:	4613      	mov	r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	4413      	add	r3, r2
 80034ac:	3b41      	subs	r3, #65	; 0x41
 80034ae:	221f      	movs	r2, #31
 80034b0:	fa02 f303 	lsl.w	r3, r2, r3
 80034b4:	43db      	mvns	r3, r3
 80034b6:	4019      	ands	r1, r3
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	6818      	ldr	r0, [r3, #0]
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685a      	ldr	r2, [r3, #4]
 80034c0:	4613      	mov	r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	4413      	add	r3, r2
 80034c6:	3b41      	subs	r3, #65	; 0x41
 80034c8:	fa00 f203 	lsl.w	r2, r0, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	430a      	orrs	r2, r1
 80034d2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2b09      	cmp	r3, #9
 80034da:	d91c      	bls.n	8003516 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68d9      	ldr	r1, [r3, #12]
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	4613      	mov	r3, r2
 80034e8:	005b      	lsls	r3, r3, #1
 80034ea:	4413      	add	r3, r2
 80034ec:	3b1e      	subs	r3, #30
 80034ee:	2207      	movs	r2, #7
 80034f0:	fa02 f303 	lsl.w	r3, r2, r3
 80034f4:	43db      	mvns	r3, r3
 80034f6:	4019      	ands	r1, r3
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	6898      	ldr	r0, [r3, #8]
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	4613      	mov	r3, r2
 8003502:	005b      	lsls	r3, r3, #1
 8003504:	4413      	add	r3, r2
 8003506:	3b1e      	subs	r3, #30
 8003508:	fa00 f203 	lsl.w	r2, r0, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	430a      	orrs	r2, r1
 8003512:	60da      	str	r2, [r3, #12]
 8003514:	e019      	b.n	800354a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	6919      	ldr	r1, [r3, #16]
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	4613      	mov	r3, r2
 8003522:	005b      	lsls	r3, r3, #1
 8003524:	4413      	add	r3, r2
 8003526:	2207      	movs	r2, #7
 8003528:	fa02 f303 	lsl.w	r3, r2, r3
 800352c:	43db      	mvns	r3, r3
 800352e:	4019      	ands	r1, r3
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	6898      	ldr	r0, [r3, #8]
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	4613      	mov	r3, r2
 800353a:	005b      	lsls	r3, r3, #1
 800353c:	4413      	add	r3, r2
 800353e:	fa00 f203 	lsl.w	r2, r0, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	430a      	orrs	r2, r1
 8003548:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2b10      	cmp	r3, #16
 8003550:	d003      	beq.n	800355a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003556:	2b11      	cmp	r3, #17
 8003558:	d132      	bne.n	80035c0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a1d      	ldr	r2, [pc, #116]	; (80035d4 <HAL_ADC_ConfigChannel+0x1e4>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d125      	bne.n	80035b0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d126      	bne.n	80035c0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	689a      	ldr	r2, [r3, #8]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003580:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2b10      	cmp	r3, #16
 8003588:	d11a      	bne.n	80035c0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800358a:	4b13      	ldr	r3, [pc, #76]	; (80035d8 <HAL_ADC_ConfigChannel+0x1e8>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a13      	ldr	r2, [pc, #76]	; (80035dc <HAL_ADC_ConfigChannel+0x1ec>)
 8003590:	fba2 2303 	umull	r2, r3, r2, r3
 8003594:	0c9a      	lsrs	r2, r3, #18
 8003596:	4613      	mov	r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	4413      	add	r3, r2
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80035a0:	e002      	b.n	80035a8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	3b01      	subs	r3, #1
 80035a6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1f9      	bne.n	80035a2 <HAL_ADC_ConfigChannel+0x1b2>
 80035ae:	e007      	b.n	80035c0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b4:	f043 0220 	orr.w	r2, r3, #32
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80035c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3714      	adds	r7, #20
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bc80      	pop	{r7}
 80035d2:	4770      	bx	lr
 80035d4:	40012400 	.word	0x40012400
 80035d8:	20000000 	.word	0x20000000
 80035dc:	431bde83 	.word	0x431bde83

080035e0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035e8:	2300      	movs	r3, #0
 80035ea:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80035ec:	2300      	movs	r3, #0
 80035ee:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d040      	beq.n	8003680 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	689a      	ldr	r2, [r3, #8]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f042 0201 	orr.w	r2, r2, #1
 800360c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800360e:	4b1f      	ldr	r3, [pc, #124]	; (800368c <ADC_Enable+0xac>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a1f      	ldr	r2, [pc, #124]	; (8003690 <ADC_Enable+0xb0>)
 8003614:	fba2 2303 	umull	r2, r3, r2, r3
 8003618:	0c9b      	lsrs	r3, r3, #18
 800361a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800361c:	e002      	b.n	8003624 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	3b01      	subs	r3, #1
 8003622:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1f9      	bne.n	800361e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800362a:	f7ff fb69 	bl	8002d00 <HAL_GetTick>
 800362e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003630:	e01f      	b.n	8003672 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003632:	f7ff fb65 	bl	8002d00 <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	2b02      	cmp	r3, #2
 800363e:	d918      	bls.n	8003672 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b01      	cmp	r3, #1
 800364c:	d011      	beq.n	8003672 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003652:	f043 0210 	orr.w	r2, r3, #16
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365e:	f043 0201 	orr.w	r2, r3, #1
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e007      	b.n	8003682 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f003 0301 	and.w	r3, r3, #1
 800367c:	2b01      	cmp	r3, #1
 800367e:	d1d8      	bne.n	8003632 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3710      	adds	r7, #16
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	20000000 	.word	0x20000000
 8003690:	431bde83 	.word	0x431bde83

08003694 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800369c:	2300      	movs	r3, #0
 800369e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d12e      	bne.n	800370c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	689a      	ldr	r2, [r3, #8]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f022 0201 	bic.w	r2, r2, #1
 80036bc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80036be:	f7ff fb1f 	bl	8002d00 <HAL_GetTick>
 80036c2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80036c4:	e01b      	b.n	80036fe <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80036c6:	f7ff fb1b 	bl	8002d00 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d914      	bls.n	80036fe <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f003 0301 	and.w	r3, r3, #1
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d10d      	bne.n	80036fe <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e6:	f043 0210 	orr.w	r2, r3, #16
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f2:	f043 0201 	orr.w	r2, r3, #1
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e007      	b.n	800370e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f003 0301 	and.w	r3, r3, #1
 8003708:	2b01      	cmp	r3, #1
 800370a:	d0dc      	beq.n	80036c6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3710      	adds	r7, #16
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003716:	b480      	push	{r7}
 8003718:	b083      	sub	sp, #12
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800371e:	bf00      	nop
 8003720:	370c      	adds	r7, #12
 8003722:	46bd      	mov	sp, r7
 8003724:	bc80      	pop	{r7}
 8003726:	4770      	bx	lr

08003728 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003728:	b480      	push	{r7}
 800372a:	b085      	sub	sp, #20
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f003 0307 	and.w	r3, r3, #7
 8003736:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003738:	4b0c      	ldr	r3, [pc, #48]	; (800376c <__NVIC_SetPriorityGrouping+0x44>)
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800373e:	68ba      	ldr	r2, [r7, #8]
 8003740:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003744:	4013      	ands	r3, r2
 8003746:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003750:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003754:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003758:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800375a:	4a04      	ldr	r2, [pc, #16]	; (800376c <__NVIC_SetPriorityGrouping+0x44>)
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	60d3      	str	r3, [r2, #12]
}
 8003760:	bf00      	nop
 8003762:	3714      	adds	r7, #20
 8003764:	46bd      	mov	sp, r7
 8003766:	bc80      	pop	{r7}
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop
 800376c:	e000ed00 	.word	0xe000ed00

08003770 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003770:	b480      	push	{r7}
 8003772:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003774:	4b04      	ldr	r3, [pc, #16]	; (8003788 <__NVIC_GetPriorityGrouping+0x18>)
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	0a1b      	lsrs	r3, r3, #8
 800377a:	f003 0307 	and.w	r3, r3, #7
}
 800377e:	4618      	mov	r0, r3
 8003780:	46bd      	mov	sp, r7
 8003782:	bc80      	pop	{r7}
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	e000ed00 	.word	0xe000ed00

0800378c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	4603      	mov	r3, r0
 8003794:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800379a:	2b00      	cmp	r3, #0
 800379c:	db0b      	blt.n	80037b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800379e:	79fb      	ldrb	r3, [r7, #7]
 80037a0:	f003 021f 	and.w	r2, r3, #31
 80037a4:	4906      	ldr	r1, [pc, #24]	; (80037c0 <__NVIC_EnableIRQ+0x34>)
 80037a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037aa:	095b      	lsrs	r3, r3, #5
 80037ac:	2001      	movs	r0, #1
 80037ae:	fa00 f202 	lsl.w	r2, r0, r2
 80037b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037b6:	bf00      	nop
 80037b8:	370c      	adds	r7, #12
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bc80      	pop	{r7}
 80037be:	4770      	bx	lr
 80037c0:	e000e100 	.word	0xe000e100

080037c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	4603      	mov	r3, r0
 80037cc:	6039      	str	r1, [r7, #0]
 80037ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	db0a      	blt.n	80037ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	b2da      	uxtb	r2, r3
 80037dc:	490c      	ldr	r1, [pc, #48]	; (8003810 <__NVIC_SetPriority+0x4c>)
 80037de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037e2:	0112      	lsls	r2, r2, #4
 80037e4:	b2d2      	uxtb	r2, r2
 80037e6:	440b      	add	r3, r1
 80037e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037ec:	e00a      	b.n	8003804 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	b2da      	uxtb	r2, r3
 80037f2:	4908      	ldr	r1, [pc, #32]	; (8003814 <__NVIC_SetPriority+0x50>)
 80037f4:	79fb      	ldrb	r3, [r7, #7]
 80037f6:	f003 030f 	and.w	r3, r3, #15
 80037fa:	3b04      	subs	r3, #4
 80037fc:	0112      	lsls	r2, r2, #4
 80037fe:	b2d2      	uxtb	r2, r2
 8003800:	440b      	add	r3, r1
 8003802:	761a      	strb	r2, [r3, #24]
}
 8003804:	bf00      	nop
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	bc80      	pop	{r7}
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	e000e100 	.word	0xe000e100
 8003814:	e000ed00 	.word	0xe000ed00

08003818 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003818:	b480      	push	{r7}
 800381a:	b089      	sub	sp, #36	; 0x24
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f003 0307 	and.w	r3, r3, #7
 800382a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	f1c3 0307 	rsb	r3, r3, #7
 8003832:	2b04      	cmp	r3, #4
 8003834:	bf28      	it	cs
 8003836:	2304      	movcs	r3, #4
 8003838:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	3304      	adds	r3, #4
 800383e:	2b06      	cmp	r3, #6
 8003840:	d902      	bls.n	8003848 <NVIC_EncodePriority+0x30>
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	3b03      	subs	r3, #3
 8003846:	e000      	b.n	800384a <NVIC_EncodePriority+0x32>
 8003848:	2300      	movs	r3, #0
 800384a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800384c:	f04f 32ff 	mov.w	r2, #4294967295
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	fa02 f303 	lsl.w	r3, r2, r3
 8003856:	43da      	mvns	r2, r3
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	401a      	ands	r2, r3
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003860:	f04f 31ff 	mov.w	r1, #4294967295
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	fa01 f303 	lsl.w	r3, r1, r3
 800386a:	43d9      	mvns	r1, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003870:	4313      	orrs	r3, r2
         );
}
 8003872:	4618      	mov	r0, r3
 8003874:	3724      	adds	r7, #36	; 0x24
 8003876:	46bd      	mov	sp, r7
 8003878:	bc80      	pop	{r7}
 800387a:	4770      	bx	lr

0800387c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	3b01      	subs	r3, #1
 8003888:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800388c:	d301      	bcc.n	8003892 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800388e:	2301      	movs	r3, #1
 8003890:	e00f      	b.n	80038b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003892:	4a0a      	ldr	r2, [pc, #40]	; (80038bc <SysTick_Config+0x40>)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	3b01      	subs	r3, #1
 8003898:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800389a:	210f      	movs	r1, #15
 800389c:	f04f 30ff 	mov.w	r0, #4294967295
 80038a0:	f7ff ff90 	bl	80037c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038a4:	4b05      	ldr	r3, [pc, #20]	; (80038bc <SysTick_Config+0x40>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038aa:	4b04      	ldr	r3, [pc, #16]	; (80038bc <SysTick_Config+0x40>)
 80038ac:	2207      	movs	r2, #7
 80038ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3708      	adds	r7, #8
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	e000e010 	.word	0xe000e010

080038c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f7ff ff2d 	bl	8003728 <__NVIC_SetPriorityGrouping>
}
 80038ce:	bf00      	nop
 80038d0:	3708      	adds	r7, #8
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b086      	sub	sp, #24
 80038da:	af00      	add	r7, sp, #0
 80038dc:	4603      	mov	r3, r0
 80038de:	60b9      	str	r1, [r7, #8]
 80038e0:	607a      	str	r2, [r7, #4]
 80038e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038e4:	2300      	movs	r3, #0
 80038e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038e8:	f7ff ff42 	bl	8003770 <__NVIC_GetPriorityGrouping>
 80038ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	68b9      	ldr	r1, [r7, #8]
 80038f2:	6978      	ldr	r0, [r7, #20]
 80038f4:	f7ff ff90 	bl	8003818 <NVIC_EncodePriority>
 80038f8:	4602      	mov	r2, r0
 80038fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038fe:	4611      	mov	r1, r2
 8003900:	4618      	mov	r0, r3
 8003902:	f7ff ff5f 	bl	80037c4 <__NVIC_SetPriority>
}
 8003906:	bf00      	nop
 8003908:	3718      	adds	r7, #24
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800390e:	b580      	push	{r7, lr}
 8003910:	b082      	sub	sp, #8
 8003912:	af00      	add	r7, sp, #0
 8003914:	4603      	mov	r3, r0
 8003916:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800391c:	4618      	mov	r0, r3
 800391e:	f7ff ff35 	bl	800378c <__NVIC_EnableIRQ>
}
 8003922:	bf00      	nop
 8003924:	3708      	adds	r7, #8
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}

0800392a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800392a:	b580      	push	{r7, lr}
 800392c:	b082      	sub	sp, #8
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f7ff ffa2 	bl	800387c <SysTick_Config>
 8003938:	4603      	mov	r3, r0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3708      	adds	r7, #8
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
	...

08003944 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800394c:	2300      	movs	r3, #0
 800394e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003956:	2b02      	cmp	r3, #2
 8003958:	d005      	beq.n	8003966 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2204      	movs	r2, #4
 800395e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	73fb      	strb	r3, [r7, #15]
 8003964:	e051      	b.n	8003a0a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f022 020e 	bic.w	r2, r2, #14
 8003974:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f022 0201 	bic.w	r2, r2, #1
 8003984:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a22      	ldr	r2, [pc, #136]	; (8003a14 <HAL_DMA_Abort_IT+0xd0>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d029      	beq.n	80039e4 <HAL_DMA_Abort_IT+0xa0>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a20      	ldr	r2, [pc, #128]	; (8003a18 <HAL_DMA_Abort_IT+0xd4>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d022      	beq.n	80039e0 <HAL_DMA_Abort_IT+0x9c>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a1f      	ldr	r2, [pc, #124]	; (8003a1c <HAL_DMA_Abort_IT+0xd8>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d01a      	beq.n	80039da <HAL_DMA_Abort_IT+0x96>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a1d      	ldr	r2, [pc, #116]	; (8003a20 <HAL_DMA_Abort_IT+0xdc>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d012      	beq.n	80039d4 <HAL_DMA_Abort_IT+0x90>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a1c      	ldr	r2, [pc, #112]	; (8003a24 <HAL_DMA_Abort_IT+0xe0>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d00a      	beq.n	80039ce <HAL_DMA_Abort_IT+0x8a>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a1a      	ldr	r2, [pc, #104]	; (8003a28 <HAL_DMA_Abort_IT+0xe4>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d102      	bne.n	80039c8 <HAL_DMA_Abort_IT+0x84>
 80039c2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80039c6:	e00e      	b.n	80039e6 <HAL_DMA_Abort_IT+0xa2>
 80039c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039cc:	e00b      	b.n	80039e6 <HAL_DMA_Abort_IT+0xa2>
 80039ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80039d2:	e008      	b.n	80039e6 <HAL_DMA_Abort_IT+0xa2>
 80039d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039d8:	e005      	b.n	80039e6 <HAL_DMA_Abort_IT+0xa2>
 80039da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039de:	e002      	b.n	80039e6 <HAL_DMA_Abort_IT+0xa2>
 80039e0:	2310      	movs	r3, #16
 80039e2:	e000      	b.n	80039e6 <HAL_DMA_Abort_IT+0xa2>
 80039e4:	2301      	movs	r3, #1
 80039e6:	4a11      	ldr	r2, [pc, #68]	; (8003a2c <HAL_DMA_Abort_IT+0xe8>)
 80039e8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2201      	movs	r2, #1
 80039ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d003      	beq.n	8003a0a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	4798      	blx	r3
    } 
  }
  return status;
 8003a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3710      	adds	r7, #16
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	40020008 	.word	0x40020008
 8003a18:	4002001c 	.word	0x4002001c
 8003a1c:	40020030 	.word	0x40020030
 8003a20:	40020044 	.word	0x40020044
 8003a24:	40020058 	.word	0x40020058
 8003a28:	4002006c 	.word	0x4002006c
 8003a2c:	40020000 	.word	0x40020000

08003a30 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	370c      	adds	r7, #12
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bc80      	pop	{r7}
 8003a46:	4770      	bx	lr

08003a48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b08b      	sub	sp, #44	; 0x2c
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a52:	2300      	movs	r3, #0
 8003a54:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003a56:	2300      	movs	r3, #0
 8003a58:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a5a:	e169      	b.n	8003d30 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a60:	fa02 f303 	lsl.w	r3, r2, r3
 8003a64:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	69fa      	ldr	r2, [r7, #28]
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	f040 8158 	bne.w	8003d2a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	4a9a      	ldr	r2, [pc, #616]	; (8003ce8 <HAL_GPIO_Init+0x2a0>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d05e      	beq.n	8003b42 <HAL_GPIO_Init+0xfa>
 8003a84:	4a98      	ldr	r2, [pc, #608]	; (8003ce8 <HAL_GPIO_Init+0x2a0>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d875      	bhi.n	8003b76 <HAL_GPIO_Init+0x12e>
 8003a8a:	4a98      	ldr	r2, [pc, #608]	; (8003cec <HAL_GPIO_Init+0x2a4>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d058      	beq.n	8003b42 <HAL_GPIO_Init+0xfa>
 8003a90:	4a96      	ldr	r2, [pc, #600]	; (8003cec <HAL_GPIO_Init+0x2a4>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d86f      	bhi.n	8003b76 <HAL_GPIO_Init+0x12e>
 8003a96:	4a96      	ldr	r2, [pc, #600]	; (8003cf0 <HAL_GPIO_Init+0x2a8>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d052      	beq.n	8003b42 <HAL_GPIO_Init+0xfa>
 8003a9c:	4a94      	ldr	r2, [pc, #592]	; (8003cf0 <HAL_GPIO_Init+0x2a8>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d869      	bhi.n	8003b76 <HAL_GPIO_Init+0x12e>
 8003aa2:	4a94      	ldr	r2, [pc, #592]	; (8003cf4 <HAL_GPIO_Init+0x2ac>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d04c      	beq.n	8003b42 <HAL_GPIO_Init+0xfa>
 8003aa8:	4a92      	ldr	r2, [pc, #584]	; (8003cf4 <HAL_GPIO_Init+0x2ac>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d863      	bhi.n	8003b76 <HAL_GPIO_Init+0x12e>
 8003aae:	4a92      	ldr	r2, [pc, #584]	; (8003cf8 <HAL_GPIO_Init+0x2b0>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d046      	beq.n	8003b42 <HAL_GPIO_Init+0xfa>
 8003ab4:	4a90      	ldr	r2, [pc, #576]	; (8003cf8 <HAL_GPIO_Init+0x2b0>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d85d      	bhi.n	8003b76 <HAL_GPIO_Init+0x12e>
 8003aba:	2b12      	cmp	r3, #18
 8003abc:	d82a      	bhi.n	8003b14 <HAL_GPIO_Init+0xcc>
 8003abe:	2b12      	cmp	r3, #18
 8003ac0:	d859      	bhi.n	8003b76 <HAL_GPIO_Init+0x12e>
 8003ac2:	a201      	add	r2, pc, #4	; (adr r2, 8003ac8 <HAL_GPIO_Init+0x80>)
 8003ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ac8:	08003b43 	.word	0x08003b43
 8003acc:	08003b1d 	.word	0x08003b1d
 8003ad0:	08003b2f 	.word	0x08003b2f
 8003ad4:	08003b71 	.word	0x08003b71
 8003ad8:	08003b77 	.word	0x08003b77
 8003adc:	08003b77 	.word	0x08003b77
 8003ae0:	08003b77 	.word	0x08003b77
 8003ae4:	08003b77 	.word	0x08003b77
 8003ae8:	08003b77 	.word	0x08003b77
 8003aec:	08003b77 	.word	0x08003b77
 8003af0:	08003b77 	.word	0x08003b77
 8003af4:	08003b77 	.word	0x08003b77
 8003af8:	08003b77 	.word	0x08003b77
 8003afc:	08003b77 	.word	0x08003b77
 8003b00:	08003b77 	.word	0x08003b77
 8003b04:	08003b77 	.word	0x08003b77
 8003b08:	08003b77 	.word	0x08003b77
 8003b0c:	08003b25 	.word	0x08003b25
 8003b10:	08003b39 	.word	0x08003b39
 8003b14:	4a79      	ldr	r2, [pc, #484]	; (8003cfc <HAL_GPIO_Init+0x2b4>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d013      	beq.n	8003b42 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003b1a:	e02c      	b.n	8003b76 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	623b      	str	r3, [r7, #32]
          break;
 8003b22:	e029      	b.n	8003b78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	3304      	adds	r3, #4
 8003b2a:	623b      	str	r3, [r7, #32]
          break;
 8003b2c:	e024      	b.n	8003b78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	3308      	adds	r3, #8
 8003b34:	623b      	str	r3, [r7, #32]
          break;
 8003b36:	e01f      	b.n	8003b78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	330c      	adds	r3, #12
 8003b3e:	623b      	str	r3, [r7, #32]
          break;
 8003b40:	e01a      	b.n	8003b78 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d102      	bne.n	8003b50 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003b4a:	2304      	movs	r3, #4
 8003b4c:	623b      	str	r3, [r7, #32]
          break;
 8003b4e:	e013      	b.n	8003b78 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d105      	bne.n	8003b64 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003b58:	2308      	movs	r3, #8
 8003b5a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	69fa      	ldr	r2, [r7, #28]
 8003b60:	611a      	str	r2, [r3, #16]
          break;
 8003b62:	e009      	b.n	8003b78 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003b64:	2308      	movs	r3, #8
 8003b66:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	69fa      	ldr	r2, [r7, #28]
 8003b6c:	615a      	str	r2, [r3, #20]
          break;
 8003b6e:	e003      	b.n	8003b78 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003b70:	2300      	movs	r3, #0
 8003b72:	623b      	str	r3, [r7, #32]
          break;
 8003b74:	e000      	b.n	8003b78 <HAL_GPIO_Init+0x130>
          break;
 8003b76:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	2bff      	cmp	r3, #255	; 0xff
 8003b7c:	d801      	bhi.n	8003b82 <HAL_GPIO_Init+0x13a>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	e001      	b.n	8003b86 <HAL_GPIO_Init+0x13e>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	3304      	adds	r3, #4
 8003b86:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	2bff      	cmp	r3, #255	; 0xff
 8003b8c:	d802      	bhi.n	8003b94 <HAL_GPIO_Init+0x14c>
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	e002      	b.n	8003b9a <HAL_GPIO_Init+0x152>
 8003b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b96:	3b08      	subs	r3, #8
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	210f      	movs	r1, #15
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ba8:	43db      	mvns	r3, r3
 8003baa:	401a      	ands	r2, r3
 8003bac:	6a39      	ldr	r1, [r7, #32]
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8003bb4:	431a      	orrs	r2, r3
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	f000 80b1 	beq.w	8003d2a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003bc8:	4b4d      	ldr	r3, [pc, #308]	; (8003d00 <HAL_GPIO_Init+0x2b8>)
 8003bca:	699b      	ldr	r3, [r3, #24]
 8003bcc:	4a4c      	ldr	r2, [pc, #304]	; (8003d00 <HAL_GPIO_Init+0x2b8>)
 8003bce:	f043 0301 	orr.w	r3, r3, #1
 8003bd2:	6193      	str	r3, [r2, #24]
 8003bd4:	4b4a      	ldr	r3, [pc, #296]	; (8003d00 <HAL_GPIO_Init+0x2b8>)
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	f003 0301 	and.w	r3, r3, #1
 8003bdc:	60bb      	str	r3, [r7, #8]
 8003bde:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003be0:	4a48      	ldr	r2, [pc, #288]	; (8003d04 <HAL_GPIO_Init+0x2bc>)
 8003be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be4:	089b      	lsrs	r3, r3, #2
 8003be6:	3302      	adds	r3, #2
 8003be8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf0:	f003 0303 	and.w	r3, r3, #3
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	220f      	movs	r2, #15
 8003bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfc:	43db      	mvns	r3, r3
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	4013      	ands	r3, r2
 8003c02:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4a40      	ldr	r2, [pc, #256]	; (8003d08 <HAL_GPIO_Init+0x2c0>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d013      	beq.n	8003c34 <HAL_GPIO_Init+0x1ec>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4a3f      	ldr	r2, [pc, #252]	; (8003d0c <HAL_GPIO_Init+0x2c4>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d00d      	beq.n	8003c30 <HAL_GPIO_Init+0x1e8>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4a3e      	ldr	r2, [pc, #248]	; (8003d10 <HAL_GPIO_Init+0x2c8>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d007      	beq.n	8003c2c <HAL_GPIO_Init+0x1e4>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a3d      	ldr	r2, [pc, #244]	; (8003d14 <HAL_GPIO_Init+0x2cc>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d101      	bne.n	8003c28 <HAL_GPIO_Init+0x1e0>
 8003c24:	2303      	movs	r3, #3
 8003c26:	e006      	b.n	8003c36 <HAL_GPIO_Init+0x1ee>
 8003c28:	2304      	movs	r3, #4
 8003c2a:	e004      	b.n	8003c36 <HAL_GPIO_Init+0x1ee>
 8003c2c:	2302      	movs	r3, #2
 8003c2e:	e002      	b.n	8003c36 <HAL_GPIO_Init+0x1ee>
 8003c30:	2301      	movs	r3, #1
 8003c32:	e000      	b.n	8003c36 <HAL_GPIO_Init+0x1ee>
 8003c34:	2300      	movs	r3, #0
 8003c36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c38:	f002 0203 	and.w	r2, r2, #3
 8003c3c:	0092      	lsls	r2, r2, #2
 8003c3e:	4093      	lsls	r3, r2
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003c46:	492f      	ldr	r1, [pc, #188]	; (8003d04 <HAL_GPIO_Init+0x2bc>)
 8003c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4a:	089b      	lsrs	r3, r3, #2
 8003c4c:	3302      	adds	r3, #2
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d006      	beq.n	8003c6e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003c60:	4b2d      	ldr	r3, [pc, #180]	; (8003d18 <HAL_GPIO_Init+0x2d0>)
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	492c      	ldr	r1, [pc, #176]	; (8003d18 <HAL_GPIO_Init+0x2d0>)
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	600b      	str	r3, [r1, #0]
 8003c6c:	e006      	b.n	8003c7c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003c6e:	4b2a      	ldr	r3, [pc, #168]	; (8003d18 <HAL_GPIO_Init+0x2d0>)
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	43db      	mvns	r3, r3
 8003c76:	4928      	ldr	r1, [pc, #160]	; (8003d18 <HAL_GPIO_Init+0x2d0>)
 8003c78:	4013      	ands	r3, r2
 8003c7a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d006      	beq.n	8003c96 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003c88:	4b23      	ldr	r3, [pc, #140]	; (8003d18 <HAL_GPIO_Init+0x2d0>)
 8003c8a:	685a      	ldr	r2, [r3, #4]
 8003c8c:	4922      	ldr	r1, [pc, #136]	; (8003d18 <HAL_GPIO_Init+0x2d0>)
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	604b      	str	r3, [r1, #4]
 8003c94:	e006      	b.n	8003ca4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003c96:	4b20      	ldr	r3, [pc, #128]	; (8003d18 <HAL_GPIO_Init+0x2d0>)
 8003c98:	685a      	ldr	r2, [r3, #4]
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	43db      	mvns	r3, r3
 8003c9e:	491e      	ldr	r1, [pc, #120]	; (8003d18 <HAL_GPIO_Init+0x2d0>)
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d006      	beq.n	8003cbe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003cb0:	4b19      	ldr	r3, [pc, #100]	; (8003d18 <HAL_GPIO_Init+0x2d0>)
 8003cb2:	689a      	ldr	r2, [r3, #8]
 8003cb4:	4918      	ldr	r1, [pc, #96]	; (8003d18 <HAL_GPIO_Init+0x2d0>)
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	608b      	str	r3, [r1, #8]
 8003cbc:	e006      	b.n	8003ccc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003cbe:	4b16      	ldr	r3, [pc, #88]	; (8003d18 <HAL_GPIO_Init+0x2d0>)
 8003cc0:	689a      	ldr	r2, [r3, #8]
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	43db      	mvns	r3, r3
 8003cc6:	4914      	ldr	r1, [pc, #80]	; (8003d18 <HAL_GPIO_Init+0x2d0>)
 8003cc8:	4013      	ands	r3, r2
 8003cca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d021      	beq.n	8003d1c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003cd8:	4b0f      	ldr	r3, [pc, #60]	; (8003d18 <HAL_GPIO_Init+0x2d0>)
 8003cda:	68da      	ldr	r2, [r3, #12]
 8003cdc:	490e      	ldr	r1, [pc, #56]	; (8003d18 <HAL_GPIO_Init+0x2d0>)
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	60cb      	str	r3, [r1, #12]
 8003ce4:	e021      	b.n	8003d2a <HAL_GPIO_Init+0x2e2>
 8003ce6:	bf00      	nop
 8003ce8:	10320000 	.word	0x10320000
 8003cec:	10310000 	.word	0x10310000
 8003cf0:	10220000 	.word	0x10220000
 8003cf4:	10210000 	.word	0x10210000
 8003cf8:	10120000 	.word	0x10120000
 8003cfc:	10110000 	.word	0x10110000
 8003d00:	40021000 	.word	0x40021000
 8003d04:	40010000 	.word	0x40010000
 8003d08:	40010800 	.word	0x40010800
 8003d0c:	40010c00 	.word	0x40010c00
 8003d10:	40011000 	.word	0x40011000
 8003d14:	40011400 	.word	0x40011400
 8003d18:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003d1c:	4b0b      	ldr	r3, [pc, #44]	; (8003d4c <HAL_GPIO_Init+0x304>)
 8003d1e:	68da      	ldr	r2, [r3, #12]
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	43db      	mvns	r3, r3
 8003d24:	4909      	ldr	r1, [pc, #36]	; (8003d4c <HAL_GPIO_Init+0x304>)
 8003d26:	4013      	ands	r3, r2
 8003d28:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d36:	fa22 f303 	lsr.w	r3, r2, r3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	f47f ae8e 	bne.w	8003a5c <HAL_GPIO_Init+0x14>
  }
}
 8003d40:	bf00      	nop
 8003d42:	bf00      	nop
 8003d44:	372c      	adds	r7, #44	; 0x2c
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bc80      	pop	{r7}
 8003d4a:	4770      	bx	lr
 8003d4c:	40010400 	.word	0x40010400

08003d50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	460b      	mov	r3, r1
 8003d5a:	807b      	strh	r3, [r7, #2]
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d60:	787b      	ldrb	r3, [r7, #1]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d003      	beq.n	8003d6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d66:	887a      	ldrh	r2, [r7, #2]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003d6c:	e003      	b.n	8003d76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003d6e:	887b      	ldrh	r3, [r7, #2]
 8003d70:	041a      	lsls	r2, r3, #16
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	611a      	str	r2, [r3, #16]
}
 8003d76:	bf00      	nop
 8003d78:	370c      	adds	r7, #12
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bc80      	pop	{r7}
 8003d7e:	4770      	bx	lr

08003d80 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	4603      	mov	r3, r0
 8003d88:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003d8a:	4b08      	ldr	r3, [pc, #32]	; (8003dac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d8c:	695a      	ldr	r2, [r3, #20]
 8003d8e:	88fb      	ldrh	r3, [r7, #6]
 8003d90:	4013      	ands	r3, r2
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d006      	beq.n	8003da4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d96:	4a05      	ldr	r2, [pc, #20]	; (8003dac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d98:	88fb      	ldrh	r3, [r7, #6]
 8003d9a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d9c:	88fb      	ldrh	r3, [r7, #6]
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f000 f806 	bl	8003db0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003da4:	bf00      	nop
 8003da6:	3708      	adds	r7, #8
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	40010400 	.word	0x40010400

08003db0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	4603      	mov	r3, r0
 8003db8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003dba:	bf00      	nop
 8003dbc:	370c      	adds	r7, #12
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bc80      	pop	{r7}
 8003dc2:	4770      	bx	lr

08003dc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d101      	bne.n	8003dd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e12b      	b.n	800402e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d106      	bne.n	8003df0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f7fe fe58 	bl	8002aa0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2224      	movs	r2, #36	; 0x24
 8003df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f022 0201 	bic.w	r2, r2, #1
 8003e06:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e16:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e26:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003e28:	f003 f874 	bl	8006f14 <HAL_RCC_GetPCLK1Freq>
 8003e2c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	4a81      	ldr	r2, [pc, #516]	; (8004038 <HAL_I2C_Init+0x274>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d807      	bhi.n	8003e48 <HAL_I2C_Init+0x84>
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	4a80      	ldr	r2, [pc, #512]	; (800403c <HAL_I2C_Init+0x278>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	bf94      	ite	ls
 8003e40:	2301      	movls	r3, #1
 8003e42:	2300      	movhi	r3, #0
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	e006      	b.n	8003e56 <HAL_I2C_Init+0x92>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	4a7d      	ldr	r2, [pc, #500]	; (8004040 <HAL_I2C_Init+0x27c>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	bf94      	ite	ls
 8003e50:	2301      	movls	r3, #1
 8003e52:	2300      	movhi	r3, #0
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e0e7      	b.n	800402e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	4a78      	ldr	r2, [pc, #480]	; (8004044 <HAL_I2C_Init+0x280>)
 8003e62:	fba2 2303 	umull	r2, r3, r2, r3
 8003e66:	0c9b      	lsrs	r3, r3, #18
 8003e68:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68ba      	ldr	r2, [r7, #8]
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	6a1b      	ldr	r3, [r3, #32]
 8003e84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	4a6a      	ldr	r2, [pc, #424]	; (8004038 <HAL_I2C_Init+0x274>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d802      	bhi.n	8003e98 <HAL_I2C_Init+0xd4>
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	3301      	adds	r3, #1
 8003e96:	e009      	b.n	8003eac <HAL_I2C_Init+0xe8>
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003e9e:	fb02 f303 	mul.w	r3, r2, r3
 8003ea2:	4a69      	ldr	r2, [pc, #420]	; (8004048 <HAL_I2C_Init+0x284>)
 8003ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea8:	099b      	lsrs	r3, r3, #6
 8003eaa:	3301      	adds	r3, #1
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	6812      	ldr	r2, [r2, #0]
 8003eb0:	430b      	orrs	r3, r1
 8003eb2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	69db      	ldr	r3, [r3, #28]
 8003eba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003ebe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	495c      	ldr	r1, [pc, #368]	; (8004038 <HAL_I2C_Init+0x274>)
 8003ec8:	428b      	cmp	r3, r1
 8003eca:	d819      	bhi.n	8003f00 <HAL_I2C_Init+0x13c>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	1e59      	subs	r1, r3, #1
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	005b      	lsls	r3, r3, #1
 8003ed6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003eda:	1c59      	adds	r1, r3, #1
 8003edc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003ee0:	400b      	ands	r3, r1
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00a      	beq.n	8003efc <HAL_I2C_Init+0x138>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	1e59      	subs	r1, r3, #1
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	005b      	lsls	r3, r3, #1
 8003ef0:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003efa:	e051      	b.n	8003fa0 <HAL_I2C_Init+0x1dc>
 8003efc:	2304      	movs	r3, #4
 8003efe:	e04f      	b.n	8003fa0 <HAL_I2C_Init+0x1dc>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d111      	bne.n	8003f2c <HAL_I2C_Init+0x168>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	1e58      	subs	r0, r3, #1
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6859      	ldr	r1, [r3, #4]
 8003f10:	460b      	mov	r3, r1
 8003f12:	005b      	lsls	r3, r3, #1
 8003f14:	440b      	add	r3, r1
 8003f16:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	bf0c      	ite	eq
 8003f24:	2301      	moveq	r3, #1
 8003f26:	2300      	movne	r3, #0
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	e012      	b.n	8003f52 <HAL_I2C_Init+0x18e>
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	1e58      	subs	r0, r3, #1
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6859      	ldr	r1, [r3, #4]
 8003f34:	460b      	mov	r3, r1
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	440b      	add	r3, r1
 8003f3a:	0099      	lsls	r1, r3, #2
 8003f3c:	440b      	add	r3, r1
 8003f3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f42:	3301      	adds	r3, #1
 8003f44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	bf0c      	ite	eq
 8003f4c:	2301      	moveq	r3, #1
 8003f4e:	2300      	movne	r3, #0
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d001      	beq.n	8003f5a <HAL_I2C_Init+0x196>
 8003f56:	2301      	movs	r3, #1
 8003f58:	e022      	b.n	8003fa0 <HAL_I2C_Init+0x1dc>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d10e      	bne.n	8003f80 <HAL_I2C_Init+0x1bc>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	1e58      	subs	r0, r3, #1
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6859      	ldr	r1, [r3, #4]
 8003f6a:	460b      	mov	r3, r1
 8003f6c:	005b      	lsls	r3, r3, #1
 8003f6e:	440b      	add	r3, r1
 8003f70:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f74:	3301      	adds	r3, #1
 8003f76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f7e:	e00f      	b.n	8003fa0 <HAL_I2C_Init+0x1dc>
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	1e58      	subs	r0, r3, #1
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6859      	ldr	r1, [r3, #4]
 8003f88:	460b      	mov	r3, r1
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	440b      	add	r3, r1
 8003f8e:	0099      	lsls	r1, r3, #2
 8003f90:	440b      	add	r3, r1
 8003f92:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f96:	3301      	adds	r3, #1
 8003f98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003fa0:	6879      	ldr	r1, [r7, #4]
 8003fa2:	6809      	ldr	r1, [r1, #0]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	69da      	ldr	r2, [r3, #28]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a1b      	ldr	r3, [r3, #32]
 8003fba:	431a      	orrs	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	430a      	orrs	r2, r1
 8003fc2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003fce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	6911      	ldr	r1, [r2, #16]
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	68d2      	ldr	r2, [r2, #12]
 8003fda:	4311      	orrs	r1, r2
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	6812      	ldr	r2, [r2, #0]
 8003fe0:	430b      	orrs	r3, r1
 8003fe2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	695a      	ldr	r2, [r3, #20]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	431a      	orrs	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	430a      	orrs	r2, r1
 8003ffe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f042 0201 	orr.w	r2, r2, #1
 800400e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2220      	movs	r2, #32
 800401a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	000186a0 	.word	0x000186a0
 800403c:	001e847f 	.word	0x001e847f
 8004040:	003d08ff 	.word	0x003d08ff
 8004044:	431bde83 	.word	0x431bde83
 8004048:	10624dd3 	.word	0x10624dd3

0800404c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b088      	sub	sp, #32
 8004050:	af02      	add	r7, sp, #8
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	4608      	mov	r0, r1
 8004056:	4611      	mov	r1, r2
 8004058:	461a      	mov	r2, r3
 800405a:	4603      	mov	r3, r0
 800405c:	817b      	strh	r3, [r7, #10]
 800405e:	460b      	mov	r3, r1
 8004060:	813b      	strh	r3, [r7, #8]
 8004062:	4613      	mov	r3, r2
 8004064:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004066:	f7fe fe4b 	bl	8002d00 <HAL_GetTick>
 800406a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004072:	b2db      	uxtb	r3, r3
 8004074:	2b20      	cmp	r3, #32
 8004076:	f040 80d9 	bne.w	800422c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	9300      	str	r3, [sp, #0]
 800407e:	2319      	movs	r3, #25
 8004080:	2201      	movs	r2, #1
 8004082:	496d      	ldr	r1, [pc, #436]	; (8004238 <HAL_I2C_Mem_Write+0x1ec>)
 8004084:	68f8      	ldr	r0, [r7, #12]
 8004086:	f002 f949 	bl	800631c <I2C_WaitOnFlagUntilTimeout>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d001      	beq.n	8004094 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004090:	2302      	movs	r3, #2
 8004092:	e0cc      	b.n	800422e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800409a:	2b01      	cmp	r3, #1
 800409c:	d101      	bne.n	80040a2 <HAL_I2C_Mem_Write+0x56>
 800409e:	2302      	movs	r3, #2
 80040a0:	e0c5      	b.n	800422e <HAL_I2C_Mem_Write+0x1e2>
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2201      	movs	r2, #1
 80040a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0301 	and.w	r3, r3, #1
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d007      	beq.n	80040c8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f042 0201 	orr.w	r2, r2, #1
 80040c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2221      	movs	r2, #33	; 0x21
 80040dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2240      	movs	r2, #64	; 0x40
 80040e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6a3a      	ldr	r2, [r7, #32]
 80040f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80040f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040fe:	b29a      	uxth	r2, r3
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	4a4d      	ldr	r2, [pc, #308]	; (800423c <HAL_I2C_Mem_Write+0x1f0>)
 8004108:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800410a:	88f8      	ldrh	r0, [r7, #6]
 800410c:	893a      	ldrh	r2, [r7, #8]
 800410e:	8979      	ldrh	r1, [r7, #10]
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	9301      	str	r3, [sp, #4]
 8004114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004116:	9300      	str	r3, [sp, #0]
 8004118:	4603      	mov	r3, r0
 800411a:	68f8      	ldr	r0, [r7, #12]
 800411c:	f001 fed8 	bl	8005ed0 <I2C_RequestMemoryWrite>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d052      	beq.n	80041cc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e081      	b.n	800422e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800412e:	68f8      	ldr	r0, [r7, #12]
 8004130:	f002 f9ca 	bl	80064c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00d      	beq.n	8004156 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413e:	2b04      	cmp	r3, #4
 8004140:	d107      	bne.n	8004152 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004150:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e06b      	b.n	800422e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415a:	781a      	ldrb	r2, [r3, #0]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004166:	1c5a      	adds	r2, r3, #1
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004170:	3b01      	subs	r3, #1
 8004172:	b29a      	uxth	r2, r3
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800417c:	b29b      	uxth	r3, r3
 800417e:	3b01      	subs	r3, #1
 8004180:	b29a      	uxth	r2, r3
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	695b      	ldr	r3, [r3, #20]
 800418c:	f003 0304 	and.w	r3, r3, #4
 8004190:	2b04      	cmp	r3, #4
 8004192:	d11b      	bne.n	80041cc <HAL_I2C_Mem_Write+0x180>
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004198:	2b00      	cmp	r3, #0
 800419a:	d017      	beq.n	80041cc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a0:	781a      	ldrb	r2, [r3, #0]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ac:	1c5a      	adds	r2, r3, #1
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041b6:	3b01      	subs	r3, #1
 80041b8:	b29a      	uxth	r2, r3
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	3b01      	subs	r3, #1
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d1aa      	bne.n	800412a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041d4:	697a      	ldr	r2, [r7, #20]
 80041d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041d8:	68f8      	ldr	r0, [r7, #12]
 80041da:	f002 f9b6 	bl	800654a <I2C_WaitOnBTFFlagUntilTimeout>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d00d      	beq.n	8004200 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e8:	2b04      	cmp	r3, #4
 80041ea:	d107      	bne.n	80041fc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041fa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e016      	b.n	800422e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800420e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2220      	movs	r2, #32
 8004214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2200      	movs	r2, #0
 800421c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2200      	movs	r2, #0
 8004224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004228:	2300      	movs	r3, #0
 800422a:	e000      	b.n	800422e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800422c:	2302      	movs	r3, #2
  }
}
 800422e:	4618      	mov	r0, r3
 8004230:	3718      	adds	r7, #24
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	00100002 	.word	0x00100002
 800423c:	ffff0000 	.word	0xffff0000

08004240 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b08c      	sub	sp, #48	; 0x30
 8004244:	af02      	add	r7, sp, #8
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	4608      	mov	r0, r1
 800424a:	4611      	mov	r1, r2
 800424c:	461a      	mov	r2, r3
 800424e:	4603      	mov	r3, r0
 8004250:	817b      	strh	r3, [r7, #10]
 8004252:	460b      	mov	r3, r1
 8004254:	813b      	strh	r3, [r7, #8]
 8004256:	4613      	mov	r3, r2
 8004258:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800425a:	2300      	movs	r3, #0
 800425c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800425e:	f7fe fd4f 	bl	8002d00 <HAL_GetTick>
 8004262:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800426a:	b2db      	uxtb	r3, r3
 800426c:	2b20      	cmp	r3, #32
 800426e:	f040 8244 	bne.w	80046fa <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004274:	9300      	str	r3, [sp, #0]
 8004276:	2319      	movs	r3, #25
 8004278:	2201      	movs	r2, #1
 800427a:	4982      	ldr	r1, [pc, #520]	; (8004484 <HAL_I2C_Mem_Read+0x244>)
 800427c:	68f8      	ldr	r0, [r7, #12]
 800427e:	f002 f84d 	bl	800631c <I2C_WaitOnFlagUntilTimeout>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d001      	beq.n	800428c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004288:	2302      	movs	r3, #2
 800428a:	e237      	b.n	80046fc <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004292:	2b01      	cmp	r3, #1
 8004294:	d101      	bne.n	800429a <HAL_I2C_Mem_Read+0x5a>
 8004296:	2302      	movs	r3, #2
 8004298:	e230      	b.n	80046fc <HAL_I2C_Mem_Read+0x4bc>
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2201      	movs	r2, #1
 800429e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0301 	and.w	r3, r3, #1
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d007      	beq.n	80042c0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f042 0201 	orr.w	r2, r2, #1
 80042be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2222      	movs	r2, #34	; 0x22
 80042d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2240      	movs	r2, #64	; 0x40
 80042dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2200      	movs	r2, #0
 80042e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80042f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f6:	b29a      	uxth	r2, r3
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	4a62      	ldr	r2, [pc, #392]	; (8004488 <HAL_I2C_Mem_Read+0x248>)
 8004300:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004302:	88f8      	ldrh	r0, [r7, #6]
 8004304:	893a      	ldrh	r2, [r7, #8]
 8004306:	8979      	ldrh	r1, [r7, #10]
 8004308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430a:	9301      	str	r3, [sp, #4]
 800430c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800430e:	9300      	str	r3, [sp, #0]
 8004310:	4603      	mov	r3, r0
 8004312:	68f8      	ldr	r0, [r7, #12]
 8004314:	f001 fe72 	bl	8005ffc <I2C_RequestMemoryRead>
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d001      	beq.n	8004322 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e1ec      	b.n	80046fc <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004326:	2b00      	cmp	r3, #0
 8004328:	d113      	bne.n	8004352 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800432a:	2300      	movs	r3, #0
 800432c:	61fb      	str	r3, [r7, #28]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	695b      	ldr	r3, [r3, #20]
 8004334:	61fb      	str	r3, [r7, #28]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	61fb      	str	r3, [r7, #28]
 800433e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800434e:	601a      	str	r2, [r3, #0]
 8004350:	e1c0      	b.n	80046d4 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004356:	2b01      	cmp	r3, #1
 8004358:	d11e      	bne.n	8004398 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004368:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800436a:	b672      	cpsid	i
}
 800436c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800436e:	2300      	movs	r3, #0
 8004370:	61bb      	str	r3, [r7, #24]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	695b      	ldr	r3, [r3, #20]
 8004378:	61bb      	str	r3, [r7, #24]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	699b      	ldr	r3, [r3, #24]
 8004380:	61bb      	str	r3, [r7, #24]
 8004382:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004392:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004394:	b662      	cpsie	i
}
 8004396:	e035      	b.n	8004404 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800439c:	2b02      	cmp	r3, #2
 800439e:	d11e      	bne.n	80043de <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043ae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80043b0:	b672      	cpsid	i
}
 80043b2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043b4:	2300      	movs	r3, #0
 80043b6:	617b      	str	r3, [r7, #20]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	617b      	str	r3, [r7, #20]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	617b      	str	r3, [r7, #20]
 80043c8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043d8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80043da:	b662      	cpsie	i
}
 80043dc:	e012      	b.n	8004404 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80043ec:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043ee:	2300      	movs	r3, #0
 80043f0:	613b      	str	r3, [r7, #16]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	695b      	ldr	r3, [r3, #20]
 80043f8:	613b      	str	r3, [r7, #16]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	699b      	ldr	r3, [r3, #24]
 8004400:	613b      	str	r3, [r7, #16]
 8004402:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004404:	e166      	b.n	80046d4 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800440a:	2b03      	cmp	r3, #3
 800440c:	f200 811f 	bhi.w	800464e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004414:	2b01      	cmp	r3, #1
 8004416:	d123      	bne.n	8004460 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800441a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800441c:	68f8      	ldr	r0, [r7, #12]
 800441e:	f002 f907 	bl	8006630 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d001      	beq.n	800442c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e167      	b.n	80046fc <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	691a      	ldr	r2, [r3, #16]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004436:	b2d2      	uxtb	r2, r2
 8004438:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443e:	1c5a      	adds	r2, r3, #1
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004448:	3b01      	subs	r3, #1
 800444a:	b29a      	uxth	r2, r3
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004454:	b29b      	uxth	r3, r3
 8004456:	3b01      	subs	r3, #1
 8004458:	b29a      	uxth	r2, r3
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800445e:	e139      	b.n	80046d4 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004464:	2b02      	cmp	r3, #2
 8004466:	d152      	bne.n	800450e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446a:	9300      	str	r3, [sp, #0]
 800446c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800446e:	2200      	movs	r2, #0
 8004470:	4906      	ldr	r1, [pc, #24]	; (800448c <HAL_I2C_Mem_Read+0x24c>)
 8004472:	68f8      	ldr	r0, [r7, #12]
 8004474:	f001 ff52 	bl	800631c <I2C_WaitOnFlagUntilTimeout>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d008      	beq.n	8004490 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e13c      	b.n	80046fc <HAL_I2C_Mem_Read+0x4bc>
 8004482:	bf00      	nop
 8004484:	00100002 	.word	0x00100002
 8004488:	ffff0000 	.word	0xffff0000
 800448c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004490:	b672      	cpsid	i
}
 8004492:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	691a      	ldr	r2, [r3, #16]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ae:	b2d2      	uxtb	r2, r2
 80044b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b6:	1c5a      	adds	r2, r3, #1
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044c0:	3b01      	subs	r3, #1
 80044c2:	b29a      	uxth	r2, r3
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	3b01      	subs	r3, #1
 80044d0:	b29a      	uxth	r2, r3
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80044d6:	b662      	cpsie	i
}
 80044d8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	691a      	ldr	r2, [r3, #16]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e4:	b2d2      	uxtb	r2, r2
 80044e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ec:	1c5a      	adds	r2, r3, #1
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044f6:	3b01      	subs	r3, #1
 80044f8:	b29a      	uxth	r2, r3
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004502:	b29b      	uxth	r3, r3
 8004504:	3b01      	subs	r3, #1
 8004506:	b29a      	uxth	r2, r3
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800450c:	e0e2      	b.n	80046d4 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800450e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004510:	9300      	str	r3, [sp, #0]
 8004512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004514:	2200      	movs	r2, #0
 8004516:	497b      	ldr	r1, [pc, #492]	; (8004704 <HAL_I2C_Mem_Read+0x4c4>)
 8004518:	68f8      	ldr	r0, [r7, #12]
 800451a:	f001 feff 	bl	800631c <I2C_WaitOnFlagUntilTimeout>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d001      	beq.n	8004528 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e0e9      	b.n	80046fc <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004536:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004538:	b672      	cpsid	i
}
 800453a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	691a      	ldr	r2, [r3, #16]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004546:	b2d2      	uxtb	r2, r2
 8004548:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454e:	1c5a      	adds	r2, r3, #1
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004558:	3b01      	subs	r3, #1
 800455a:	b29a      	uxth	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004564:	b29b      	uxth	r3, r3
 8004566:	3b01      	subs	r3, #1
 8004568:	b29a      	uxth	r2, r3
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800456e:	4b66      	ldr	r3, [pc, #408]	; (8004708 <HAL_I2C_Mem_Read+0x4c8>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	08db      	lsrs	r3, r3, #3
 8004574:	4a65      	ldr	r2, [pc, #404]	; (800470c <HAL_I2C_Mem_Read+0x4cc>)
 8004576:	fba2 2303 	umull	r2, r3, r2, r3
 800457a:	0a1a      	lsrs	r2, r3, #8
 800457c:	4613      	mov	r3, r2
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	4413      	add	r3, r2
 8004582:	00da      	lsls	r2, r3, #3
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004588:	6a3b      	ldr	r3, [r7, #32]
 800458a:	3b01      	subs	r3, #1
 800458c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800458e:	6a3b      	ldr	r3, [r7, #32]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d118      	bne.n	80045c6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2200      	movs	r2, #0
 8004598:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2220      	movs	r2, #32
 800459e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ae:	f043 0220 	orr.w	r2, r3, #32
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80045b6:	b662      	cpsie	i
}
 80045b8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e09a      	b.n	80046fc <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	695b      	ldr	r3, [r3, #20]
 80045cc:	f003 0304 	and.w	r3, r3, #4
 80045d0:	2b04      	cmp	r3, #4
 80045d2:	d1d9      	bne.n	8004588 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	691a      	ldr	r2, [r3, #16]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ee:	b2d2      	uxtb	r2, r2
 80045f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f6:	1c5a      	adds	r2, r3, #1
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004600:	3b01      	subs	r3, #1
 8004602:	b29a      	uxth	r2, r3
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800460c:	b29b      	uxth	r3, r3
 800460e:	3b01      	subs	r3, #1
 8004610:	b29a      	uxth	r2, r3
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004616:	b662      	cpsie	i
}
 8004618:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	691a      	ldr	r2, [r3, #16]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004624:	b2d2      	uxtb	r2, r2
 8004626:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462c:	1c5a      	adds	r2, r3, #1
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004636:	3b01      	subs	r3, #1
 8004638:	b29a      	uxth	r2, r3
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004642:	b29b      	uxth	r3, r3
 8004644:	3b01      	subs	r3, #1
 8004646:	b29a      	uxth	r2, r3
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800464c:	e042      	b.n	80046d4 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800464e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004650:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004652:	68f8      	ldr	r0, [r7, #12]
 8004654:	f001 ffec 	bl	8006630 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d001      	beq.n	8004662 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e04c      	b.n	80046fc <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	691a      	ldr	r2, [r3, #16]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466c:	b2d2      	uxtb	r2, r2
 800466e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004674:	1c5a      	adds	r2, r3, #1
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800467e:	3b01      	subs	r3, #1
 8004680:	b29a      	uxth	r2, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800468a:	b29b      	uxth	r3, r3
 800468c:	3b01      	subs	r3, #1
 800468e:	b29a      	uxth	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	695b      	ldr	r3, [r3, #20]
 800469a:	f003 0304 	and.w	r3, r3, #4
 800469e:	2b04      	cmp	r3, #4
 80046a0:	d118      	bne.n	80046d4 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	691a      	ldr	r2, [r3, #16]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ac:	b2d2      	uxtb	r2, r2
 80046ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b4:	1c5a      	adds	r2, r3, #1
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046be:	3b01      	subs	r3, #1
 80046c0:	b29a      	uxth	r2, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	3b01      	subs	r3, #1
 80046ce:	b29a      	uxth	r2, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046d8:	2b00      	cmp	r3, #0
 80046da:	f47f ae94 	bne.w	8004406 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2220      	movs	r2, #32
 80046e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80046f6:	2300      	movs	r3, #0
 80046f8:	e000      	b.n	80046fc <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80046fa:	2302      	movs	r3, #2
  }
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3728      	adds	r7, #40	; 0x28
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}
 8004704:	00010004 	.word	0x00010004
 8004708:	20000000 	.word	0x20000000
 800470c:	14f8b589 	.word	0x14f8b589

08004710 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b088      	sub	sp, #32
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004718:	2300      	movs	r3, #0
 800471a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004728:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004730:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004738:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800473a:	7bfb      	ldrb	r3, [r7, #15]
 800473c:	2b10      	cmp	r3, #16
 800473e:	d003      	beq.n	8004748 <HAL_I2C_EV_IRQHandler+0x38>
 8004740:	7bfb      	ldrb	r3, [r7, #15]
 8004742:	2b40      	cmp	r3, #64	; 0x40
 8004744:	f040 80c1 	bne.w	80048ca <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	695b      	ldr	r3, [r3, #20]
 8004756:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	f003 0301 	and.w	r3, r3, #1
 800475e:	2b00      	cmp	r3, #0
 8004760:	d10d      	bne.n	800477e <HAL_I2C_EV_IRQHandler+0x6e>
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004768:	d003      	beq.n	8004772 <HAL_I2C_EV_IRQHandler+0x62>
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004770:	d101      	bne.n	8004776 <HAL_I2C_EV_IRQHandler+0x66>
 8004772:	2301      	movs	r3, #1
 8004774:	e000      	b.n	8004778 <HAL_I2C_EV_IRQHandler+0x68>
 8004776:	2300      	movs	r3, #0
 8004778:	2b01      	cmp	r3, #1
 800477a:	f000 8132 	beq.w	80049e2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	f003 0301 	and.w	r3, r3, #1
 8004784:	2b00      	cmp	r3, #0
 8004786:	d00c      	beq.n	80047a2 <HAL_I2C_EV_IRQHandler+0x92>
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	0a5b      	lsrs	r3, r3, #9
 800478c:	f003 0301 	and.w	r3, r3, #1
 8004790:	2b00      	cmp	r3, #0
 8004792:	d006      	beq.n	80047a2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f001 ffcf 	bl	8006738 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 fd77 	bl	800528e <I2C_Master_SB>
 80047a0:	e092      	b.n	80048c8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	08db      	lsrs	r3, r3, #3
 80047a6:	f003 0301 	and.w	r3, r3, #1
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d009      	beq.n	80047c2 <HAL_I2C_EV_IRQHandler+0xb2>
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	0a5b      	lsrs	r3, r3, #9
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d003      	beq.n	80047c2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 fdec 	bl	8005398 <I2C_Master_ADD10>
 80047c0:	e082      	b.n	80048c8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	085b      	lsrs	r3, r3, #1
 80047c6:	f003 0301 	and.w	r3, r3, #1
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d009      	beq.n	80047e2 <HAL_I2C_EV_IRQHandler+0xd2>
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	0a5b      	lsrs	r3, r3, #9
 80047d2:	f003 0301 	and.w	r3, r3, #1
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d003      	beq.n	80047e2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 fe05 	bl	80053ea <I2C_Master_ADDR>
 80047e0:	e072      	b.n	80048c8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	089b      	lsrs	r3, r3, #2
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d03b      	beq.n	8004866 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047fc:	f000 80f3 	beq.w	80049e6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	09db      	lsrs	r3, r3, #7
 8004804:	f003 0301 	and.w	r3, r3, #1
 8004808:	2b00      	cmp	r3, #0
 800480a:	d00f      	beq.n	800482c <HAL_I2C_EV_IRQHandler+0x11c>
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	0a9b      	lsrs	r3, r3, #10
 8004810:	f003 0301 	and.w	r3, r3, #1
 8004814:	2b00      	cmp	r3, #0
 8004816:	d009      	beq.n	800482c <HAL_I2C_EV_IRQHandler+0x11c>
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	089b      	lsrs	r3, r3, #2
 800481c:	f003 0301 	and.w	r3, r3, #1
 8004820:	2b00      	cmp	r3, #0
 8004822:	d103      	bne.n	800482c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f000 f9f1 	bl	8004c0c <I2C_MasterTransmit_TXE>
 800482a:	e04d      	b.n	80048c8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	089b      	lsrs	r3, r3, #2
 8004830:	f003 0301 	and.w	r3, r3, #1
 8004834:	2b00      	cmp	r3, #0
 8004836:	f000 80d6 	beq.w	80049e6 <HAL_I2C_EV_IRQHandler+0x2d6>
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	0a5b      	lsrs	r3, r3, #9
 800483e:	f003 0301 	and.w	r3, r3, #1
 8004842:	2b00      	cmp	r3, #0
 8004844:	f000 80cf 	beq.w	80049e6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004848:	7bbb      	ldrb	r3, [r7, #14]
 800484a:	2b21      	cmp	r3, #33	; 0x21
 800484c:	d103      	bne.n	8004856 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 fa78 	bl	8004d44 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004854:	e0c7      	b.n	80049e6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004856:	7bfb      	ldrb	r3, [r7, #15]
 8004858:	2b40      	cmp	r3, #64	; 0x40
 800485a:	f040 80c4 	bne.w	80049e6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 fae6 	bl	8004e30 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004864:	e0bf      	b.n	80049e6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004870:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004874:	f000 80b7 	beq.w	80049e6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	099b      	lsrs	r3, r3, #6
 800487c:	f003 0301 	and.w	r3, r3, #1
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00f      	beq.n	80048a4 <HAL_I2C_EV_IRQHandler+0x194>
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	0a9b      	lsrs	r3, r3, #10
 8004888:	f003 0301 	and.w	r3, r3, #1
 800488c:	2b00      	cmp	r3, #0
 800488e:	d009      	beq.n	80048a4 <HAL_I2C_EV_IRQHandler+0x194>
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	089b      	lsrs	r3, r3, #2
 8004894:	f003 0301 	and.w	r3, r3, #1
 8004898:	2b00      	cmp	r3, #0
 800489a:	d103      	bne.n	80048a4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 fb5b 	bl	8004f58 <I2C_MasterReceive_RXNE>
 80048a2:	e011      	b.n	80048c8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	089b      	lsrs	r3, r3, #2
 80048a8:	f003 0301 	and.w	r3, r3, #1
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f000 809a 	beq.w	80049e6 <HAL_I2C_EV_IRQHandler+0x2d6>
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	0a5b      	lsrs	r3, r3, #9
 80048b6:	f003 0301 	and.w	r3, r3, #1
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	f000 8093 	beq.w	80049e6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f000 fbfa 	bl	80050ba <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048c6:	e08e      	b.n	80049e6 <HAL_I2C_EV_IRQHandler+0x2d6>
 80048c8:	e08d      	b.n	80049e6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d004      	beq.n	80048dc <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	695b      	ldr	r3, [r3, #20]
 80048d8:	61fb      	str	r3, [r7, #28]
 80048da:	e007      	b.n	80048ec <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	085b      	lsrs	r3, r3, #1
 80048f0:	f003 0301 	and.w	r3, r3, #1
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d012      	beq.n	800491e <HAL_I2C_EV_IRQHandler+0x20e>
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	0a5b      	lsrs	r3, r3, #9
 80048fc:	f003 0301 	and.w	r3, r3, #1
 8004900:	2b00      	cmp	r3, #0
 8004902:	d00c      	beq.n	800491e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004908:	2b00      	cmp	r3, #0
 800490a:	d003      	beq.n	8004914 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	699b      	ldr	r3, [r3, #24]
 8004912:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004914:	69b9      	ldr	r1, [r7, #24]
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 ffbe 	bl	8005898 <I2C_Slave_ADDR>
 800491c:	e066      	b.n	80049ec <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	091b      	lsrs	r3, r3, #4
 8004922:	f003 0301 	and.w	r3, r3, #1
 8004926:	2b00      	cmp	r3, #0
 8004928:	d009      	beq.n	800493e <HAL_I2C_EV_IRQHandler+0x22e>
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	0a5b      	lsrs	r3, r3, #9
 800492e:	f003 0301 	and.w	r3, r3, #1
 8004932:	2b00      	cmp	r3, #0
 8004934:	d003      	beq.n	800493e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 fff8 	bl	800592c <I2C_Slave_STOPF>
 800493c:	e056      	b.n	80049ec <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800493e:	7bbb      	ldrb	r3, [r7, #14]
 8004940:	2b21      	cmp	r3, #33	; 0x21
 8004942:	d002      	beq.n	800494a <HAL_I2C_EV_IRQHandler+0x23a>
 8004944:	7bbb      	ldrb	r3, [r7, #14]
 8004946:	2b29      	cmp	r3, #41	; 0x29
 8004948:	d125      	bne.n	8004996 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	09db      	lsrs	r3, r3, #7
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00f      	beq.n	8004976 <HAL_I2C_EV_IRQHandler+0x266>
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	0a9b      	lsrs	r3, r3, #10
 800495a:	f003 0301 	and.w	r3, r3, #1
 800495e:	2b00      	cmp	r3, #0
 8004960:	d009      	beq.n	8004976 <HAL_I2C_EV_IRQHandler+0x266>
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	089b      	lsrs	r3, r3, #2
 8004966:	f003 0301 	and.w	r3, r3, #1
 800496a:	2b00      	cmp	r3, #0
 800496c:	d103      	bne.n	8004976 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 fed6 	bl	8005720 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004974:	e039      	b.n	80049ea <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	089b      	lsrs	r3, r3, #2
 800497a:	f003 0301 	and.w	r3, r3, #1
 800497e:	2b00      	cmp	r3, #0
 8004980:	d033      	beq.n	80049ea <HAL_I2C_EV_IRQHandler+0x2da>
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	0a5b      	lsrs	r3, r3, #9
 8004986:	f003 0301 	and.w	r3, r3, #1
 800498a:	2b00      	cmp	r3, #0
 800498c:	d02d      	beq.n	80049ea <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 ff03 	bl	800579a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004994:	e029      	b.n	80049ea <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	099b      	lsrs	r3, r3, #6
 800499a:	f003 0301 	and.w	r3, r3, #1
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d00f      	beq.n	80049c2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	0a9b      	lsrs	r3, r3, #10
 80049a6:	f003 0301 	and.w	r3, r3, #1
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d009      	beq.n	80049c2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	089b      	lsrs	r3, r3, #2
 80049b2:	f003 0301 	and.w	r3, r3, #1
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d103      	bne.n	80049c2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 ff0d 	bl	80057da <I2C_SlaveReceive_RXNE>
 80049c0:	e014      	b.n	80049ec <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	089b      	lsrs	r3, r3, #2
 80049c6:	f003 0301 	and.w	r3, r3, #1
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00e      	beq.n	80049ec <HAL_I2C_EV_IRQHandler+0x2dc>
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	0a5b      	lsrs	r3, r3, #9
 80049d2:	f003 0301 	and.w	r3, r3, #1
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d008      	beq.n	80049ec <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 ff3b 	bl	8005856 <I2C_SlaveReceive_BTF>
 80049e0:	e004      	b.n	80049ec <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80049e2:	bf00      	nop
 80049e4:	e002      	b.n	80049ec <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80049e6:	bf00      	nop
 80049e8:	e000      	b.n	80049ec <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80049ea:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80049ec:	3720      	adds	r7, #32
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}

080049f2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80049f2:	b580      	push	{r7, lr}
 80049f4:	b08a      	sub	sp, #40	; 0x28
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	695b      	ldr	r3, [r3, #20]
 8004a00:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a14:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004a16:	6a3b      	ldr	r3, [r7, #32]
 8004a18:	0a1b      	lsrs	r3, r3, #8
 8004a1a:	f003 0301 	and.w	r3, r3, #1
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d016      	beq.n	8004a50 <HAL_I2C_ER_IRQHandler+0x5e>
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	0a1b      	lsrs	r3, r3, #8
 8004a26:	f003 0301 	and.w	r3, r3, #1
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d010      	beq.n	8004a50 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a30:	f043 0301 	orr.w	r3, r3, #1
 8004a34:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004a3e:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a4e:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004a50:	6a3b      	ldr	r3, [r7, #32]
 8004a52:	0a5b      	lsrs	r3, r3, #9
 8004a54:	f003 0301 	and.w	r3, r3, #1
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d00e      	beq.n	8004a7a <HAL_I2C_ER_IRQHandler+0x88>
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	0a1b      	lsrs	r3, r3, #8
 8004a60:	f003 0301 	and.w	r3, r3, #1
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d008      	beq.n	8004a7a <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6a:	f043 0302 	orr.w	r3, r3, #2
 8004a6e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004a78:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004a7a:	6a3b      	ldr	r3, [r7, #32]
 8004a7c:	0a9b      	lsrs	r3, r3, #10
 8004a7e:	f003 0301 	and.w	r3, r3, #1
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d03f      	beq.n	8004b06 <HAL_I2C_ER_IRQHandler+0x114>
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	0a1b      	lsrs	r3, r3, #8
 8004a8a:	f003 0301 	and.w	r3, r3, #1
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d039      	beq.n	8004b06 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8004a92:	7efb      	ldrb	r3, [r7, #27]
 8004a94:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aa4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aaa:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004aac:	7ebb      	ldrb	r3, [r7, #26]
 8004aae:	2b20      	cmp	r3, #32
 8004ab0:	d112      	bne.n	8004ad8 <HAL_I2C_ER_IRQHandler+0xe6>
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d10f      	bne.n	8004ad8 <HAL_I2C_ER_IRQHandler+0xe6>
 8004ab8:	7cfb      	ldrb	r3, [r7, #19]
 8004aba:	2b21      	cmp	r3, #33	; 0x21
 8004abc:	d008      	beq.n	8004ad0 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004abe:	7cfb      	ldrb	r3, [r7, #19]
 8004ac0:	2b29      	cmp	r3, #41	; 0x29
 8004ac2:	d005      	beq.n	8004ad0 <HAL_I2C_ER_IRQHandler+0xde>
 8004ac4:	7cfb      	ldrb	r3, [r7, #19]
 8004ac6:	2b28      	cmp	r3, #40	; 0x28
 8004ac8:	d106      	bne.n	8004ad8 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2b21      	cmp	r3, #33	; 0x21
 8004ace:	d103      	bne.n	8004ad8 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f001 f85b 	bl	8005b8c <I2C_Slave_AF>
 8004ad6:	e016      	b.n	8004b06 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ae0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae4:	f043 0304 	orr.w	r3, r3, #4
 8004ae8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004aea:	7efb      	ldrb	r3, [r7, #27]
 8004aec:	2b10      	cmp	r3, #16
 8004aee:	d002      	beq.n	8004af6 <HAL_I2C_ER_IRQHandler+0x104>
 8004af0:	7efb      	ldrb	r3, [r7, #27]
 8004af2:	2b40      	cmp	r3, #64	; 0x40
 8004af4:	d107      	bne.n	8004b06 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b04:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004b06:	6a3b      	ldr	r3, [r7, #32]
 8004b08:	0adb      	lsrs	r3, r3, #11
 8004b0a:	f003 0301 	and.w	r3, r3, #1
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d00e      	beq.n	8004b30 <HAL_I2C_ER_IRQHandler+0x13e>
 8004b12:	69fb      	ldr	r3, [r7, #28]
 8004b14:	0a1b      	lsrs	r3, r3, #8
 8004b16:	f003 0301 	and.w	r3, r3, #1
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d008      	beq.n	8004b30 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b20:	f043 0308 	orr.w	r3, r3, #8
 8004b24:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004b2e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d008      	beq.n	8004b48 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3c:	431a      	orrs	r2, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f001 f892 	bl	8005c6c <I2C_ITError>
  }
}
 8004b48:	bf00      	nop
 8004b4a:	3728      	adds	r7, #40	; 0x28
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b083      	sub	sp, #12
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004b58:	bf00      	nop
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bc80      	pop	{r7}
 8004b60:	4770      	bx	lr

08004b62 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b62:	b480      	push	{r7}
 8004b64:	b083      	sub	sp, #12
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004b6a:	bf00      	nop
 8004b6c:	370c      	adds	r7, #12
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bc80      	pop	{r7}
 8004b72:	4770      	bx	lr

08004b74 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004b7c:	bf00      	nop
 8004b7e:	370c      	adds	r7, #12
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bc80      	pop	{r7}
 8004b84:	4770      	bx	lr

08004b86 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b86:	b480      	push	{r7}
 8004b88:	b083      	sub	sp, #12
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004b8e:	bf00      	nop
 8004b90:	370c      	adds	r7, #12
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bc80      	pop	{r7}
 8004b96:	4770      	bx	lr

08004b98 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	70fb      	strb	r3, [r7, #3]
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004ba8:	bf00      	nop
 8004baa:	370c      	adds	r7, #12
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bc80      	pop	{r7}
 8004bb0:	4770      	bx	lr

08004bb2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004bb2:	b480      	push	{r7}
 8004bb4:	b083      	sub	sp, #12
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004bba:	bf00      	nop
 8004bbc:	370c      	adds	r7, #12
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bc80      	pop	{r7}
 8004bc2:	4770      	bx	lr

08004bc4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004bcc:	bf00      	nop
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bc80      	pop	{r7}
 8004bd4:	4770      	bx	lr

08004bd6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	b083      	sub	sp, #12
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004bde:	bf00      	nop
 8004be0:	370c      	adds	r7, #12
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bc80      	pop	{r7}
 8004be6:	4770      	bx	lr

08004be8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004bf0:	bf00      	nop
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bc80      	pop	{r7}
 8004bf8:	4770      	bx	lr

08004bfa <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004bfa:	b480      	push	{r7}
 8004bfc:	b083      	sub	sp, #12
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004c02:	bf00      	nop
 8004c04:	370c      	adds	r7, #12
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bc80      	pop	{r7}
 8004c0a:	4770      	bx	lr

08004c0c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c1a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c22:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c28:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d150      	bne.n	8004cd4 <I2C_MasterTransmit_TXE+0xc8>
 8004c32:	7bfb      	ldrb	r3, [r7, #15]
 8004c34:	2b21      	cmp	r3, #33	; 0x21
 8004c36:	d14d      	bne.n	8004cd4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	2b08      	cmp	r3, #8
 8004c3c:	d01d      	beq.n	8004c7a <I2C_MasterTransmit_TXE+0x6e>
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	2b20      	cmp	r3, #32
 8004c42:	d01a      	beq.n	8004c7a <I2C_MasterTransmit_TXE+0x6e>
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c4a:	d016      	beq.n	8004c7a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	685a      	ldr	r2, [r3, #4]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c5a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2211      	movs	r2, #17
 8004c60:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2220      	movs	r2, #32
 8004c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f7ff ff6c 	bl	8004b50 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c78:	e060      	b.n	8004d3c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	685a      	ldr	r2, [r3, #4]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c88:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c98:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	2b40      	cmp	r3, #64	; 0x40
 8004cb2:	d107      	bne.n	8004cc4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f7ff ff81 	bl	8004bc4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004cc2:	e03b      	b.n	8004d3c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f7ff ff3f 	bl	8004b50 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004cd2:	e033      	b.n	8004d3c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004cd4:	7bfb      	ldrb	r3, [r7, #15]
 8004cd6:	2b21      	cmp	r3, #33	; 0x21
 8004cd8:	d005      	beq.n	8004ce6 <I2C_MasterTransmit_TXE+0xda>
 8004cda:	7bbb      	ldrb	r3, [r7, #14]
 8004cdc:	2b40      	cmp	r3, #64	; 0x40
 8004cde:	d12d      	bne.n	8004d3c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004ce0:	7bfb      	ldrb	r3, [r7, #15]
 8004ce2:	2b22      	cmp	r3, #34	; 0x22
 8004ce4:	d12a      	bne.n	8004d3c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d108      	bne.n	8004d02 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	685a      	ldr	r2, [r3, #4]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cfe:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004d00:	e01c      	b.n	8004d3c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	2b40      	cmp	r3, #64	; 0x40
 8004d0c:	d103      	bne.n	8004d16 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 f88e 	bl	8004e30 <I2C_MemoryTransmit_TXE_BTF>
}
 8004d14:	e012      	b.n	8004d3c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1a:	781a      	ldrb	r2, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d26:	1c5a      	adds	r2, r3, #1
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	3b01      	subs	r3, #1
 8004d34:	b29a      	uxth	r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004d3a:	e7ff      	b.n	8004d3c <I2C_MasterTransmit_TXE+0x130>
 8004d3c:	bf00      	nop
 8004d3e:	3710      	adds	r7, #16
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d50:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	2b21      	cmp	r3, #33	; 0x21
 8004d5c:	d164      	bne.n	8004e28 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d012      	beq.n	8004d8e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6c:	781a      	ldrb	r2, [r3, #0]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d78:	1c5a      	adds	r2, r3, #1
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	3b01      	subs	r3, #1
 8004d86:	b29a      	uxth	r2, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004d8c:	e04c      	b.n	8004e28 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2b08      	cmp	r3, #8
 8004d92:	d01d      	beq.n	8004dd0 <I2C_MasterTransmit_BTF+0x8c>
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2b20      	cmp	r3, #32
 8004d98:	d01a      	beq.n	8004dd0 <I2C_MasterTransmit_BTF+0x8c>
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004da0:	d016      	beq.n	8004dd0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	685a      	ldr	r2, [r3, #4]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004db0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2211      	movs	r2, #17
 8004db6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2220      	movs	r2, #32
 8004dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f7ff fec1 	bl	8004b50 <HAL_I2C_MasterTxCpltCallback>
}
 8004dce:	e02b      	b.n	8004e28 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	685a      	ldr	r2, [r3, #4]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004dde:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dee:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2220      	movs	r2, #32
 8004dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	2b40      	cmp	r3, #64	; 0x40
 8004e08:	d107      	bne.n	8004e1a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f7ff fed6 	bl	8004bc4 <HAL_I2C_MemTxCpltCallback>
}
 8004e18:	e006      	b.n	8004e28 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f7ff fe94 	bl	8004b50 <HAL_I2C_MasterTxCpltCallback>
}
 8004e28:	bf00      	nop
 8004e2a:	3710      	adds	r7, #16
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e3e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d11d      	bne.n	8004e84 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d10b      	bne.n	8004e68 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e54:	b2da      	uxtb	r2, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e60:	1c9a      	adds	r2, r3, #2
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004e66:	e073      	b.n	8004f50 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	121b      	asrs	r3, r3, #8
 8004e70:	b2da      	uxtb	r2, r3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e7c:	1c5a      	adds	r2, r3, #1
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004e82:	e065      	b.n	8004f50 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d10b      	bne.n	8004ea4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e90:	b2da      	uxtb	r2, r3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e9c:	1c5a      	adds	r2, r3, #1
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004ea2:	e055      	b.n	8004f50 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ea8:	2b02      	cmp	r3, #2
 8004eaa:	d151      	bne.n	8004f50 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004eac:	7bfb      	ldrb	r3, [r7, #15]
 8004eae:	2b22      	cmp	r3, #34	; 0x22
 8004eb0:	d10d      	bne.n	8004ece <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ec0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ec6:	1c5a      	adds	r2, r3, #1
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004ecc:	e040      	b.n	8004f50 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d015      	beq.n	8004f04 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004ed8:	7bfb      	ldrb	r3, [r7, #15]
 8004eda:	2b21      	cmp	r3, #33	; 0x21
 8004edc:	d112      	bne.n	8004f04 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee2:	781a      	ldrb	r2, [r3, #0]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eee:	1c5a      	adds	r2, r3, #1
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	3b01      	subs	r3, #1
 8004efc:	b29a      	uxth	r2, r3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004f02:	e025      	b.n	8004f50 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d120      	bne.n	8004f50 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004f0e:	7bfb      	ldrb	r3, [r7, #15]
 8004f10:	2b21      	cmp	r3, #33	; 0x21
 8004f12:	d11d      	bne.n	8004f50 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	685a      	ldr	r2, [r3, #4]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f22:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f32:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2220      	movs	r2, #32
 8004f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f7ff fe3a 	bl	8004bc4 <HAL_I2C_MemTxCpltCallback>
}
 8004f50:	bf00      	nop
 8004f52:	3710      	adds	r7, #16
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	2b22      	cmp	r3, #34	; 0x22
 8004f6a:	f040 80a2 	bne.w	80050b2 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2b03      	cmp	r3, #3
 8004f7a:	d921      	bls.n	8004fc0 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	691a      	ldr	r2, [r3, #16]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f86:	b2d2      	uxtb	r2, r2
 8004f88:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8e:	1c5a      	adds	r2, r3, #1
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	3b01      	subs	r3, #1
 8004f9c:	b29a      	uxth	r2, r3
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	2b03      	cmp	r3, #3
 8004faa:	f040 8082 	bne.w	80050b2 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	685a      	ldr	r2, [r3, #4]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fbc:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004fbe:	e078      	b.n	80050b2 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d074      	beq.n	80050b2 <I2C_MasterReceive_RXNE+0x15a>
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d002      	beq.n	8004fd4 <I2C_MasterReceive_RXNE+0x7c>
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d16e      	bne.n	80050b2 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f001 faf9 	bl	80065cc <I2C_WaitOnSTOPRequestThroughIT>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d142      	bne.n	8005066 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fee:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	685a      	ldr	r2, [r3, #4]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ffe:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	691a      	ldr	r2, [r3, #16]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500a:	b2d2      	uxtb	r2, r2
 800500c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005012:	1c5a      	adds	r2, r3, #1
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800501c:	b29b      	uxth	r3, r3
 800501e:	3b01      	subs	r3, #1
 8005020:	b29a      	uxth	r2, r3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2220      	movs	r2, #32
 800502a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005034:	b2db      	uxtb	r3, r3
 8005036:	2b40      	cmp	r3, #64	; 0x40
 8005038:	d10a      	bne.n	8005050 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f7ff fdc4 	bl	8004bd6 <HAL_I2C_MemRxCpltCallback>
}
 800504e:	e030      	b.n	80050b2 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2212      	movs	r2, #18
 800505c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f7ff fd7f 	bl	8004b62 <HAL_I2C_MasterRxCpltCallback>
}
 8005064:	e025      	b.n	80050b2 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	685a      	ldr	r2, [r3, #4]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005074:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	691a      	ldr	r2, [r3, #16]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005080:	b2d2      	uxtb	r2, r2
 8005082:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005088:	1c5a      	adds	r2, r3, #1
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005092:	b29b      	uxth	r3, r3
 8005094:	3b01      	subs	r3, #1
 8005096:	b29a      	uxth	r2, r3
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2220      	movs	r2, #32
 80050a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f7ff fd9b 	bl	8004be8 <HAL_I2C_ErrorCallback>
}
 80050b2:	bf00      	nop
 80050b4:	3710      	adds	r7, #16
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}

080050ba <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80050ba:	b580      	push	{r7, lr}
 80050bc:	b084      	sub	sp, #16
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c6:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	2b04      	cmp	r3, #4
 80050d0:	d11b      	bne.n	800510a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	685a      	ldr	r2, [r3, #4]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050e0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	691a      	ldr	r2, [r3, #16]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ec:	b2d2      	uxtb	r2, r2
 80050ee:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f4:	1c5a      	adds	r2, r3, #1
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050fe:	b29b      	uxth	r3, r3
 8005100:	3b01      	subs	r3, #1
 8005102:	b29a      	uxth	r2, r3
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005108:	e0bd      	b.n	8005286 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800510e:	b29b      	uxth	r3, r3
 8005110:	2b03      	cmp	r3, #3
 8005112:	d129      	bne.n	8005168 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	685a      	ldr	r2, [r3, #4]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005122:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2b04      	cmp	r3, #4
 8005128:	d00a      	beq.n	8005140 <I2C_MasterReceive_BTF+0x86>
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2b02      	cmp	r3, #2
 800512e:	d007      	beq.n	8005140 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800513e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	691a      	ldr	r2, [r3, #16]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514a:	b2d2      	uxtb	r2, r2
 800514c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005152:	1c5a      	adds	r2, r3, #1
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800515c:	b29b      	uxth	r3, r3
 800515e:	3b01      	subs	r3, #1
 8005160:	b29a      	uxth	r2, r3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005166:	e08e      	b.n	8005286 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800516c:	b29b      	uxth	r3, r3
 800516e:	2b02      	cmp	r3, #2
 8005170:	d176      	bne.n	8005260 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2b01      	cmp	r3, #1
 8005176:	d002      	beq.n	800517e <I2C_MasterReceive_BTF+0xc4>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2b10      	cmp	r3, #16
 800517c:	d108      	bne.n	8005190 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800518c:	601a      	str	r2, [r3, #0]
 800518e:	e019      	b.n	80051c4 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2b04      	cmp	r3, #4
 8005194:	d002      	beq.n	800519c <I2C_MasterReceive_BTF+0xe2>
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2b02      	cmp	r3, #2
 800519a:	d108      	bne.n	80051ae <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80051aa:	601a      	str	r2, [r3, #0]
 80051ac:	e00a      	b.n	80051c4 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2b10      	cmp	r3, #16
 80051b2:	d007      	beq.n	80051c4 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051c2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	691a      	ldr	r2, [r3, #16]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ce:	b2d2      	uxtb	r2, r2
 80051d0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d6:	1c5a      	adds	r2, r3, #1
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	3b01      	subs	r3, #1
 80051e4:	b29a      	uxth	r2, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	691a      	ldr	r2, [r3, #16]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f4:	b2d2      	uxtb	r2, r2
 80051f6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fc:	1c5a      	adds	r2, r3, #1
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005206:	b29b      	uxth	r3, r3
 8005208:	3b01      	subs	r3, #1
 800520a:	b29a      	uxth	r2, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	685a      	ldr	r2, [r3, #4]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800521e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2220      	movs	r2, #32
 8005224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800522e:	b2db      	uxtb	r3, r3
 8005230:	2b40      	cmp	r3, #64	; 0x40
 8005232:	d10a      	bne.n	800524a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f7ff fcc7 	bl	8004bd6 <HAL_I2C_MemRxCpltCallback>
}
 8005248:	e01d      	b.n	8005286 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2212      	movs	r2, #18
 8005256:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f7ff fc82 	bl	8004b62 <HAL_I2C_MasterRxCpltCallback>
}
 800525e:	e012      	b.n	8005286 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	691a      	ldr	r2, [r3, #16]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526a:	b2d2      	uxtb	r2, r2
 800526c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005272:	1c5a      	adds	r2, r3, #1
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800527c:	b29b      	uxth	r3, r3
 800527e:	3b01      	subs	r3, #1
 8005280:	b29a      	uxth	r2, r3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005286:	bf00      	nop
 8005288:	3710      	adds	r7, #16
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}

0800528e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800528e:	b480      	push	{r7}
 8005290:	b083      	sub	sp, #12
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800529c:	b2db      	uxtb	r3, r3
 800529e:	2b40      	cmp	r3, #64	; 0x40
 80052a0:	d117      	bne.n	80052d2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d109      	bne.n	80052be <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	461a      	mov	r2, r3
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80052ba:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80052bc:	e067      	b.n	800538e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	f043 0301 	orr.w	r3, r3, #1
 80052c8:	b2da      	uxtb	r2, r3
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	611a      	str	r2, [r3, #16]
}
 80052d0:	e05d      	b.n	800538e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052da:	d133      	bne.n	8005344 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	2b21      	cmp	r3, #33	; 0x21
 80052e6:	d109      	bne.n	80052fc <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	461a      	mov	r2, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80052f8:	611a      	str	r2, [r3, #16]
 80052fa:	e008      	b.n	800530e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005300:	b2db      	uxtb	r3, r3
 8005302:	f043 0301 	orr.w	r3, r3, #1
 8005306:	b2da      	uxtb	r2, r3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005312:	2b00      	cmp	r3, #0
 8005314:	d004      	beq.n	8005320 <I2C_Master_SB+0x92>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800531a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800531c:	2b00      	cmp	r3, #0
 800531e:	d108      	bne.n	8005332 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005324:	2b00      	cmp	r3, #0
 8005326:	d032      	beq.n	800538e <I2C_Master_SB+0x100>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800532c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800532e:	2b00      	cmp	r3, #0
 8005330:	d02d      	beq.n	800538e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	685a      	ldr	r2, [r3, #4]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005340:	605a      	str	r2, [r3, #4]
}
 8005342:	e024      	b.n	800538e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005348:	2b00      	cmp	r3, #0
 800534a:	d10e      	bne.n	800536a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005350:	b29b      	uxth	r3, r3
 8005352:	11db      	asrs	r3, r3, #7
 8005354:	b2db      	uxtb	r3, r3
 8005356:	f003 0306 	and.w	r3, r3, #6
 800535a:	b2db      	uxtb	r3, r3
 800535c:	f063 030f 	orn	r3, r3, #15
 8005360:	b2da      	uxtb	r2, r3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	611a      	str	r2, [r3, #16]
}
 8005368:	e011      	b.n	800538e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800536e:	2b01      	cmp	r3, #1
 8005370:	d10d      	bne.n	800538e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005376:	b29b      	uxth	r3, r3
 8005378:	11db      	asrs	r3, r3, #7
 800537a:	b2db      	uxtb	r3, r3
 800537c:	f003 0306 	and.w	r3, r3, #6
 8005380:	b2db      	uxtb	r3, r3
 8005382:	f063 030e 	orn	r3, r3, #14
 8005386:	b2da      	uxtb	r2, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	611a      	str	r2, [r3, #16]
}
 800538e:	bf00      	nop
 8005390:	370c      	adds	r7, #12
 8005392:	46bd      	mov	sp, r7
 8005394:	bc80      	pop	{r7}
 8005396:	4770      	bx	lr

08005398 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053a4:	b2da      	uxtb	r2, r3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d004      	beq.n	80053be <I2C_Master_ADD10+0x26>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d108      	bne.n	80053d0 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00c      	beq.n	80053e0 <I2C_Master_ADD10+0x48>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d007      	beq.n	80053e0 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	685a      	ldr	r2, [r3, #4]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053de:	605a      	str	r2, [r3, #4]
  }
}
 80053e0:	bf00      	nop
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bc80      	pop	{r7}
 80053e8:	4770      	bx	lr

080053ea <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80053ea:	b480      	push	{r7}
 80053ec:	b091      	sub	sp, #68	; 0x44
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005400:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005406:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800540e:	b2db      	uxtb	r3, r3
 8005410:	2b22      	cmp	r3, #34	; 0x22
 8005412:	f040 8174 	bne.w	80056fe <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800541a:	2b00      	cmp	r3, #0
 800541c:	d10f      	bne.n	800543e <I2C_Master_ADDR+0x54>
 800541e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005422:	2b40      	cmp	r3, #64	; 0x40
 8005424:	d10b      	bne.n	800543e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005426:	2300      	movs	r3, #0
 8005428:	633b      	str	r3, [r7, #48]	; 0x30
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	695b      	ldr	r3, [r3, #20]
 8005430:	633b      	str	r3, [r7, #48]	; 0x30
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	699b      	ldr	r3, [r3, #24]
 8005438:	633b      	str	r3, [r7, #48]	; 0x30
 800543a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800543c:	e16b      	b.n	8005716 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005442:	2b00      	cmp	r3, #0
 8005444:	d11d      	bne.n	8005482 <I2C_Master_ADDR+0x98>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800544e:	d118      	bne.n	8005482 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005450:	2300      	movs	r3, #0
 8005452:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	695b      	ldr	r3, [r3, #20]
 800545a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	699b      	ldr	r3, [r3, #24]
 8005462:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005464:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005474:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800547a:	1c5a      	adds	r2, r3, #1
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	651a      	str	r2, [r3, #80]	; 0x50
 8005480:	e149      	b.n	8005716 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005486:	b29b      	uxth	r3, r3
 8005488:	2b00      	cmp	r3, #0
 800548a:	d113      	bne.n	80054b4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800548c:	2300      	movs	r3, #0
 800548e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	695b      	ldr	r3, [r3, #20]
 8005496:	62bb      	str	r3, [r7, #40]	; 0x28
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	62bb      	str	r3, [r7, #40]	; 0x28
 80054a0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054b0:	601a      	str	r2, [r3, #0]
 80054b2:	e120      	b.n	80056f6 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	f040 808a 	bne.w	80055d4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80054c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80054c6:	d137      	bne.n	8005538 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054d6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054e6:	d113      	bne.n	8005510 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054f6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054f8:	2300      	movs	r3, #0
 80054fa:	627b      	str	r3, [r7, #36]	; 0x24
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	695b      	ldr	r3, [r3, #20]
 8005502:	627b      	str	r3, [r7, #36]	; 0x24
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	699b      	ldr	r3, [r3, #24]
 800550a:	627b      	str	r3, [r7, #36]	; 0x24
 800550c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550e:	e0f2      	b.n	80056f6 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005510:	2300      	movs	r3, #0
 8005512:	623b      	str	r3, [r7, #32]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	695b      	ldr	r3, [r3, #20]
 800551a:	623b      	str	r3, [r7, #32]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	699b      	ldr	r3, [r3, #24]
 8005522:	623b      	str	r3, [r7, #32]
 8005524:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005534:	601a      	str	r2, [r3, #0]
 8005536:	e0de      	b.n	80056f6 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800553a:	2b08      	cmp	r3, #8
 800553c:	d02e      	beq.n	800559c <I2C_Master_ADDR+0x1b2>
 800553e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005540:	2b20      	cmp	r3, #32
 8005542:	d02b      	beq.n	800559c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005546:	2b12      	cmp	r3, #18
 8005548:	d102      	bne.n	8005550 <I2C_Master_ADDR+0x166>
 800554a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800554c:	2b01      	cmp	r3, #1
 800554e:	d125      	bne.n	800559c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005552:	2b04      	cmp	r3, #4
 8005554:	d00e      	beq.n	8005574 <I2C_Master_ADDR+0x18a>
 8005556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005558:	2b02      	cmp	r3, #2
 800555a:	d00b      	beq.n	8005574 <I2C_Master_ADDR+0x18a>
 800555c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800555e:	2b10      	cmp	r3, #16
 8005560:	d008      	beq.n	8005574 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005570:	601a      	str	r2, [r3, #0]
 8005572:	e007      	b.n	8005584 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005582:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005584:	2300      	movs	r3, #0
 8005586:	61fb      	str	r3, [r7, #28]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	695b      	ldr	r3, [r3, #20]
 800558e:	61fb      	str	r3, [r7, #28]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	699b      	ldr	r3, [r3, #24]
 8005596:	61fb      	str	r3, [r7, #28]
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	e0ac      	b.n	80056f6 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055aa:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055ac:	2300      	movs	r3, #0
 80055ae:	61bb      	str	r3, [r7, #24]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	695b      	ldr	r3, [r3, #20]
 80055b6:	61bb      	str	r3, [r7, #24]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	699b      	ldr	r3, [r3, #24]
 80055be:	61bb      	str	r3, [r7, #24]
 80055c0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055d0:	601a      	str	r2, [r3, #0]
 80055d2:	e090      	b.n	80056f6 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055d8:	b29b      	uxth	r3, r3
 80055da:	2b02      	cmp	r3, #2
 80055dc:	d158      	bne.n	8005690 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80055de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e0:	2b04      	cmp	r3, #4
 80055e2:	d021      	beq.n	8005628 <I2C_Master_ADDR+0x23e>
 80055e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e6:	2b02      	cmp	r3, #2
 80055e8:	d01e      	beq.n	8005628 <I2C_Master_ADDR+0x23e>
 80055ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ec:	2b10      	cmp	r3, #16
 80055ee:	d01b      	beq.n	8005628 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055fe:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005600:	2300      	movs	r3, #0
 8005602:	617b      	str	r3, [r7, #20]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	695b      	ldr	r3, [r3, #20]
 800560a:	617b      	str	r3, [r7, #20]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	699b      	ldr	r3, [r3, #24]
 8005612:	617b      	str	r3, [r7, #20]
 8005614:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005624:	601a      	str	r2, [r3, #0]
 8005626:	e012      	b.n	800564e <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005636:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005638:	2300      	movs	r3, #0
 800563a:	613b      	str	r3, [r7, #16]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	695b      	ldr	r3, [r3, #20]
 8005642:	613b      	str	r3, [r7, #16]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	699b      	ldr	r3, [r3, #24]
 800564a:	613b      	str	r3, [r7, #16]
 800564c:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005658:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800565c:	d14b      	bne.n	80056f6 <I2C_Master_ADDR+0x30c>
 800565e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005660:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005664:	d00b      	beq.n	800567e <I2C_Master_ADDR+0x294>
 8005666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005668:	2b01      	cmp	r3, #1
 800566a:	d008      	beq.n	800567e <I2C_Master_ADDR+0x294>
 800566c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800566e:	2b08      	cmp	r3, #8
 8005670:	d005      	beq.n	800567e <I2C_Master_ADDR+0x294>
 8005672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005674:	2b10      	cmp	r3, #16
 8005676:	d002      	beq.n	800567e <I2C_Master_ADDR+0x294>
 8005678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800567a:	2b20      	cmp	r3, #32
 800567c:	d13b      	bne.n	80056f6 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	685a      	ldr	r2, [r3, #4]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800568c:	605a      	str	r2, [r3, #4]
 800568e:	e032      	b.n	80056f6 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800569e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056ae:	d117      	bne.n	80056e0 <I2C_Master_ADDR+0x2f6>
 80056b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056b2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80056b6:	d00b      	beq.n	80056d0 <I2C_Master_ADDR+0x2e6>
 80056b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d008      	beq.n	80056d0 <I2C_Master_ADDR+0x2e6>
 80056be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c0:	2b08      	cmp	r3, #8
 80056c2:	d005      	beq.n	80056d0 <I2C_Master_ADDR+0x2e6>
 80056c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c6:	2b10      	cmp	r3, #16
 80056c8:	d002      	beq.n	80056d0 <I2C_Master_ADDR+0x2e6>
 80056ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056cc:	2b20      	cmp	r3, #32
 80056ce:	d107      	bne.n	80056e0 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	685a      	ldr	r2, [r3, #4]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80056de:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056e0:	2300      	movs	r3, #0
 80056e2:	60fb      	str	r3, [r7, #12]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	695b      	ldr	r3, [r3, #20]
 80056ea:	60fb      	str	r3, [r7, #12]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	699b      	ldr	r3, [r3, #24]
 80056f2:	60fb      	str	r3, [r7, #12]
 80056f4:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80056fc:	e00b      	b.n	8005716 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056fe:	2300      	movs	r3, #0
 8005700:	60bb      	str	r3, [r7, #8]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	695b      	ldr	r3, [r3, #20]
 8005708:	60bb      	str	r3, [r7, #8]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	699b      	ldr	r3, [r3, #24]
 8005710:	60bb      	str	r3, [r7, #8]
 8005712:	68bb      	ldr	r3, [r7, #8]
}
 8005714:	e7ff      	b.n	8005716 <I2C_Master_ADDR+0x32c>
 8005716:	bf00      	nop
 8005718:	3744      	adds	r7, #68	; 0x44
 800571a:	46bd      	mov	sp, r7
 800571c:	bc80      	pop	{r7}
 800571e:	4770      	bx	lr

08005720 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b084      	sub	sp, #16
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800572e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005734:	b29b      	uxth	r3, r3
 8005736:	2b00      	cmp	r3, #0
 8005738:	d02b      	beq.n	8005792 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573e:	781a      	ldrb	r2, [r3, #0]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574a:	1c5a      	adds	r2, r3, #1
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005754:	b29b      	uxth	r3, r3
 8005756:	3b01      	subs	r3, #1
 8005758:	b29a      	uxth	r2, r3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005762:	b29b      	uxth	r3, r3
 8005764:	2b00      	cmp	r3, #0
 8005766:	d114      	bne.n	8005792 <I2C_SlaveTransmit_TXE+0x72>
 8005768:	7bfb      	ldrb	r3, [r7, #15]
 800576a:	2b29      	cmp	r3, #41	; 0x29
 800576c:	d111      	bne.n	8005792 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	685a      	ldr	r2, [r3, #4]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800577c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2221      	movs	r2, #33	; 0x21
 8005782:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2228      	movs	r2, #40	; 0x28
 8005788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f7ff f9f1 	bl	8004b74 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005792:	bf00      	nop
 8005794:	3710      	adds	r7, #16
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}

0800579a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800579a:	b480      	push	{r7}
 800579c:	b083      	sub	sp, #12
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d011      	beq.n	80057d0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b0:	781a      	ldrb	r2, [r3, #0]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057bc:	1c5a      	adds	r2, r3, #1
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	3b01      	subs	r3, #1
 80057ca:	b29a      	uxth	r2, r3
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80057d0:	bf00      	nop
 80057d2:	370c      	adds	r7, #12
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bc80      	pop	{r7}
 80057d8:	4770      	bx	lr

080057da <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80057da:	b580      	push	{r7, lr}
 80057dc:	b084      	sub	sp, #16
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057e8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d02c      	beq.n	800584e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	691a      	ldr	r2, [r3, #16]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fe:	b2d2      	uxtb	r2, r2
 8005800:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005806:	1c5a      	adds	r2, r3, #1
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005810:	b29b      	uxth	r3, r3
 8005812:	3b01      	subs	r3, #1
 8005814:	b29a      	uxth	r2, r3
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800581e:	b29b      	uxth	r3, r3
 8005820:	2b00      	cmp	r3, #0
 8005822:	d114      	bne.n	800584e <I2C_SlaveReceive_RXNE+0x74>
 8005824:	7bfb      	ldrb	r3, [r7, #15]
 8005826:	2b2a      	cmp	r3, #42	; 0x2a
 8005828:	d111      	bne.n	800584e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	685a      	ldr	r2, [r3, #4]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005838:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2222      	movs	r2, #34	; 0x22
 800583e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2228      	movs	r2, #40	; 0x28
 8005844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f7ff f99c 	bl	8004b86 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800584e:	bf00      	nop
 8005850:	3710      	adds	r7, #16
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}

08005856 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005856:	b480      	push	{r7}
 8005858:	b083      	sub	sp, #12
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005862:	b29b      	uxth	r3, r3
 8005864:	2b00      	cmp	r3, #0
 8005866:	d012      	beq.n	800588e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	691a      	ldr	r2, [r3, #16]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005872:	b2d2      	uxtb	r2, r2
 8005874:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587a:	1c5a      	adds	r2, r3, #1
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005884:	b29b      	uxth	r3, r3
 8005886:	3b01      	subs	r3, #1
 8005888:	b29a      	uxth	r2, r3
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800588e:	bf00      	nop
 8005890:	370c      	adds	r7, #12
 8005892:	46bd      	mov	sp, r7
 8005894:	bc80      	pop	{r7}
 8005896:	4770      	bx	lr

08005898 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80058a2:	2300      	movs	r3, #0
 80058a4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80058b2:	2b28      	cmp	r3, #40	; 0x28
 80058b4:	d127      	bne.n	8005906 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	685a      	ldr	r2, [r3, #4]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058c4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	089b      	lsrs	r3, r3, #2
 80058ca:	f003 0301 	and.w	r3, r3, #1
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d101      	bne.n	80058d6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80058d2:	2301      	movs	r3, #1
 80058d4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	09db      	lsrs	r3, r3, #7
 80058da:	f003 0301 	and.w	r3, r3, #1
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d103      	bne.n	80058ea <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	81bb      	strh	r3, [r7, #12]
 80058e8:	e002      	b.n	80058f0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	699b      	ldr	r3, [r3, #24]
 80058ee:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80058f8:	89ba      	ldrh	r2, [r7, #12]
 80058fa:	7bfb      	ldrb	r3, [r7, #15]
 80058fc:	4619      	mov	r1, r3
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f7ff f94a 	bl	8004b98 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005904:	e00e      	b.n	8005924 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005906:	2300      	movs	r3, #0
 8005908:	60bb      	str	r3, [r7, #8]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	695b      	ldr	r3, [r3, #20]
 8005910:	60bb      	str	r3, [r7, #8]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	699b      	ldr	r3, [r3, #24]
 8005918:	60bb      	str	r3, [r7, #8]
 800591a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005924:	bf00      	nop
 8005926:	3710      	adds	r7, #16
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800593a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	685a      	ldr	r2, [r3, #4]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800594a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800594c:	2300      	movs	r3, #0
 800594e:	60bb      	str	r3, [r7, #8]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	695b      	ldr	r3, [r3, #20]
 8005956:	60bb      	str	r3, [r7, #8]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f042 0201 	orr.w	r2, r2, #1
 8005966:	601a      	str	r2, [r3, #0]
 8005968:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005978:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005984:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005988:	d172      	bne.n	8005a70 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800598a:	7bfb      	ldrb	r3, [r7, #15]
 800598c:	2b22      	cmp	r3, #34	; 0x22
 800598e:	d002      	beq.n	8005996 <I2C_Slave_STOPF+0x6a>
 8005990:	7bfb      	ldrb	r3, [r7, #15]
 8005992:	2b2a      	cmp	r3, #42	; 0x2a
 8005994:	d135      	bne.n	8005a02 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	b29a      	uxth	r2, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d005      	beq.n	80059ba <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b2:	f043 0204 	orr.w	r2, r3, #4
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	685a      	ldr	r2, [r3, #4]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059c8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ce:	4618      	mov	r0, r3
 80059d0:	f7fe f82e 	bl	8003a30 <HAL_DMA_GetState>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d049      	beq.n	8005a6e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059de:	4a69      	ldr	r2, [pc, #420]	; (8005b84 <I2C_Slave_STOPF+0x258>)
 80059e0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e6:	4618      	mov	r0, r3
 80059e8:	f7fd ffac 	bl	8003944 <HAL_DMA_Abort_IT>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d03d      	beq.n	8005a6e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059f8:	687a      	ldr	r2, [r7, #4]
 80059fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80059fc:	4610      	mov	r0, r2
 80059fe:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005a00:	e035      	b.n	8005a6e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	b29a      	uxth	r2, r3
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d005      	beq.n	8005a26 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1e:	f043 0204 	orr.w	r2, r3, #4
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	685a      	ldr	r2, [r3, #4]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a34:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f7fd fff8 	bl	8003a30 <HAL_DMA_GetState>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d014      	beq.n	8005a70 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a4a:	4a4e      	ldr	r2, [pc, #312]	; (8005b84 <I2C_Slave_STOPF+0x258>)
 8005a4c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a52:	4618      	mov	r0, r3
 8005a54:	f7fd ff76 	bl	8003944 <HAL_DMA_Abort_IT>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d008      	beq.n	8005a70 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005a68:	4610      	mov	r0, r2
 8005a6a:	4798      	blx	r3
 8005a6c:	e000      	b.n	8005a70 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005a6e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d03e      	beq.n	8005af8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	695b      	ldr	r3, [r3, #20]
 8005a80:	f003 0304 	and.w	r3, r3, #4
 8005a84:	2b04      	cmp	r3, #4
 8005a86:	d112      	bne.n	8005aae <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	691a      	ldr	r2, [r3, #16]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a92:	b2d2      	uxtb	r2, r2
 8005a94:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9a:	1c5a      	adds	r2, r3, #1
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	3b01      	subs	r3, #1
 8005aa8:	b29a      	uxth	r2, r3
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	695b      	ldr	r3, [r3, #20]
 8005ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab8:	2b40      	cmp	r3, #64	; 0x40
 8005aba:	d112      	bne.n	8005ae2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	691a      	ldr	r2, [r3, #16]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac6:	b2d2      	uxtb	r2, r2
 8005ac8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ace:	1c5a      	adds	r2, r3, #1
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	3b01      	subs	r3, #1
 8005adc:	b29a      	uxth	r2, r3
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d005      	beq.n	8005af8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af0:	f043 0204 	orr.w	r2, r3, #4
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d003      	beq.n	8005b08 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f000 f8b3 	bl	8005c6c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005b06:	e039      	b.n	8005b7c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005b08:	7bfb      	ldrb	r3, [r7, #15]
 8005b0a:	2b2a      	cmp	r3, #42	; 0x2a
 8005b0c:	d109      	bne.n	8005b22 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2228      	movs	r2, #40	; 0x28
 8005b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f7ff f832 	bl	8004b86 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	2b28      	cmp	r3, #40	; 0x28
 8005b2c:	d111      	bne.n	8005b52 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a15      	ldr	r2, [pc, #84]	; (8005b88 <I2C_Slave_STOPF+0x25c>)
 8005b32:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2220      	movs	r2, #32
 8005b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f7ff f831 	bl	8004bb2 <HAL_I2C_ListenCpltCallback>
}
 8005b50:	e014      	b.n	8005b7c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b56:	2b22      	cmp	r3, #34	; 0x22
 8005b58:	d002      	beq.n	8005b60 <I2C_Slave_STOPF+0x234>
 8005b5a:	7bfb      	ldrb	r3, [r7, #15]
 8005b5c:	2b22      	cmp	r3, #34	; 0x22
 8005b5e:	d10d      	bne.n	8005b7c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2220      	movs	r2, #32
 8005b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f7ff f805 	bl	8004b86 <HAL_I2C_SlaveRxCpltCallback>
}
 8005b7c:	bf00      	nop
 8005b7e:	3710      	adds	r7, #16
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	080061cd 	.word	0x080061cd
 8005b88:	ffff0000 	.word	0xffff0000

08005b8c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b9a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	2b08      	cmp	r3, #8
 8005ba6:	d002      	beq.n	8005bae <I2C_Slave_AF+0x22>
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	2b20      	cmp	r3, #32
 8005bac:	d129      	bne.n	8005c02 <I2C_Slave_AF+0x76>
 8005bae:	7bfb      	ldrb	r3, [r7, #15]
 8005bb0:	2b28      	cmp	r3, #40	; 0x28
 8005bb2:	d126      	bne.n	8005c02 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	4a2c      	ldr	r2, [pc, #176]	; (8005c68 <I2C_Slave_AF+0xdc>)
 8005bb8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	685a      	ldr	r2, [r3, #4]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005bc8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005bd2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005be2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2220      	movs	r2, #32
 8005bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f7fe ffd9 	bl	8004bb2 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005c00:	e02e      	b.n	8005c60 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005c02:	7bfb      	ldrb	r3, [r7, #15]
 8005c04:	2b21      	cmp	r3, #33	; 0x21
 8005c06:	d126      	bne.n	8005c56 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	4a17      	ldr	r2, [pc, #92]	; (8005c68 <I2C_Slave_AF+0xdc>)
 8005c0c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2221      	movs	r2, #33	; 0x21
 8005c12:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2220      	movs	r2, #32
 8005c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	685a      	ldr	r2, [r3, #4]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005c32:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c3c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c4c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f7fe ff90 	bl	8004b74 <HAL_I2C_SlaveTxCpltCallback>
}
 8005c54:	e004      	b.n	8005c60 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c5e:	615a      	str	r2, [r3, #20]
}
 8005c60:	bf00      	nop
 8005c62:	3710      	adds	r7, #16
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}
 8005c68:	ffff0000 	.word	0xffff0000

08005c6c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b084      	sub	sp, #16
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c7a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c82:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005c84:	7bbb      	ldrb	r3, [r7, #14]
 8005c86:	2b10      	cmp	r3, #16
 8005c88:	d002      	beq.n	8005c90 <I2C_ITError+0x24>
 8005c8a:	7bbb      	ldrb	r3, [r7, #14]
 8005c8c:	2b40      	cmp	r3, #64	; 0x40
 8005c8e:	d10a      	bne.n	8005ca6 <I2C_ITError+0x3a>
 8005c90:	7bfb      	ldrb	r3, [r7, #15]
 8005c92:	2b22      	cmp	r3, #34	; 0x22
 8005c94:	d107      	bne.n	8005ca6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ca4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005ca6:	7bfb      	ldrb	r3, [r7, #15]
 8005ca8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005cac:	2b28      	cmp	r3, #40	; 0x28
 8005cae:	d107      	bne.n	8005cc0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2228      	movs	r2, #40	; 0x28
 8005cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005cbe:	e015      	b.n	8005cec <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cce:	d00a      	beq.n	8005ce6 <I2C_ITError+0x7a>
 8005cd0:	7bfb      	ldrb	r3, [r7, #15]
 8005cd2:	2b60      	cmp	r3, #96	; 0x60
 8005cd4:	d007      	beq.n	8005ce6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2220      	movs	r2, #32
 8005cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cf6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cfa:	d161      	bne.n	8005dc0 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	685a      	ldr	r2, [r3, #4]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d0a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d10:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d020      	beq.n	8005d5a <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d1c:	4a6a      	ldr	r2, [pc, #424]	; (8005ec8 <I2C_ITError+0x25c>)
 8005d1e:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d24:	4618      	mov	r0, r3
 8005d26:	f7fd fe0d 	bl	8003944 <HAL_DMA_Abort_IT>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	f000 8089 	beq.w	8005e44 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f022 0201 	bic.w	r2, r2, #1
 8005d40:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2220      	movs	r2, #32
 8005d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005d54:	4610      	mov	r0, r2
 8005d56:	4798      	blx	r3
 8005d58:	e074      	b.n	8005e44 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d5e:	4a5a      	ldr	r2, [pc, #360]	; (8005ec8 <I2C_ITError+0x25c>)
 8005d60:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d66:	4618      	mov	r0, r3
 8005d68:	f7fd fdec 	bl	8003944 <HAL_DMA_Abort_IT>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d068      	beq.n	8005e44 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	695b      	ldr	r3, [r3, #20]
 8005d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d7c:	2b40      	cmp	r3, #64	; 0x40
 8005d7e:	d10b      	bne.n	8005d98 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	691a      	ldr	r2, [r3, #16]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8a:	b2d2      	uxtb	r2, r2
 8005d8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d92:	1c5a      	adds	r2, r3, #1
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f022 0201 	bic.w	r2, r2, #1
 8005da6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2220      	movs	r2, #32
 8005dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005dba:	4610      	mov	r0, r2
 8005dbc:	4798      	blx	r3
 8005dbe:	e041      	b.n	8005e44 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	2b60      	cmp	r3, #96	; 0x60
 8005dca:	d125      	bne.n	8005e18 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2220      	movs	r2, #32
 8005dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	695b      	ldr	r3, [r3, #20]
 8005de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005de4:	2b40      	cmp	r3, #64	; 0x40
 8005de6:	d10b      	bne.n	8005e00 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	691a      	ldr	r2, [r3, #16]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df2:	b2d2      	uxtb	r2, r2
 8005df4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfa:	1c5a      	adds	r2, r3, #1
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f022 0201 	bic.w	r2, r2, #1
 8005e0e:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f7fe fef2 	bl	8004bfa <HAL_I2C_AbortCpltCallback>
 8005e16:	e015      	b.n	8005e44 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	695b      	ldr	r3, [r3, #20]
 8005e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e22:	2b40      	cmp	r3, #64	; 0x40
 8005e24:	d10b      	bne.n	8005e3e <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	691a      	ldr	r2, [r3, #16]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e30:	b2d2      	uxtb	r2, r2
 8005e32:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e38:	1c5a      	adds	r2, r3, #1
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f7fe fed2 	bl	8004be8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e48:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	f003 0301 	and.w	r3, r3, #1
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d10e      	bne.n	8005e72 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d109      	bne.n	8005e72 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d104      	bne.n	8005e72 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d007      	beq.n	8005e82 <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	685a      	ldr	r2, [r3, #4]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005e80:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e88:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8e:	f003 0304 	and.w	r3, r3, #4
 8005e92:	2b04      	cmp	r3, #4
 8005e94:	d113      	bne.n	8005ebe <I2C_ITError+0x252>
 8005e96:	7bfb      	ldrb	r3, [r7, #15]
 8005e98:	2b28      	cmp	r3, #40	; 0x28
 8005e9a:	d110      	bne.n	8005ebe <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4a0b      	ldr	r2, [pc, #44]	; (8005ecc <I2C_ITError+0x260>)
 8005ea0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2220      	movs	r2, #32
 8005eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f7fe fe7a 	bl	8004bb2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005ebe:	bf00      	nop
 8005ec0:	3710      	adds	r7, #16
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	bf00      	nop
 8005ec8:	080061cd 	.word	0x080061cd
 8005ecc:	ffff0000 	.word	0xffff0000

08005ed0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b088      	sub	sp, #32
 8005ed4:	af02      	add	r7, sp, #8
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	4608      	mov	r0, r1
 8005eda:	4611      	mov	r1, r2
 8005edc:	461a      	mov	r2, r3
 8005ede:	4603      	mov	r3, r0
 8005ee0:	817b      	strh	r3, [r7, #10]
 8005ee2:	460b      	mov	r3, r1
 8005ee4:	813b      	strh	r3, [r7, #8]
 8005ee6:	4613      	mov	r3, r2
 8005ee8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ef8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efc:	9300      	str	r3, [sp, #0]
 8005efe:	6a3b      	ldr	r3, [r7, #32]
 8005f00:	2200      	movs	r2, #0
 8005f02:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005f06:	68f8      	ldr	r0, [r7, #12]
 8005f08:	f000 fa08 	bl	800631c <I2C_WaitOnFlagUntilTimeout>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d00d      	beq.n	8005f2e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f20:	d103      	bne.n	8005f2a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f28:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005f2a:	2303      	movs	r3, #3
 8005f2c:	e05f      	b.n	8005fee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005f2e:	897b      	ldrh	r3, [r7, #10]
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	461a      	mov	r2, r3
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005f3c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f40:	6a3a      	ldr	r2, [r7, #32]
 8005f42:	492d      	ldr	r1, [pc, #180]	; (8005ff8 <I2C_RequestMemoryWrite+0x128>)
 8005f44:	68f8      	ldr	r0, [r7, #12]
 8005f46:	f000 fa40 	bl	80063ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d001      	beq.n	8005f54 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	e04c      	b.n	8005fee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f54:	2300      	movs	r3, #0
 8005f56:	617b      	str	r3, [r7, #20]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	695b      	ldr	r3, [r3, #20]
 8005f5e:	617b      	str	r3, [r7, #20]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	699b      	ldr	r3, [r3, #24]
 8005f66:	617b      	str	r3, [r7, #20]
 8005f68:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f6c:	6a39      	ldr	r1, [r7, #32]
 8005f6e:	68f8      	ldr	r0, [r7, #12]
 8005f70:	f000 faaa 	bl	80064c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f74:	4603      	mov	r3, r0
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d00d      	beq.n	8005f96 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7e:	2b04      	cmp	r3, #4
 8005f80:	d107      	bne.n	8005f92 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f90:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	e02b      	b.n	8005fee <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005f96:	88fb      	ldrh	r3, [r7, #6]
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d105      	bne.n	8005fa8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f9c:	893b      	ldrh	r3, [r7, #8]
 8005f9e:	b2da      	uxtb	r2, r3
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	611a      	str	r2, [r3, #16]
 8005fa6:	e021      	b.n	8005fec <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005fa8:	893b      	ldrh	r3, [r7, #8]
 8005faa:	0a1b      	lsrs	r3, r3, #8
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	b2da      	uxtb	r2, r3
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fb8:	6a39      	ldr	r1, [r7, #32]
 8005fba:	68f8      	ldr	r0, [r7, #12]
 8005fbc:	f000 fa84 	bl	80064c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d00d      	beq.n	8005fe2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fca:	2b04      	cmp	r3, #4
 8005fcc:	d107      	bne.n	8005fde <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fdc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e005      	b.n	8005fee <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005fe2:	893b      	ldrh	r3, [r7, #8]
 8005fe4:	b2da      	uxtb	r2, r3
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005fec:	2300      	movs	r3, #0
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3718      	adds	r7, #24
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	00010002 	.word	0x00010002

08005ffc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b088      	sub	sp, #32
 8006000:	af02      	add	r7, sp, #8
 8006002:	60f8      	str	r0, [r7, #12]
 8006004:	4608      	mov	r0, r1
 8006006:	4611      	mov	r1, r2
 8006008:	461a      	mov	r2, r3
 800600a:	4603      	mov	r3, r0
 800600c:	817b      	strh	r3, [r7, #10]
 800600e:	460b      	mov	r3, r1
 8006010:	813b      	strh	r3, [r7, #8]
 8006012:	4613      	mov	r3, r2
 8006014:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006024:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006034:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006038:	9300      	str	r3, [sp, #0]
 800603a:	6a3b      	ldr	r3, [r7, #32]
 800603c:	2200      	movs	r2, #0
 800603e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006042:	68f8      	ldr	r0, [r7, #12]
 8006044:	f000 f96a 	bl	800631c <I2C_WaitOnFlagUntilTimeout>
 8006048:	4603      	mov	r3, r0
 800604a:	2b00      	cmp	r3, #0
 800604c:	d00d      	beq.n	800606a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006058:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800605c:	d103      	bne.n	8006066 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006064:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006066:	2303      	movs	r3, #3
 8006068:	e0aa      	b.n	80061c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800606a:	897b      	ldrh	r3, [r7, #10]
 800606c:	b2db      	uxtb	r3, r3
 800606e:	461a      	mov	r2, r3
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006078:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800607a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607c:	6a3a      	ldr	r2, [r7, #32]
 800607e:	4952      	ldr	r1, [pc, #328]	; (80061c8 <I2C_RequestMemoryRead+0x1cc>)
 8006080:	68f8      	ldr	r0, [r7, #12]
 8006082:	f000 f9a2 	bl	80063ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006086:	4603      	mov	r3, r0
 8006088:	2b00      	cmp	r3, #0
 800608a:	d001      	beq.n	8006090 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	e097      	b.n	80061c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006090:	2300      	movs	r3, #0
 8006092:	617b      	str	r3, [r7, #20]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	695b      	ldr	r3, [r3, #20]
 800609a:	617b      	str	r3, [r7, #20]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	699b      	ldr	r3, [r3, #24]
 80060a2:	617b      	str	r3, [r7, #20]
 80060a4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060a8:	6a39      	ldr	r1, [r7, #32]
 80060aa:	68f8      	ldr	r0, [r7, #12]
 80060ac:	f000 fa0c 	bl	80064c8 <I2C_WaitOnTXEFlagUntilTimeout>
 80060b0:	4603      	mov	r3, r0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d00d      	beq.n	80060d2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ba:	2b04      	cmp	r3, #4
 80060bc:	d107      	bne.n	80060ce <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	e076      	b.n	80061c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80060d2:	88fb      	ldrh	r3, [r7, #6]
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d105      	bne.n	80060e4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80060d8:	893b      	ldrh	r3, [r7, #8]
 80060da:	b2da      	uxtb	r2, r3
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	611a      	str	r2, [r3, #16]
 80060e2:	e021      	b.n	8006128 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80060e4:	893b      	ldrh	r3, [r7, #8]
 80060e6:	0a1b      	lsrs	r3, r3, #8
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	b2da      	uxtb	r2, r3
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060f4:	6a39      	ldr	r1, [r7, #32]
 80060f6:	68f8      	ldr	r0, [r7, #12]
 80060f8:	f000 f9e6 	bl	80064c8 <I2C_WaitOnTXEFlagUntilTimeout>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00d      	beq.n	800611e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006106:	2b04      	cmp	r3, #4
 8006108:	d107      	bne.n	800611a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006118:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	e050      	b.n	80061c0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800611e:	893b      	ldrh	r3, [r7, #8]
 8006120:	b2da      	uxtb	r2, r3
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800612a:	6a39      	ldr	r1, [r7, #32]
 800612c:	68f8      	ldr	r0, [r7, #12]
 800612e:	f000 f9cb 	bl	80064c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006132:	4603      	mov	r3, r0
 8006134:	2b00      	cmp	r3, #0
 8006136:	d00d      	beq.n	8006154 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800613c:	2b04      	cmp	r3, #4
 800613e:	d107      	bne.n	8006150 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800614e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	e035      	b.n	80061c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006162:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006166:	9300      	str	r3, [sp, #0]
 8006168:	6a3b      	ldr	r3, [r7, #32]
 800616a:	2200      	movs	r2, #0
 800616c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006170:	68f8      	ldr	r0, [r7, #12]
 8006172:	f000 f8d3 	bl	800631c <I2C_WaitOnFlagUntilTimeout>
 8006176:	4603      	mov	r3, r0
 8006178:	2b00      	cmp	r3, #0
 800617a:	d00d      	beq.n	8006198 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006186:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800618a:	d103      	bne.n	8006194 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006192:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006194:	2303      	movs	r3, #3
 8006196:	e013      	b.n	80061c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006198:	897b      	ldrh	r3, [r7, #10]
 800619a:	b2db      	uxtb	r3, r3
 800619c:	f043 0301 	orr.w	r3, r3, #1
 80061a0:	b2da      	uxtb	r2, r3
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80061a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061aa:	6a3a      	ldr	r2, [r7, #32]
 80061ac:	4906      	ldr	r1, [pc, #24]	; (80061c8 <I2C_RequestMemoryRead+0x1cc>)
 80061ae:	68f8      	ldr	r0, [r7, #12]
 80061b0:	f000 f90b 	bl	80063ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80061b4:	4603      	mov	r3, r0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d001      	beq.n	80061be <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	e000      	b.n	80061c0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80061be:	2300      	movs	r3, #0
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3718      	adds	r7, #24
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}
 80061c8:	00010002 	.word	0x00010002

080061cc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b086      	sub	sp, #24
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80061d4:	2300      	movs	r3, #0
 80061d6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061dc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061e4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80061e6:	4b4b      	ldr	r3, [pc, #300]	; (8006314 <I2C_DMAAbort+0x148>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	08db      	lsrs	r3, r3, #3
 80061ec:	4a4a      	ldr	r2, [pc, #296]	; (8006318 <I2C_DMAAbort+0x14c>)
 80061ee:	fba2 2303 	umull	r2, r3, r2, r3
 80061f2:	0a1a      	lsrs	r2, r3, #8
 80061f4:	4613      	mov	r3, r2
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	4413      	add	r3, r2
 80061fa:	00da      	lsls	r2, r3, #3
 80061fc:	1ad3      	subs	r3, r2, r3
 80061fe:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d106      	bne.n	8006214 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800620a:	f043 0220 	orr.w	r2, r3, #32
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8006212:	e00a      	b.n	800622a <I2C_DMAAbort+0x5e>
    }
    count--;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	3b01      	subs	r3, #1
 8006218:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006224:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006228:	d0ea      	beq.n	8006200 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800622e:	2b00      	cmp	r3, #0
 8006230:	d003      	beq.n	800623a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006236:	2200      	movs	r2, #0
 8006238:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800623e:	2b00      	cmp	r3, #0
 8006240:	d003      	beq.n	800624a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006246:	2200      	movs	r2, #0
 8006248:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006258:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	2200      	movs	r2, #0
 800625e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006264:	2b00      	cmp	r3, #0
 8006266:	d003      	beq.n	8006270 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800626c:	2200      	movs	r2, #0
 800626e:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006274:	2b00      	cmp	r3, #0
 8006276:	d003      	beq.n	8006280 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800627c:	2200      	movs	r2, #0
 800627e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f022 0201 	bic.w	r2, r2, #1
 800628e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006296:	b2db      	uxtb	r3, r3
 8006298:	2b60      	cmp	r3, #96	; 0x60
 800629a:	d10e      	bne.n	80062ba <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	2220      	movs	r2, #32
 80062a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	2200      	movs	r2, #0
 80062b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80062b2:	6978      	ldr	r0, [r7, #20]
 80062b4:	f7fe fca1 	bl	8004bfa <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80062b8:	e027      	b.n	800630a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80062ba:	7cfb      	ldrb	r3, [r7, #19]
 80062bc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80062c0:	2b28      	cmp	r3, #40	; 0x28
 80062c2:	d117      	bne.n	80062f4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f042 0201 	orr.w	r2, r2, #1
 80062d2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80062e2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	2200      	movs	r2, #0
 80062e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	2228      	movs	r2, #40	; 0x28
 80062ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80062f2:	e007      	b.n	8006304 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	2220      	movs	r2, #32
 80062f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	2200      	movs	r2, #0
 8006300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006304:	6978      	ldr	r0, [r7, #20]
 8006306:	f7fe fc6f 	bl	8004be8 <HAL_I2C_ErrorCallback>
}
 800630a:	bf00      	nop
 800630c:	3718      	adds	r7, #24
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}
 8006312:	bf00      	nop
 8006314:	20000000 	.word	0x20000000
 8006318:	14f8b589 	.word	0x14f8b589

0800631c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	603b      	str	r3, [r7, #0]
 8006328:	4613      	mov	r3, r2
 800632a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800632c:	e025      	b.n	800637a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006334:	d021      	beq.n	800637a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006336:	f7fc fce3 	bl	8002d00 <HAL_GetTick>
 800633a:	4602      	mov	r2, r0
 800633c:	69bb      	ldr	r3, [r7, #24]
 800633e:	1ad3      	subs	r3, r2, r3
 8006340:	683a      	ldr	r2, [r7, #0]
 8006342:	429a      	cmp	r2, r3
 8006344:	d302      	bcc.n	800634c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d116      	bne.n	800637a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2200      	movs	r2, #0
 8006350:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2220      	movs	r2, #32
 8006356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2200      	movs	r2, #0
 800635e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006366:	f043 0220 	orr.w	r2, r3, #32
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2200      	movs	r2, #0
 8006372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e023      	b.n	80063c2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	0c1b      	lsrs	r3, r3, #16
 800637e:	b2db      	uxtb	r3, r3
 8006380:	2b01      	cmp	r3, #1
 8006382:	d10d      	bne.n	80063a0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	695b      	ldr	r3, [r3, #20]
 800638a:	43da      	mvns	r2, r3
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	4013      	ands	r3, r2
 8006390:	b29b      	uxth	r3, r3
 8006392:	2b00      	cmp	r3, #0
 8006394:	bf0c      	ite	eq
 8006396:	2301      	moveq	r3, #1
 8006398:	2300      	movne	r3, #0
 800639a:	b2db      	uxtb	r3, r3
 800639c:	461a      	mov	r2, r3
 800639e:	e00c      	b.n	80063ba <I2C_WaitOnFlagUntilTimeout+0x9e>
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	699b      	ldr	r3, [r3, #24]
 80063a6:	43da      	mvns	r2, r3
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	4013      	ands	r3, r2
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	bf0c      	ite	eq
 80063b2:	2301      	moveq	r3, #1
 80063b4:	2300      	movne	r3, #0
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	461a      	mov	r2, r3
 80063ba:	79fb      	ldrb	r3, [r7, #7]
 80063bc:	429a      	cmp	r2, r3
 80063be:	d0b6      	beq.n	800632e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80063c0:	2300      	movs	r3, #0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3710      	adds	r7, #16
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}

080063ca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80063ca:	b580      	push	{r7, lr}
 80063cc:	b084      	sub	sp, #16
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	60f8      	str	r0, [r7, #12]
 80063d2:	60b9      	str	r1, [r7, #8]
 80063d4:	607a      	str	r2, [r7, #4]
 80063d6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80063d8:	e051      	b.n	800647e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	695b      	ldr	r3, [r3, #20]
 80063e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063e8:	d123      	bne.n	8006432 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063f8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006402:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2200      	movs	r2, #0
 8006408:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2220      	movs	r2, #32
 800640e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2200      	movs	r2, #0
 8006416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800641e:	f043 0204 	orr.w	r2, r3, #4
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2200      	movs	r2, #0
 800642a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	e046      	b.n	80064c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006438:	d021      	beq.n	800647e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800643a:	f7fc fc61 	bl	8002d00 <HAL_GetTick>
 800643e:	4602      	mov	r2, r0
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	1ad3      	subs	r3, r2, r3
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	429a      	cmp	r2, r3
 8006448:	d302      	bcc.n	8006450 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d116      	bne.n	800647e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2200      	movs	r2, #0
 8006454:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2220      	movs	r2, #32
 800645a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2200      	movs	r2, #0
 8006462:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800646a:	f043 0220 	orr.w	r2, r3, #32
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2200      	movs	r2, #0
 8006476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	e020      	b.n	80064c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	0c1b      	lsrs	r3, r3, #16
 8006482:	b2db      	uxtb	r3, r3
 8006484:	2b01      	cmp	r3, #1
 8006486:	d10c      	bne.n	80064a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	695b      	ldr	r3, [r3, #20]
 800648e:	43da      	mvns	r2, r3
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	4013      	ands	r3, r2
 8006494:	b29b      	uxth	r3, r3
 8006496:	2b00      	cmp	r3, #0
 8006498:	bf14      	ite	ne
 800649a:	2301      	movne	r3, #1
 800649c:	2300      	moveq	r3, #0
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	e00b      	b.n	80064ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	699b      	ldr	r3, [r3, #24]
 80064a8:	43da      	mvns	r2, r3
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	4013      	ands	r3, r2
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	bf14      	ite	ne
 80064b4:	2301      	movne	r3, #1
 80064b6:	2300      	moveq	r3, #0
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d18d      	bne.n	80063da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80064be:	2300      	movs	r3, #0
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3710      	adds	r7, #16
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80064d4:	e02d      	b.n	8006532 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80064d6:	68f8      	ldr	r0, [r7, #12]
 80064d8:	f000 f900 	bl	80066dc <I2C_IsAcknowledgeFailed>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d001      	beq.n	80064e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	e02d      	b.n	8006542 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ec:	d021      	beq.n	8006532 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064ee:	f7fc fc07 	bl	8002d00 <HAL_GetTick>
 80064f2:	4602      	mov	r2, r0
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	1ad3      	subs	r3, r2, r3
 80064f8:	68ba      	ldr	r2, [r7, #8]
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d302      	bcc.n	8006504 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d116      	bne.n	8006532 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2200      	movs	r2, #0
 8006508:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2220      	movs	r2, #32
 800650e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2200      	movs	r2, #0
 8006516:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800651e:	f043 0220 	orr.w	r2, r3, #32
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2200      	movs	r2, #0
 800652a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	e007      	b.n	8006542 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	695b      	ldr	r3, [r3, #20]
 8006538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800653c:	2b80      	cmp	r3, #128	; 0x80
 800653e:	d1ca      	bne.n	80064d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006540:	2300      	movs	r3, #0
}
 8006542:	4618      	mov	r0, r3
 8006544:	3710      	adds	r7, #16
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}

0800654a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800654a:	b580      	push	{r7, lr}
 800654c:	b084      	sub	sp, #16
 800654e:	af00      	add	r7, sp, #0
 8006550:	60f8      	str	r0, [r7, #12]
 8006552:	60b9      	str	r1, [r7, #8]
 8006554:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006556:	e02d      	b.n	80065b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006558:	68f8      	ldr	r0, [r7, #12]
 800655a:	f000 f8bf 	bl	80066dc <I2C_IsAcknowledgeFailed>
 800655e:	4603      	mov	r3, r0
 8006560:	2b00      	cmp	r3, #0
 8006562:	d001      	beq.n	8006568 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006564:	2301      	movs	r3, #1
 8006566:	e02d      	b.n	80065c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800656e:	d021      	beq.n	80065b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006570:	f7fc fbc6 	bl	8002d00 <HAL_GetTick>
 8006574:	4602      	mov	r2, r0
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	1ad3      	subs	r3, r2, r3
 800657a:	68ba      	ldr	r2, [r7, #8]
 800657c:	429a      	cmp	r2, r3
 800657e:	d302      	bcc.n	8006586 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d116      	bne.n	80065b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2200      	movs	r2, #0
 800658a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2220      	movs	r2, #32
 8006590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2200      	movs	r2, #0
 8006598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a0:	f043 0220 	orr.w	r2, r3, #32
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2200      	movs	r2, #0
 80065ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	e007      	b.n	80065c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	695b      	ldr	r3, [r3, #20]
 80065ba:	f003 0304 	and.w	r3, r3, #4
 80065be:	2b04      	cmp	r3, #4
 80065c0:	d1ca      	bne.n	8006558 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80065c2:	2300      	movs	r3, #0
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3710      	adds	r7, #16
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b085      	sub	sp, #20
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80065d4:	2300      	movs	r3, #0
 80065d6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80065d8:	4b13      	ldr	r3, [pc, #76]	; (8006628 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	08db      	lsrs	r3, r3, #3
 80065de:	4a13      	ldr	r2, [pc, #76]	; (800662c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80065e0:	fba2 2303 	umull	r2, r3, r2, r3
 80065e4:	0a1a      	lsrs	r2, r3, #8
 80065e6:	4613      	mov	r3, r2
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	4413      	add	r3, r2
 80065ec:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	3b01      	subs	r3, #1
 80065f2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d107      	bne.n	800660a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065fe:	f043 0220 	orr.w	r2, r3, #32
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	e008      	b.n	800661c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006614:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006618:	d0e9      	beq.n	80065ee <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800661a:	2300      	movs	r3, #0
}
 800661c:	4618      	mov	r0, r3
 800661e:	3714      	adds	r7, #20
 8006620:	46bd      	mov	sp, r7
 8006622:	bc80      	pop	{r7}
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop
 8006628:	20000000 	.word	0x20000000
 800662c:	14f8b589 	.word	0x14f8b589

08006630 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b084      	sub	sp, #16
 8006634:	af00      	add	r7, sp, #0
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	60b9      	str	r1, [r7, #8]
 800663a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800663c:	e042      	b.n	80066c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	695b      	ldr	r3, [r3, #20]
 8006644:	f003 0310 	and.w	r3, r3, #16
 8006648:	2b10      	cmp	r3, #16
 800664a:	d119      	bne.n	8006680 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f06f 0210 	mvn.w	r2, #16
 8006654:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2200      	movs	r2, #0
 800665a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2220      	movs	r2, #32
 8006660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2200      	movs	r2, #0
 8006668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2200      	movs	r2, #0
 8006678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	e029      	b.n	80066d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006680:	f7fc fb3e 	bl	8002d00 <HAL_GetTick>
 8006684:	4602      	mov	r2, r0
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	1ad3      	subs	r3, r2, r3
 800668a:	68ba      	ldr	r2, [r7, #8]
 800668c:	429a      	cmp	r2, r3
 800668e:	d302      	bcc.n	8006696 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d116      	bne.n	80066c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2200      	movs	r2, #0
 800669a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2220      	movs	r2, #32
 80066a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2200      	movs	r2, #0
 80066a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b0:	f043 0220 	orr.w	r2, r3, #32
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	e007      	b.n	80066d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	695b      	ldr	r3, [r3, #20]
 80066ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ce:	2b40      	cmp	r3, #64	; 0x40
 80066d0:	d1b5      	bne.n	800663e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80066d2:	2300      	movs	r3, #0
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3710      	adds	r7, #16
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}

080066dc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80066dc:	b480      	push	{r7}
 80066de:	b083      	sub	sp, #12
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	695b      	ldr	r3, [r3, #20]
 80066ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066f2:	d11b      	bne.n	800672c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80066fc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2200      	movs	r2, #0
 8006702:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2220      	movs	r2, #32
 8006708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006718:	f043 0204 	orr.w	r2, r3, #4
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	e000      	b.n	800672e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800672c:	2300      	movs	r3, #0
}
 800672e:	4618      	mov	r0, r3
 8006730:	370c      	adds	r7, #12
 8006732:	46bd      	mov	sp, r7
 8006734:	bc80      	pop	{r7}
 8006736:	4770      	bx	lr

08006738 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006738:	b480      	push	{r7}
 800673a:	b083      	sub	sp, #12
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006744:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006748:	d103      	bne.n	8006752 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2201      	movs	r2, #1
 800674e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006750:	e007      	b.n	8006762 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006756:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800675a:	d102      	bne.n	8006762 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2208      	movs	r2, #8
 8006760:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006762:	bf00      	nop
 8006764:	370c      	adds	r7, #12
 8006766:	46bd      	mov	sp, r7
 8006768:	bc80      	pop	{r7}
 800676a:	4770      	bx	lr

0800676c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b086      	sub	sp, #24
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d101      	bne.n	800677e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800677a:	2301      	movs	r3, #1
 800677c:	e272      	b.n	8006c64 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f003 0301 	and.w	r3, r3, #1
 8006786:	2b00      	cmp	r3, #0
 8006788:	f000 8087 	beq.w	800689a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800678c:	4b92      	ldr	r3, [pc, #584]	; (80069d8 <HAL_RCC_OscConfig+0x26c>)
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	f003 030c 	and.w	r3, r3, #12
 8006794:	2b04      	cmp	r3, #4
 8006796:	d00c      	beq.n	80067b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006798:	4b8f      	ldr	r3, [pc, #572]	; (80069d8 <HAL_RCC_OscConfig+0x26c>)
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	f003 030c 	and.w	r3, r3, #12
 80067a0:	2b08      	cmp	r3, #8
 80067a2:	d112      	bne.n	80067ca <HAL_RCC_OscConfig+0x5e>
 80067a4:	4b8c      	ldr	r3, [pc, #560]	; (80069d8 <HAL_RCC_OscConfig+0x26c>)
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067b0:	d10b      	bne.n	80067ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067b2:	4b89      	ldr	r3, [pc, #548]	; (80069d8 <HAL_RCC_OscConfig+0x26c>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d06c      	beq.n	8006898 <HAL_RCC_OscConfig+0x12c>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d168      	bne.n	8006898 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	e24c      	b.n	8006c64 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067d2:	d106      	bne.n	80067e2 <HAL_RCC_OscConfig+0x76>
 80067d4:	4b80      	ldr	r3, [pc, #512]	; (80069d8 <HAL_RCC_OscConfig+0x26c>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a7f      	ldr	r2, [pc, #508]	; (80069d8 <HAL_RCC_OscConfig+0x26c>)
 80067da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067de:	6013      	str	r3, [r2, #0]
 80067e0:	e02e      	b.n	8006840 <HAL_RCC_OscConfig+0xd4>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d10c      	bne.n	8006804 <HAL_RCC_OscConfig+0x98>
 80067ea:	4b7b      	ldr	r3, [pc, #492]	; (80069d8 <HAL_RCC_OscConfig+0x26c>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a7a      	ldr	r2, [pc, #488]	; (80069d8 <HAL_RCC_OscConfig+0x26c>)
 80067f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067f4:	6013      	str	r3, [r2, #0]
 80067f6:	4b78      	ldr	r3, [pc, #480]	; (80069d8 <HAL_RCC_OscConfig+0x26c>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a77      	ldr	r2, [pc, #476]	; (80069d8 <HAL_RCC_OscConfig+0x26c>)
 80067fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006800:	6013      	str	r3, [r2, #0]
 8006802:	e01d      	b.n	8006840 <HAL_RCC_OscConfig+0xd4>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800680c:	d10c      	bne.n	8006828 <HAL_RCC_OscConfig+0xbc>
 800680e:	4b72      	ldr	r3, [pc, #456]	; (80069d8 <HAL_RCC_OscConfig+0x26c>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a71      	ldr	r2, [pc, #452]	; (80069d8 <HAL_RCC_OscConfig+0x26c>)
 8006814:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006818:	6013      	str	r3, [r2, #0]
 800681a:	4b6f      	ldr	r3, [pc, #444]	; (80069d8 <HAL_RCC_OscConfig+0x26c>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a6e      	ldr	r2, [pc, #440]	; (80069d8 <HAL_RCC_OscConfig+0x26c>)
 8006820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006824:	6013      	str	r3, [r2, #0]
 8006826:	e00b      	b.n	8006840 <HAL_RCC_OscConfig+0xd4>
 8006828:	4b6b      	ldr	r3, [pc, #428]	; (80069d8 <HAL_RCC_OscConfig+0x26c>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a6a      	ldr	r2, [pc, #424]	; (80069d8 <HAL_RCC_OscConfig+0x26c>)
 800682e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006832:	6013      	str	r3, [r2, #0]
 8006834:	4b68      	ldr	r3, [pc, #416]	; (80069d8 <HAL_RCC_OscConfig+0x26c>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a67      	ldr	r2, [pc, #412]	; (80069d8 <HAL_RCC_OscConfig+0x26c>)
 800683a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800683e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d013      	beq.n	8006870 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006848:	f7fc fa5a 	bl	8002d00 <HAL_GetTick>
 800684c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800684e:	e008      	b.n	8006862 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006850:	f7fc fa56 	bl	8002d00 <HAL_GetTick>
 8006854:	4602      	mov	r2, r0
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	1ad3      	subs	r3, r2, r3
 800685a:	2b64      	cmp	r3, #100	; 0x64
 800685c:	d901      	bls.n	8006862 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800685e:	2303      	movs	r3, #3
 8006860:	e200      	b.n	8006c64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006862:	4b5d      	ldr	r3, [pc, #372]	; (80069d8 <HAL_RCC_OscConfig+0x26c>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800686a:	2b00      	cmp	r3, #0
 800686c:	d0f0      	beq.n	8006850 <HAL_RCC_OscConfig+0xe4>
 800686e:	e014      	b.n	800689a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006870:	f7fc fa46 	bl	8002d00 <HAL_GetTick>
 8006874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006876:	e008      	b.n	800688a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006878:	f7fc fa42 	bl	8002d00 <HAL_GetTick>
 800687c:	4602      	mov	r2, r0
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	1ad3      	subs	r3, r2, r3
 8006882:	2b64      	cmp	r3, #100	; 0x64
 8006884:	d901      	bls.n	800688a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006886:	2303      	movs	r3, #3
 8006888:	e1ec      	b.n	8006c64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800688a:	4b53      	ldr	r3, [pc, #332]	; (80069d8 <HAL_RCC_OscConfig+0x26c>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006892:	2b00      	cmp	r3, #0
 8006894:	d1f0      	bne.n	8006878 <HAL_RCC_OscConfig+0x10c>
 8006896:	e000      	b.n	800689a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006898:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f003 0302 	and.w	r3, r3, #2
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d063      	beq.n	800696e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80068a6:	4b4c      	ldr	r3, [pc, #304]	; (80069d8 <HAL_RCC_OscConfig+0x26c>)
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	f003 030c 	and.w	r3, r3, #12
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d00b      	beq.n	80068ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80068b2:	4b49      	ldr	r3, [pc, #292]	; (80069d8 <HAL_RCC_OscConfig+0x26c>)
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	f003 030c 	and.w	r3, r3, #12
 80068ba:	2b08      	cmp	r3, #8
 80068bc:	d11c      	bne.n	80068f8 <HAL_RCC_OscConfig+0x18c>
 80068be:	4b46      	ldr	r3, [pc, #280]	; (80069d8 <HAL_RCC_OscConfig+0x26c>)
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d116      	bne.n	80068f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80068ca:	4b43      	ldr	r3, [pc, #268]	; (80069d8 <HAL_RCC_OscConfig+0x26c>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f003 0302 	and.w	r3, r3, #2
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d005      	beq.n	80068e2 <HAL_RCC_OscConfig+0x176>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	691b      	ldr	r3, [r3, #16]
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d001      	beq.n	80068e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	e1c0      	b.n	8006c64 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068e2:	4b3d      	ldr	r3, [pc, #244]	; (80069d8 <HAL_RCC_OscConfig+0x26c>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	695b      	ldr	r3, [r3, #20]
 80068ee:	00db      	lsls	r3, r3, #3
 80068f0:	4939      	ldr	r1, [pc, #228]	; (80069d8 <HAL_RCC_OscConfig+0x26c>)
 80068f2:	4313      	orrs	r3, r2
 80068f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80068f6:	e03a      	b.n	800696e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	691b      	ldr	r3, [r3, #16]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d020      	beq.n	8006942 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006900:	4b36      	ldr	r3, [pc, #216]	; (80069dc <HAL_RCC_OscConfig+0x270>)
 8006902:	2201      	movs	r2, #1
 8006904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006906:	f7fc f9fb 	bl	8002d00 <HAL_GetTick>
 800690a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800690c:	e008      	b.n	8006920 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800690e:	f7fc f9f7 	bl	8002d00 <HAL_GetTick>
 8006912:	4602      	mov	r2, r0
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	1ad3      	subs	r3, r2, r3
 8006918:	2b02      	cmp	r3, #2
 800691a:	d901      	bls.n	8006920 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800691c:	2303      	movs	r3, #3
 800691e:	e1a1      	b.n	8006c64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006920:	4b2d      	ldr	r3, [pc, #180]	; (80069d8 <HAL_RCC_OscConfig+0x26c>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 0302 	and.w	r3, r3, #2
 8006928:	2b00      	cmp	r3, #0
 800692a:	d0f0      	beq.n	800690e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800692c:	4b2a      	ldr	r3, [pc, #168]	; (80069d8 <HAL_RCC_OscConfig+0x26c>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	695b      	ldr	r3, [r3, #20]
 8006938:	00db      	lsls	r3, r3, #3
 800693a:	4927      	ldr	r1, [pc, #156]	; (80069d8 <HAL_RCC_OscConfig+0x26c>)
 800693c:	4313      	orrs	r3, r2
 800693e:	600b      	str	r3, [r1, #0]
 8006940:	e015      	b.n	800696e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006942:	4b26      	ldr	r3, [pc, #152]	; (80069dc <HAL_RCC_OscConfig+0x270>)
 8006944:	2200      	movs	r2, #0
 8006946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006948:	f7fc f9da 	bl	8002d00 <HAL_GetTick>
 800694c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800694e:	e008      	b.n	8006962 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006950:	f7fc f9d6 	bl	8002d00 <HAL_GetTick>
 8006954:	4602      	mov	r2, r0
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	1ad3      	subs	r3, r2, r3
 800695a:	2b02      	cmp	r3, #2
 800695c:	d901      	bls.n	8006962 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800695e:	2303      	movs	r3, #3
 8006960:	e180      	b.n	8006c64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006962:	4b1d      	ldr	r3, [pc, #116]	; (80069d8 <HAL_RCC_OscConfig+0x26c>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f003 0302 	and.w	r3, r3, #2
 800696a:	2b00      	cmp	r3, #0
 800696c:	d1f0      	bne.n	8006950 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f003 0308 	and.w	r3, r3, #8
 8006976:	2b00      	cmp	r3, #0
 8006978:	d03a      	beq.n	80069f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	699b      	ldr	r3, [r3, #24]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d019      	beq.n	80069b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006982:	4b17      	ldr	r3, [pc, #92]	; (80069e0 <HAL_RCC_OscConfig+0x274>)
 8006984:	2201      	movs	r2, #1
 8006986:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006988:	f7fc f9ba 	bl	8002d00 <HAL_GetTick>
 800698c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800698e:	e008      	b.n	80069a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006990:	f7fc f9b6 	bl	8002d00 <HAL_GetTick>
 8006994:	4602      	mov	r2, r0
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	1ad3      	subs	r3, r2, r3
 800699a:	2b02      	cmp	r3, #2
 800699c:	d901      	bls.n	80069a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800699e:	2303      	movs	r3, #3
 80069a0:	e160      	b.n	8006c64 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069a2:	4b0d      	ldr	r3, [pc, #52]	; (80069d8 <HAL_RCC_OscConfig+0x26c>)
 80069a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a6:	f003 0302 	and.w	r3, r3, #2
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d0f0      	beq.n	8006990 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80069ae:	2001      	movs	r0, #1
 80069b0:	f000 fad8 	bl	8006f64 <RCC_Delay>
 80069b4:	e01c      	b.n	80069f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80069b6:	4b0a      	ldr	r3, [pc, #40]	; (80069e0 <HAL_RCC_OscConfig+0x274>)
 80069b8:	2200      	movs	r2, #0
 80069ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069bc:	f7fc f9a0 	bl	8002d00 <HAL_GetTick>
 80069c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069c2:	e00f      	b.n	80069e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069c4:	f7fc f99c 	bl	8002d00 <HAL_GetTick>
 80069c8:	4602      	mov	r2, r0
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	1ad3      	subs	r3, r2, r3
 80069ce:	2b02      	cmp	r3, #2
 80069d0:	d908      	bls.n	80069e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80069d2:	2303      	movs	r3, #3
 80069d4:	e146      	b.n	8006c64 <HAL_RCC_OscConfig+0x4f8>
 80069d6:	bf00      	nop
 80069d8:	40021000 	.word	0x40021000
 80069dc:	42420000 	.word	0x42420000
 80069e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069e4:	4b92      	ldr	r3, [pc, #584]	; (8006c30 <HAL_RCC_OscConfig+0x4c4>)
 80069e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e8:	f003 0302 	and.w	r3, r3, #2
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d1e9      	bne.n	80069c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f003 0304 	and.w	r3, r3, #4
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	f000 80a6 	beq.w	8006b4a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80069fe:	2300      	movs	r3, #0
 8006a00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a02:	4b8b      	ldr	r3, [pc, #556]	; (8006c30 <HAL_RCC_OscConfig+0x4c4>)
 8006a04:	69db      	ldr	r3, [r3, #28]
 8006a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d10d      	bne.n	8006a2a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a0e:	4b88      	ldr	r3, [pc, #544]	; (8006c30 <HAL_RCC_OscConfig+0x4c4>)
 8006a10:	69db      	ldr	r3, [r3, #28]
 8006a12:	4a87      	ldr	r2, [pc, #540]	; (8006c30 <HAL_RCC_OscConfig+0x4c4>)
 8006a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a18:	61d3      	str	r3, [r2, #28]
 8006a1a:	4b85      	ldr	r3, [pc, #532]	; (8006c30 <HAL_RCC_OscConfig+0x4c4>)
 8006a1c:	69db      	ldr	r3, [r3, #28]
 8006a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a22:	60bb      	str	r3, [r7, #8]
 8006a24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a26:	2301      	movs	r3, #1
 8006a28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a2a:	4b82      	ldr	r3, [pc, #520]	; (8006c34 <HAL_RCC_OscConfig+0x4c8>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d118      	bne.n	8006a68 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a36:	4b7f      	ldr	r3, [pc, #508]	; (8006c34 <HAL_RCC_OscConfig+0x4c8>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a7e      	ldr	r2, [pc, #504]	; (8006c34 <HAL_RCC_OscConfig+0x4c8>)
 8006a3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a42:	f7fc f95d 	bl	8002d00 <HAL_GetTick>
 8006a46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a48:	e008      	b.n	8006a5c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a4a:	f7fc f959 	bl	8002d00 <HAL_GetTick>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	1ad3      	subs	r3, r2, r3
 8006a54:	2b64      	cmp	r3, #100	; 0x64
 8006a56:	d901      	bls.n	8006a5c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006a58:	2303      	movs	r3, #3
 8006a5a:	e103      	b.n	8006c64 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a5c:	4b75      	ldr	r3, [pc, #468]	; (8006c34 <HAL_RCC_OscConfig+0x4c8>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d0f0      	beq.n	8006a4a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	68db      	ldr	r3, [r3, #12]
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d106      	bne.n	8006a7e <HAL_RCC_OscConfig+0x312>
 8006a70:	4b6f      	ldr	r3, [pc, #444]	; (8006c30 <HAL_RCC_OscConfig+0x4c4>)
 8006a72:	6a1b      	ldr	r3, [r3, #32]
 8006a74:	4a6e      	ldr	r2, [pc, #440]	; (8006c30 <HAL_RCC_OscConfig+0x4c4>)
 8006a76:	f043 0301 	orr.w	r3, r3, #1
 8006a7a:	6213      	str	r3, [r2, #32]
 8006a7c:	e02d      	b.n	8006ada <HAL_RCC_OscConfig+0x36e>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	68db      	ldr	r3, [r3, #12]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d10c      	bne.n	8006aa0 <HAL_RCC_OscConfig+0x334>
 8006a86:	4b6a      	ldr	r3, [pc, #424]	; (8006c30 <HAL_RCC_OscConfig+0x4c4>)
 8006a88:	6a1b      	ldr	r3, [r3, #32]
 8006a8a:	4a69      	ldr	r2, [pc, #420]	; (8006c30 <HAL_RCC_OscConfig+0x4c4>)
 8006a8c:	f023 0301 	bic.w	r3, r3, #1
 8006a90:	6213      	str	r3, [r2, #32]
 8006a92:	4b67      	ldr	r3, [pc, #412]	; (8006c30 <HAL_RCC_OscConfig+0x4c4>)
 8006a94:	6a1b      	ldr	r3, [r3, #32]
 8006a96:	4a66      	ldr	r2, [pc, #408]	; (8006c30 <HAL_RCC_OscConfig+0x4c4>)
 8006a98:	f023 0304 	bic.w	r3, r3, #4
 8006a9c:	6213      	str	r3, [r2, #32]
 8006a9e:	e01c      	b.n	8006ada <HAL_RCC_OscConfig+0x36e>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	2b05      	cmp	r3, #5
 8006aa6:	d10c      	bne.n	8006ac2 <HAL_RCC_OscConfig+0x356>
 8006aa8:	4b61      	ldr	r3, [pc, #388]	; (8006c30 <HAL_RCC_OscConfig+0x4c4>)
 8006aaa:	6a1b      	ldr	r3, [r3, #32]
 8006aac:	4a60      	ldr	r2, [pc, #384]	; (8006c30 <HAL_RCC_OscConfig+0x4c4>)
 8006aae:	f043 0304 	orr.w	r3, r3, #4
 8006ab2:	6213      	str	r3, [r2, #32]
 8006ab4:	4b5e      	ldr	r3, [pc, #376]	; (8006c30 <HAL_RCC_OscConfig+0x4c4>)
 8006ab6:	6a1b      	ldr	r3, [r3, #32]
 8006ab8:	4a5d      	ldr	r2, [pc, #372]	; (8006c30 <HAL_RCC_OscConfig+0x4c4>)
 8006aba:	f043 0301 	orr.w	r3, r3, #1
 8006abe:	6213      	str	r3, [r2, #32]
 8006ac0:	e00b      	b.n	8006ada <HAL_RCC_OscConfig+0x36e>
 8006ac2:	4b5b      	ldr	r3, [pc, #364]	; (8006c30 <HAL_RCC_OscConfig+0x4c4>)
 8006ac4:	6a1b      	ldr	r3, [r3, #32]
 8006ac6:	4a5a      	ldr	r2, [pc, #360]	; (8006c30 <HAL_RCC_OscConfig+0x4c4>)
 8006ac8:	f023 0301 	bic.w	r3, r3, #1
 8006acc:	6213      	str	r3, [r2, #32]
 8006ace:	4b58      	ldr	r3, [pc, #352]	; (8006c30 <HAL_RCC_OscConfig+0x4c4>)
 8006ad0:	6a1b      	ldr	r3, [r3, #32]
 8006ad2:	4a57      	ldr	r2, [pc, #348]	; (8006c30 <HAL_RCC_OscConfig+0x4c4>)
 8006ad4:	f023 0304 	bic.w	r3, r3, #4
 8006ad8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	68db      	ldr	r3, [r3, #12]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d015      	beq.n	8006b0e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ae2:	f7fc f90d 	bl	8002d00 <HAL_GetTick>
 8006ae6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ae8:	e00a      	b.n	8006b00 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006aea:	f7fc f909 	bl	8002d00 <HAL_GetTick>
 8006aee:	4602      	mov	r2, r0
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	1ad3      	subs	r3, r2, r3
 8006af4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d901      	bls.n	8006b00 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006afc:	2303      	movs	r3, #3
 8006afe:	e0b1      	b.n	8006c64 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b00:	4b4b      	ldr	r3, [pc, #300]	; (8006c30 <HAL_RCC_OscConfig+0x4c4>)
 8006b02:	6a1b      	ldr	r3, [r3, #32]
 8006b04:	f003 0302 	and.w	r3, r3, #2
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d0ee      	beq.n	8006aea <HAL_RCC_OscConfig+0x37e>
 8006b0c:	e014      	b.n	8006b38 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b0e:	f7fc f8f7 	bl	8002d00 <HAL_GetTick>
 8006b12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b14:	e00a      	b.n	8006b2c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b16:	f7fc f8f3 	bl	8002d00 <HAL_GetTick>
 8006b1a:	4602      	mov	r2, r0
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	1ad3      	subs	r3, r2, r3
 8006b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d901      	bls.n	8006b2c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006b28:	2303      	movs	r3, #3
 8006b2a:	e09b      	b.n	8006c64 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b2c:	4b40      	ldr	r3, [pc, #256]	; (8006c30 <HAL_RCC_OscConfig+0x4c4>)
 8006b2e:	6a1b      	ldr	r3, [r3, #32]
 8006b30:	f003 0302 	and.w	r3, r3, #2
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d1ee      	bne.n	8006b16 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006b38:	7dfb      	ldrb	r3, [r7, #23]
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	d105      	bne.n	8006b4a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b3e:	4b3c      	ldr	r3, [pc, #240]	; (8006c30 <HAL_RCC_OscConfig+0x4c4>)
 8006b40:	69db      	ldr	r3, [r3, #28]
 8006b42:	4a3b      	ldr	r2, [pc, #236]	; (8006c30 <HAL_RCC_OscConfig+0x4c4>)
 8006b44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b48:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	69db      	ldr	r3, [r3, #28]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	f000 8087 	beq.w	8006c62 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006b54:	4b36      	ldr	r3, [pc, #216]	; (8006c30 <HAL_RCC_OscConfig+0x4c4>)
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	f003 030c 	and.w	r3, r3, #12
 8006b5c:	2b08      	cmp	r3, #8
 8006b5e:	d061      	beq.n	8006c24 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	69db      	ldr	r3, [r3, #28]
 8006b64:	2b02      	cmp	r3, #2
 8006b66:	d146      	bne.n	8006bf6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b68:	4b33      	ldr	r3, [pc, #204]	; (8006c38 <HAL_RCC_OscConfig+0x4cc>)
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b6e:	f7fc f8c7 	bl	8002d00 <HAL_GetTick>
 8006b72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006b74:	e008      	b.n	8006b88 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b76:	f7fc f8c3 	bl	8002d00 <HAL_GetTick>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	1ad3      	subs	r3, r2, r3
 8006b80:	2b02      	cmp	r3, #2
 8006b82:	d901      	bls.n	8006b88 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006b84:	2303      	movs	r3, #3
 8006b86:	e06d      	b.n	8006c64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006b88:	4b29      	ldr	r3, [pc, #164]	; (8006c30 <HAL_RCC_OscConfig+0x4c4>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d1f0      	bne.n	8006b76 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6a1b      	ldr	r3, [r3, #32]
 8006b98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b9c:	d108      	bne.n	8006bb0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006b9e:	4b24      	ldr	r3, [pc, #144]	; (8006c30 <HAL_RCC_OscConfig+0x4c4>)
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	4921      	ldr	r1, [pc, #132]	; (8006c30 <HAL_RCC_OscConfig+0x4c4>)
 8006bac:	4313      	orrs	r3, r2
 8006bae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006bb0:	4b1f      	ldr	r3, [pc, #124]	; (8006c30 <HAL_RCC_OscConfig+0x4c4>)
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6a19      	ldr	r1, [r3, #32]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc0:	430b      	orrs	r3, r1
 8006bc2:	491b      	ldr	r1, [pc, #108]	; (8006c30 <HAL_RCC_OscConfig+0x4c4>)
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006bc8:	4b1b      	ldr	r3, [pc, #108]	; (8006c38 <HAL_RCC_OscConfig+0x4cc>)
 8006bca:	2201      	movs	r2, #1
 8006bcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bce:	f7fc f897 	bl	8002d00 <HAL_GetTick>
 8006bd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006bd4:	e008      	b.n	8006be8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bd6:	f7fc f893 	bl	8002d00 <HAL_GetTick>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	1ad3      	subs	r3, r2, r3
 8006be0:	2b02      	cmp	r3, #2
 8006be2:	d901      	bls.n	8006be8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006be4:	2303      	movs	r3, #3
 8006be6:	e03d      	b.n	8006c64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006be8:	4b11      	ldr	r3, [pc, #68]	; (8006c30 <HAL_RCC_OscConfig+0x4c4>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d0f0      	beq.n	8006bd6 <HAL_RCC_OscConfig+0x46a>
 8006bf4:	e035      	b.n	8006c62 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bf6:	4b10      	ldr	r3, [pc, #64]	; (8006c38 <HAL_RCC_OscConfig+0x4cc>)
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bfc:	f7fc f880 	bl	8002d00 <HAL_GetTick>
 8006c00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c02:	e008      	b.n	8006c16 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c04:	f7fc f87c 	bl	8002d00 <HAL_GetTick>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	1ad3      	subs	r3, r2, r3
 8006c0e:	2b02      	cmp	r3, #2
 8006c10:	d901      	bls.n	8006c16 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006c12:	2303      	movs	r3, #3
 8006c14:	e026      	b.n	8006c64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c16:	4b06      	ldr	r3, [pc, #24]	; (8006c30 <HAL_RCC_OscConfig+0x4c4>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d1f0      	bne.n	8006c04 <HAL_RCC_OscConfig+0x498>
 8006c22:	e01e      	b.n	8006c62 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	69db      	ldr	r3, [r3, #28]
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d107      	bne.n	8006c3c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	e019      	b.n	8006c64 <HAL_RCC_OscConfig+0x4f8>
 8006c30:	40021000 	.word	0x40021000
 8006c34:	40007000 	.word	0x40007000
 8006c38:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006c3c:	4b0b      	ldr	r3, [pc, #44]	; (8006c6c <HAL_RCC_OscConfig+0x500>)
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6a1b      	ldr	r3, [r3, #32]
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d106      	bne.n	8006c5e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d001      	beq.n	8006c62 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	e000      	b.n	8006c64 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006c62:	2300      	movs	r3, #0
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3718      	adds	r7, #24
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}
 8006c6c:	40021000 	.word	0x40021000

08006c70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d101      	bne.n	8006c84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c80:	2301      	movs	r3, #1
 8006c82:	e0d0      	b.n	8006e26 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006c84:	4b6a      	ldr	r3, [pc, #424]	; (8006e30 <HAL_RCC_ClockConfig+0x1c0>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f003 0307 	and.w	r3, r3, #7
 8006c8c:	683a      	ldr	r2, [r7, #0]
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	d910      	bls.n	8006cb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c92:	4b67      	ldr	r3, [pc, #412]	; (8006e30 <HAL_RCC_ClockConfig+0x1c0>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f023 0207 	bic.w	r2, r3, #7
 8006c9a:	4965      	ldr	r1, [pc, #404]	; (8006e30 <HAL_RCC_ClockConfig+0x1c0>)
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ca2:	4b63      	ldr	r3, [pc, #396]	; (8006e30 <HAL_RCC_ClockConfig+0x1c0>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f003 0307 	and.w	r3, r3, #7
 8006caa:	683a      	ldr	r2, [r7, #0]
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d001      	beq.n	8006cb4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	e0b8      	b.n	8006e26 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f003 0302 	and.w	r3, r3, #2
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d020      	beq.n	8006d02 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f003 0304 	and.w	r3, r3, #4
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d005      	beq.n	8006cd8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ccc:	4b59      	ldr	r3, [pc, #356]	; (8006e34 <HAL_RCC_ClockConfig+0x1c4>)
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	4a58      	ldr	r2, [pc, #352]	; (8006e34 <HAL_RCC_ClockConfig+0x1c4>)
 8006cd2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006cd6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f003 0308 	and.w	r3, r3, #8
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d005      	beq.n	8006cf0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006ce4:	4b53      	ldr	r3, [pc, #332]	; (8006e34 <HAL_RCC_ClockConfig+0x1c4>)
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	4a52      	ldr	r2, [pc, #328]	; (8006e34 <HAL_RCC_ClockConfig+0x1c4>)
 8006cea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006cee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006cf0:	4b50      	ldr	r3, [pc, #320]	; (8006e34 <HAL_RCC_ClockConfig+0x1c4>)
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	494d      	ldr	r1, [pc, #308]	; (8006e34 <HAL_RCC_ClockConfig+0x1c4>)
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f003 0301 	and.w	r3, r3, #1
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d040      	beq.n	8006d90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d107      	bne.n	8006d26 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d16:	4b47      	ldr	r3, [pc, #284]	; (8006e34 <HAL_RCC_ClockConfig+0x1c4>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d115      	bne.n	8006d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	e07f      	b.n	8006e26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	2b02      	cmp	r3, #2
 8006d2c:	d107      	bne.n	8006d3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d2e:	4b41      	ldr	r3, [pc, #260]	; (8006e34 <HAL_RCC_ClockConfig+0x1c4>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d109      	bne.n	8006d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	e073      	b.n	8006e26 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d3e:	4b3d      	ldr	r3, [pc, #244]	; (8006e34 <HAL_RCC_ClockConfig+0x1c4>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f003 0302 	and.w	r3, r3, #2
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d101      	bne.n	8006d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e06b      	b.n	8006e26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006d4e:	4b39      	ldr	r3, [pc, #228]	; (8006e34 <HAL_RCC_ClockConfig+0x1c4>)
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	f023 0203 	bic.w	r2, r3, #3
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	4936      	ldr	r1, [pc, #216]	; (8006e34 <HAL_RCC_ClockConfig+0x1c4>)
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006d60:	f7fb ffce 	bl	8002d00 <HAL_GetTick>
 8006d64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d66:	e00a      	b.n	8006d7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d68:	f7fb ffca 	bl	8002d00 <HAL_GetTick>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	1ad3      	subs	r3, r2, r3
 8006d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d901      	bls.n	8006d7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006d7a:	2303      	movs	r3, #3
 8006d7c:	e053      	b.n	8006e26 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d7e:	4b2d      	ldr	r3, [pc, #180]	; (8006e34 <HAL_RCC_ClockConfig+0x1c4>)
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	f003 020c 	and.w	r2, r3, #12
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d1eb      	bne.n	8006d68 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006d90:	4b27      	ldr	r3, [pc, #156]	; (8006e30 <HAL_RCC_ClockConfig+0x1c0>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f003 0307 	and.w	r3, r3, #7
 8006d98:	683a      	ldr	r2, [r7, #0]
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d210      	bcs.n	8006dc0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d9e:	4b24      	ldr	r3, [pc, #144]	; (8006e30 <HAL_RCC_ClockConfig+0x1c0>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f023 0207 	bic.w	r2, r3, #7
 8006da6:	4922      	ldr	r1, [pc, #136]	; (8006e30 <HAL_RCC_ClockConfig+0x1c0>)
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	4313      	orrs	r3, r2
 8006dac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dae:	4b20      	ldr	r3, [pc, #128]	; (8006e30 <HAL_RCC_ClockConfig+0x1c0>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f003 0307 	and.w	r3, r3, #7
 8006db6:	683a      	ldr	r2, [r7, #0]
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d001      	beq.n	8006dc0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	e032      	b.n	8006e26 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f003 0304 	and.w	r3, r3, #4
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d008      	beq.n	8006dde <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006dcc:	4b19      	ldr	r3, [pc, #100]	; (8006e34 <HAL_RCC_ClockConfig+0x1c4>)
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	68db      	ldr	r3, [r3, #12]
 8006dd8:	4916      	ldr	r1, [pc, #88]	; (8006e34 <HAL_RCC_ClockConfig+0x1c4>)
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f003 0308 	and.w	r3, r3, #8
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d009      	beq.n	8006dfe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006dea:	4b12      	ldr	r3, [pc, #72]	; (8006e34 <HAL_RCC_ClockConfig+0x1c4>)
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	691b      	ldr	r3, [r3, #16]
 8006df6:	00db      	lsls	r3, r3, #3
 8006df8:	490e      	ldr	r1, [pc, #56]	; (8006e34 <HAL_RCC_ClockConfig+0x1c4>)
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006dfe:	f000 f821 	bl	8006e44 <HAL_RCC_GetSysClockFreq>
 8006e02:	4602      	mov	r2, r0
 8006e04:	4b0b      	ldr	r3, [pc, #44]	; (8006e34 <HAL_RCC_ClockConfig+0x1c4>)
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	091b      	lsrs	r3, r3, #4
 8006e0a:	f003 030f 	and.w	r3, r3, #15
 8006e0e:	490a      	ldr	r1, [pc, #40]	; (8006e38 <HAL_RCC_ClockConfig+0x1c8>)
 8006e10:	5ccb      	ldrb	r3, [r1, r3]
 8006e12:	fa22 f303 	lsr.w	r3, r2, r3
 8006e16:	4a09      	ldr	r2, [pc, #36]	; (8006e3c <HAL_RCC_ClockConfig+0x1cc>)
 8006e18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006e1a:	4b09      	ldr	r3, [pc, #36]	; (8006e40 <HAL_RCC_ClockConfig+0x1d0>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f7fb ff2c 	bl	8002c7c <HAL_InitTick>

  return HAL_OK;
 8006e24:	2300      	movs	r3, #0
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	3710      	adds	r7, #16
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}
 8006e2e:	bf00      	nop
 8006e30:	40022000 	.word	0x40022000
 8006e34:	40021000 	.word	0x40021000
 8006e38:	0800731c 	.word	0x0800731c
 8006e3c:	20000000 	.word	0x20000000
 8006e40:	20000004 	.word	0x20000004

08006e44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e44:	b490      	push	{r4, r7}
 8006e46:	b08a      	sub	sp, #40	; 0x28
 8006e48:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006e4a:	4b29      	ldr	r3, [pc, #164]	; (8006ef0 <HAL_RCC_GetSysClockFreq+0xac>)
 8006e4c:	1d3c      	adds	r4, r7, #4
 8006e4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006e50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006e54:	f240 2301 	movw	r3, #513	; 0x201
 8006e58:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	61fb      	str	r3, [r7, #28]
 8006e5e:	2300      	movs	r3, #0
 8006e60:	61bb      	str	r3, [r7, #24]
 8006e62:	2300      	movs	r3, #0
 8006e64:	627b      	str	r3, [r7, #36]	; 0x24
 8006e66:	2300      	movs	r3, #0
 8006e68:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006e6e:	4b21      	ldr	r3, [pc, #132]	; (8006ef4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006e74:	69fb      	ldr	r3, [r7, #28]
 8006e76:	f003 030c 	and.w	r3, r3, #12
 8006e7a:	2b04      	cmp	r3, #4
 8006e7c:	d002      	beq.n	8006e84 <HAL_RCC_GetSysClockFreq+0x40>
 8006e7e:	2b08      	cmp	r3, #8
 8006e80:	d003      	beq.n	8006e8a <HAL_RCC_GetSysClockFreq+0x46>
 8006e82:	e02b      	b.n	8006edc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006e84:	4b1c      	ldr	r3, [pc, #112]	; (8006ef8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006e86:	623b      	str	r3, [r7, #32]
      break;
 8006e88:	e02b      	b.n	8006ee2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006e8a:	69fb      	ldr	r3, [r7, #28]
 8006e8c:	0c9b      	lsrs	r3, r3, #18
 8006e8e:	f003 030f 	and.w	r3, r3, #15
 8006e92:	3328      	adds	r3, #40	; 0x28
 8006e94:	443b      	add	r3, r7
 8006e96:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006e9a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006e9c:	69fb      	ldr	r3, [r7, #28]
 8006e9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d012      	beq.n	8006ecc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006ea6:	4b13      	ldr	r3, [pc, #76]	; (8006ef4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	0c5b      	lsrs	r3, r3, #17
 8006eac:	f003 0301 	and.w	r3, r3, #1
 8006eb0:	3328      	adds	r3, #40	; 0x28
 8006eb2:	443b      	add	r3, r7
 8006eb4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006eb8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	4a0e      	ldr	r2, [pc, #56]	; (8006ef8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006ebe:	fb03 f202 	mul.w	r2, r3, r2
 8006ec2:	69bb      	ldr	r3, [r7, #24]
 8006ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ec8:	627b      	str	r3, [r7, #36]	; 0x24
 8006eca:	e004      	b.n	8006ed6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	4a0b      	ldr	r2, [pc, #44]	; (8006efc <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ed0:	fb02 f303 	mul.w	r3, r2, r3
 8006ed4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed8:	623b      	str	r3, [r7, #32]
      break;
 8006eda:	e002      	b.n	8006ee2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006edc:	4b06      	ldr	r3, [pc, #24]	; (8006ef8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006ede:	623b      	str	r3, [r7, #32]
      break;
 8006ee0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006ee2:	6a3b      	ldr	r3, [r7, #32]
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3728      	adds	r7, #40	; 0x28
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bc90      	pop	{r4, r7}
 8006eec:	4770      	bx	lr
 8006eee:	bf00      	nop
 8006ef0:	080072fc 	.word	0x080072fc
 8006ef4:	40021000 	.word	0x40021000
 8006ef8:	007a1200 	.word	0x007a1200
 8006efc:	003d0900 	.word	0x003d0900

08006f00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f00:	b480      	push	{r7}
 8006f02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f04:	4b02      	ldr	r3, [pc, #8]	; (8006f10 <HAL_RCC_GetHCLKFreq+0x10>)
 8006f06:	681b      	ldr	r3, [r3, #0]
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bc80      	pop	{r7}
 8006f0e:	4770      	bx	lr
 8006f10:	20000000 	.word	0x20000000

08006f14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006f18:	f7ff fff2 	bl	8006f00 <HAL_RCC_GetHCLKFreq>
 8006f1c:	4602      	mov	r2, r0
 8006f1e:	4b05      	ldr	r3, [pc, #20]	; (8006f34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	0a1b      	lsrs	r3, r3, #8
 8006f24:	f003 0307 	and.w	r3, r3, #7
 8006f28:	4903      	ldr	r1, [pc, #12]	; (8006f38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f2a:	5ccb      	ldrb	r3, [r1, r3]
 8006f2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	bd80      	pop	{r7, pc}
 8006f34:	40021000 	.word	0x40021000
 8006f38:	0800732c 	.word	0x0800732c

08006f3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006f40:	f7ff ffde 	bl	8006f00 <HAL_RCC_GetHCLKFreq>
 8006f44:	4602      	mov	r2, r0
 8006f46:	4b05      	ldr	r3, [pc, #20]	; (8006f5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	0adb      	lsrs	r3, r3, #11
 8006f4c:	f003 0307 	and.w	r3, r3, #7
 8006f50:	4903      	ldr	r1, [pc, #12]	; (8006f60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f52:	5ccb      	ldrb	r3, [r1, r3]
 8006f54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	bd80      	pop	{r7, pc}
 8006f5c:	40021000 	.word	0x40021000
 8006f60:	0800732c 	.word	0x0800732c

08006f64 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b085      	sub	sp, #20
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006f6c:	4b0a      	ldr	r3, [pc, #40]	; (8006f98 <RCC_Delay+0x34>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a0a      	ldr	r2, [pc, #40]	; (8006f9c <RCC_Delay+0x38>)
 8006f72:	fba2 2303 	umull	r2, r3, r2, r3
 8006f76:	0a5b      	lsrs	r3, r3, #9
 8006f78:	687a      	ldr	r2, [r7, #4]
 8006f7a:	fb02 f303 	mul.w	r3, r2, r3
 8006f7e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006f80:	bf00      	nop
  }
  while (Delay --);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	1e5a      	subs	r2, r3, #1
 8006f86:	60fa      	str	r2, [r7, #12]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d1f9      	bne.n	8006f80 <RCC_Delay+0x1c>
}
 8006f8c:	bf00      	nop
 8006f8e:	bf00      	nop
 8006f90:	3714      	adds	r7, #20
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bc80      	pop	{r7}
 8006f96:	4770      	bx	lr
 8006f98:	20000000 	.word	0x20000000
 8006f9c:	10624dd3 	.word	0x10624dd3

08006fa0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b086      	sub	sp, #24
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	613b      	str	r3, [r7, #16]
 8006fac:	2300      	movs	r3, #0
 8006fae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f003 0301 	and.w	r3, r3, #1
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d07d      	beq.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006fc0:	4b4f      	ldr	r3, [pc, #316]	; (8007100 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006fc2:	69db      	ldr	r3, [r3, #28]
 8006fc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d10d      	bne.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006fcc:	4b4c      	ldr	r3, [pc, #304]	; (8007100 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006fce:	69db      	ldr	r3, [r3, #28]
 8006fd0:	4a4b      	ldr	r2, [pc, #300]	; (8007100 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006fd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fd6:	61d3      	str	r3, [r2, #28]
 8006fd8:	4b49      	ldr	r3, [pc, #292]	; (8007100 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006fda:	69db      	ldr	r3, [r3, #28]
 8006fdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fe0:	60bb      	str	r3, [r7, #8]
 8006fe2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fe8:	4b46      	ldr	r3, [pc, #280]	; (8007104 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d118      	bne.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006ff4:	4b43      	ldr	r3, [pc, #268]	; (8007104 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a42      	ldr	r2, [pc, #264]	; (8007104 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006ffa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ffe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007000:	f7fb fe7e 	bl	8002d00 <HAL_GetTick>
 8007004:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007006:	e008      	b.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007008:	f7fb fe7a 	bl	8002d00 <HAL_GetTick>
 800700c:	4602      	mov	r2, r0
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	1ad3      	subs	r3, r2, r3
 8007012:	2b64      	cmp	r3, #100	; 0x64
 8007014:	d901      	bls.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8007016:	2303      	movs	r3, #3
 8007018:	e06d      	b.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800701a:	4b3a      	ldr	r3, [pc, #232]	; (8007104 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007022:	2b00      	cmp	r3, #0
 8007024:	d0f0      	beq.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007026:	4b36      	ldr	r3, [pc, #216]	; (8007100 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007028:	6a1b      	ldr	r3, [r3, #32]
 800702a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800702e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d02e      	beq.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800703e:	68fa      	ldr	r2, [r7, #12]
 8007040:	429a      	cmp	r2, r3
 8007042:	d027      	beq.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007044:	4b2e      	ldr	r3, [pc, #184]	; (8007100 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007046:	6a1b      	ldr	r3, [r3, #32]
 8007048:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800704c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800704e:	4b2e      	ldr	r3, [pc, #184]	; (8007108 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007050:	2201      	movs	r2, #1
 8007052:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007054:	4b2c      	ldr	r3, [pc, #176]	; (8007108 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007056:	2200      	movs	r2, #0
 8007058:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800705a:	4a29      	ldr	r2, [pc, #164]	; (8007100 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f003 0301 	and.w	r3, r3, #1
 8007066:	2b00      	cmp	r3, #0
 8007068:	d014      	beq.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800706a:	f7fb fe49 	bl	8002d00 <HAL_GetTick>
 800706e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007070:	e00a      	b.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007072:	f7fb fe45 	bl	8002d00 <HAL_GetTick>
 8007076:	4602      	mov	r2, r0
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	1ad3      	subs	r3, r2, r3
 800707c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007080:	4293      	cmp	r3, r2
 8007082:	d901      	bls.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007084:	2303      	movs	r3, #3
 8007086:	e036      	b.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007088:	4b1d      	ldr	r3, [pc, #116]	; (8007100 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800708a:	6a1b      	ldr	r3, [r3, #32]
 800708c:	f003 0302 	and.w	r3, r3, #2
 8007090:	2b00      	cmp	r3, #0
 8007092:	d0ee      	beq.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007094:	4b1a      	ldr	r3, [pc, #104]	; (8007100 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007096:	6a1b      	ldr	r3, [r3, #32]
 8007098:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	4917      	ldr	r1, [pc, #92]	; (8007100 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070a2:	4313      	orrs	r3, r2
 80070a4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80070a6:	7dfb      	ldrb	r3, [r7, #23]
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d105      	bne.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80070ac:	4b14      	ldr	r3, [pc, #80]	; (8007100 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070ae:	69db      	ldr	r3, [r3, #28]
 80070b0:	4a13      	ldr	r2, [pc, #76]	; (8007100 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070b6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f003 0302 	and.w	r3, r3, #2
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d008      	beq.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80070c4:	4b0e      	ldr	r3, [pc, #56]	; (8007100 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	490b      	ldr	r1, [pc, #44]	; (8007100 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070d2:	4313      	orrs	r3, r2
 80070d4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f003 0310 	and.w	r3, r3, #16
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d008      	beq.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80070e2:	4b07      	ldr	r3, [pc, #28]	; (8007100 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	68db      	ldr	r3, [r3, #12]
 80070ee:	4904      	ldr	r1, [pc, #16]	; (8007100 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070f0:	4313      	orrs	r3, r2
 80070f2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80070f4:	2300      	movs	r3, #0
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3718      	adds	r7, #24
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}
 80070fe:	bf00      	nop
 8007100:	40021000 	.word	0x40021000
 8007104:	40007000 	.word	0x40007000
 8007108:	42420440 	.word	0x42420440

0800710c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800710c:	b590      	push	{r4, r7, lr}
 800710e:	b08d      	sub	sp, #52	; 0x34
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8007114:	4b58      	ldr	r3, [pc, #352]	; (8007278 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8007116:	f107 040c 	add.w	r4, r7, #12
 800711a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800711c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8007120:	f240 2301 	movw	r3, #513	; 0x201
 8007124:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8007126:	2300      	movs	r3, #0
 8007128:	627b      	str	r3, [r7, #36]	; 0x24
 800712a:	2300      	movs	r3, #0
 800712c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800712e:	2300      	movs	r3, #0
 8007130:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8007132:	2300      	movs	r3, #0
 8007134:	61fb      	str	r3, [r7, #28]
 8007136:	2300      	movs	r3, #0
 8007138:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2b10      	cmp	r3, #16
 800713e:	d00a      	beq.n	8007156 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2b10      	cmp	r3, #16
 8007144:	f200 808e 	bhi.w	8007264 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2b01      	cmp	r3, #1
 800714c:	d049      	beq.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2b02      	cmp	r3, #2
 8007152:	d079      	beq.n	8007248 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8007154:	e086      	b.n	8007264 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8007156:	4b49      	ldr	r3, [pc, #292]	; (800727c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800715c:	4b47      	ldr	r3, [pc, #284]	; (800727c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007164:	2b00      	cmp	r3, #0
 8007166:	d07f      	beq.n	8007268 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007168:	69fb      	ldr	r3, [r7, #28]
 800716a:	0c9b      	lsrs	r3, r3, #18
 800716c:	f003 030f 	and.w	r3, r3, #15
 8007170:	3330      	adds	r3, #48	; 0x30
 8007172:	443b      	add	r3, r7
 8007174:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8007178:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800717a:	69fb      	ldr	r3, [r7, #28]
 800717c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007180:	2b00      	cmp	r3, #0
 8007182:	d017      	beq.n	80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007184:	4b3d      	ldr	r3, [pc, #244]	; (800727c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	0c5b      	lsrs	r3, r3, #17
 800718a:	f003 0301 	and.w	r3, r3, #1
 800718e:	3330      	adds	r3, #48	; 0x30
 8007190:	443b      	add	r3, r7
 8007192:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8007196:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007198:	69fb      	ldr	r3, [r7, #28]
 800719a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d00d      	beq.n	80071be <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80071a2:	4a37      	ldr	r2, [pc, #220]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80071a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80071aa:	6a3b      	ldr	r3, [r7, #32]
 80071ac:	fb02 f303 	mul.w	r3, r2, r3
 80071b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071b2:	e004      	b.n	80071be <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80071b4:	6a3b      	ldr	r3, [r7, #32]
 80071b6:	4a33      	ldr	r2, [pc, #204]	; (8007284 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80071b8:	fb02 f303 	mul.w	r3, r2, r3
 80071bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80071be:	4b2f      	ldr	r3, [pc, #188]	; (800727c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80071ca:	d102      	bne.n	80071d2 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 80071cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ce:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80071d0:	e04a      	b.n	8007268 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 80071d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d4:	005b      	lsls	r3, r3, #1
 80071d6:	4a2c      	ldr	r2, [pc, #176]	; (8007288 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80071d8:	fba2 2303 	umull	r2, r3, r2, r3
 80071dc:	085b      	lsrs	r3, r3, #1
 80071de:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80071e0:	e042      	b.n	8007268 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 80071e2:	4b26      	ldr	r3, [pc, #152]	; (800727c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80071e4:	6a1b      	ldr	r3, [r3, #32]
 80071e6:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80071e8:	69fb      	ldr	r3, [r7, #28]
 80071ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071f2:	d108      	bne.n	8007206 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 80071f4:	69fb      	ldr	r3, [r7, #28]
 80071f6:	f003 0302 	and.w	r3, r3, #2
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d003      	beq.n	8007206 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 80071fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007202:	62bb      	str	r3, [r7, #40]	; 0x28
 8007204:	e01f      	b.n	8007246 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8007206:	69fb      	ldr	r3, [r7, #28]
 8007208:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800720c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007210:	d109      	bne.n	8007226 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8007212:	4b1a      	ldr	r3, [pc, #104]	; (800727c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8007214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007216:	f003 0302 	and.w	r3, r3, #2
 800721a:	2b00      	cmp	r3, #0
 800721c:	d003      	beq.n	8007226 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 800721e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8007222:	62bb      	str	r3, [r7, #40]	; 0x28
 8007224:	e00f      	b.n	8007246 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8007226:	69fb      	ldr	r3, [r7, #28]
 8007228:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800722c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007230:	d11c      	bne.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8007232:	4b12      	ldr	r3, [pc, #72]	; (800727c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800723a:	2b00      	cmp	r3, #0
 800723c:	d016      	beq.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 800723e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8007242:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8007244:	e012      	b.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8007246:	e011      	b.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8007248:	f7ff fe78 	bl	8006f3c <HAL_RCC_GetPCLK2Freq>
 800724c:	4602      	mov	r2, r0
 800724e:	4b0b      	ldr	r3, [pc, #44]	; (800727c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	0b9b      	lsrs	r3, r3, #14
 8007254:	f003 0303 	and.w	r3, r3, #3
 8007258:	3301      	adds	r3, #1
 800725a:	005b      	lsls	r3, r3, #1
 800725c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007260:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8007262:	e004      	b.n	800726e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8007264:	bf00      	nop
 8007266:	e002      	b.n	800726e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8007268:	bf00      	nop
 800726a:	e000      	b.n	800726e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 800726c:	bf00      	nop
    }
  }
  return (frequency);
 800726e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8007270:	4618      	mov	r0, r3
 8007272:	3734      	adds	r7, #52	; 0x34
 8007274:	46bd      	mov	sp, r7
 8007276:	bd90      	pop	{r4, r7, pc}
 8007278:	0800730c 	.word	0x0800730c
 800727c:	40021000 	.word	0x40021000
 8007280:	007a1200 	.word	0x007a1200
 8007284:	003d0900 	.word	0x003d0900
 8007288:	aaaaaaab 	.word	0xaaaaaaab

0800728c <__libc_init_array>:
 800728c:	b570      	push	{r4, r5, r6, lr}
 800728e:	2600      	movs	r6, #0
 8007290:	4d0c      	ldr	r5, [pc, #48]	; (80072c4 <__libc_init_array+0x38>)
 8007292:	4c0d      	ldr	r4, [pc, #52]	; (80072c8 <__libc_init_array+0x3c>)
 8007294:	1b64      	subs	r4, r4, r5
 8007296:	10a4      	asrs	r4, r4, #2
 8007298:	42a6      	cmp	r6, r4
 800729a:	d109      	bne.n	80072b0 <__libc_init_array+0x24>
 800729c:	f000 f822 	bl	80072e4 <_init>
 80072a0:	2600      	movs	r6, #0
 80072a2:	4d0a      	ldr	r5, [pc, #40]	; (80072cc <__libc_init_array+0x40>)
 80072a4:	4c0a      	ldr	r4, [pc, #40]	; (80072d0 <__libc_init_array+0x44>)
 80072a6:	1b64      	subs	r4, r4, r5
 80072a8:	10a4      	asrs	r4, r4, #2
 80072aa:	42a6      	cmp	r6, r4
 80072ac:	d105      	bne.n	80072ba <__libc_init_array+0x2e>
 80072ae:	bd70      	pop	{r4, r5, r6, pc}
 80072b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80072b4:	4798      	blx	r3
 80072b6:	3601      	adds	r6, #1
 80072b8:	e7ee      	b.n	8007298 <__libc_init_array+0xc>
 80072ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80072be:	4798      	blx	r3
 80072c0:	3601      	adds	r6, #1
 80072c2:	e7f2      	b.n	80072aa <__libc_init_array+0x1e>
 80072c4:	0800733c 	.word	0x0800733c
 80072c8:	0800733c 	.word	0x0800733c
 80072cc:	0800733c 	.word	0x0800733c
 80072d0:	08007340 	.word	0x08007340

080072d4 <memset>:
 80072d4:	4603      	mov	r3, r0
 80072d6:	4402      	add	r2, r0
 80072d8:	4293      	cmp	r3, r2
 80072da:	d100      	bne.n	80072de <memset+0xa>
 80072dc:	4770      	bx	lr
 80072de:	f803 1b01 	strb.w	r1, [r3], #1
 80072e2:	e7f9      	b.n	80072d8 <memset+0x4>

080072e4 <_init>:
 80072e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072e6:	bf00      	nop
 80072e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072ea:	bc08      	pop	{r3}
 80072ec:	469e      	mov	lr, r3
 80072ee:	4770      	bx	lr

080072f0 <_fini>:
 80072f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072f2:	bf00      	nop
 80072f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072f6:	bc08      	pop	{r3}
 80072f8:	469e      	mov	lr, r3
 80072fa:	4770      	bx	lr
