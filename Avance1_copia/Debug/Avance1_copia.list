
Avance1_copia.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000701c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08007128  08007128  00017128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007160  08007160  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007160  08007160  00017160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007168  08007168  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007168  08007168  00017168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800716c  0800716c  0001716c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007170  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  2000000c  0800717c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  0800717c  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a55c  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d3c  00000000  00000000  0002a591  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000978  00000000  00000000  0002c2d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008b8  00000000  00000000  0002cc48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016e46  00000000  00000000  0002d500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cbdc  00000000  00000000  00044346  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084097  00000000  00000000  00050f22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d4fb9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002798  00000000  00000000  000d500c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08007110 	.word	0x08007110

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08007110 	.word	0x08007110

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_ldivmod>:
 80006f4:	b97b      	cbnz	r3, 8000716 <__aeabi_ldivmod+0x22>
 80006f6:	b972      	cbnz	r2, 8000716 <__aeabi_ldivmod+0x22>
 80006f8:	2900      	cmp	r1, #0
 80006fa:	bfbe      	ittt	lt
 80006fc:	2000      	movlt	r0, #0
 80006fe:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000702:	e006      	blt.n	8000712 <__aeabi_ldivmod+0x1e>
 8000704:	bf08      	it	eq
 8000706:	2800      	cmpeq	r0, #0
 8000708:	bf1c      	itt	ne
 800070a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800070e:	f04f 30ff 	movne.w	r0, #4294967295
 8000712:	f000 b9a9 	b.w	8000a68 <__aeabi_idiv0>
 8000716:	f1ad 0c08 	sub.w	ip, sp, #8
 800071a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800071e:	2900      	cmp	r1, #0
 8000720:	db09      	blt.n	8000736 <__aeabi_ldivmod+0x42>
 8000722:	2b00      	cmp	r3, #0
 8000724:	db1a      	blt.n	800075c <__aeabi_ldivmod+0x68>
 8000726:	f000 f835 	bl	8000794 <__udivmoddi4>
 800072a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800072e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000732:	b004      	add	sp, #16
 8000734:	4770      	bx	lr
 8000736:	4240      	negs	r0, r0
 8000738:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800073c:	2b00      	cmp	r3, #0
 800073e:	db1b      	blt.n	8000778 <__aeabi_ldivmod+0x84>
 8000740:	f000 f828 	bl	8000794 <__udivmoddi4>
 8000744:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000748:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800074c:	b004      	add	sp, #16
 800074e:	4240      	negs	r0, r0
 8000750:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000754:	4252      	negs	r2, r2
 8000756:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800075a:	4770      	bx	lr
 800075c:	4252      	negs	r2, r2
 800075e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000762:	f000 f817 	bl	8000794 <__udivmoddi4>
 8000766:	f8dd e004 	ldr.w	lr, [sp, #4]
 800076a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800076e:	b004      	add	sp, #16
 8000770:	4240      	negs	r0, r0
 8000772:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000776:	4770      	bx	lr
 8000778:	4252      	negs	r2, r2
 800077a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800077e:	f000 f809 	bl	8000794 <__udivmoddi4>
 8000782:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000786:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800078a:	b004      	add	sp, #16
 800078c:	4252      	negs	r2, r2
 800078e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000792:	4770      	bx	lr

08000794 <__udivmoddi4>:
 8000794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000798:	9e08      	ldr	r6, [sp, #32]
 800079a:	460d      	mov	r5, r1
 800079c:	4604      	mov	r4, r0
 800079e:	4688      	mov	r8, r1
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d14d      	bne.n	8000840 <__udivmoddi4+0xac>
 80007a4:	428a      	cmp	r2, r1
 80007a6:	4694      	mov	ip, r2
 80007a8:	d968      	bls.n	800087c <__udivmoddi4+0xe8>
 80007aa:	fab2 f282 	clz	r2, r2
 80007ae:	b152      	cbz	r2, 80007c6 <__udivmoddi4+0x32>
 80007b0:	fa01 f302 	lsl.w	r3, r1, r2
 80007b4:	f1c2 0120 	rsb	r1, r2, #32
 80007b8:	fa20 f101 	lsr.w	r1, r0, r1
 80007bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80007c0:	ea41 0803 	orr.w	r8, r1, r3
 80007c4:	4094      	lsls	r4, r2
 80007c6:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80007ca:	fbb8 f7f1 	udiv	r7, r8, r1
 80007ce:	fa1f fe8c 	uxth.w	lr, ip
 80007d2:	fb01 8817 	mls	r8, r1, r7, r8
 80007d6:	fb07 f00e 	mul.w	r0, r7, lr
 80007da:	0c23      	lsrs	r3, r4, #16
 80007dc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80007e0:	4298      	cmp	r0, r3
 80007e2:	d90a      	bls.n	80007fa <__udivmoddi4+0x66>
 80007e4:	eb1c 0303 	adds.w	r3, ip, r3
 80007e8:	f107 35ff 	add.w	r5, r7, #4294967295
 80007ec:	f080 811e 	bcs.w	8000a2c <__udivmoddi4+0x298>
 80007f0:	4298      	cmp	r0, r3
 80007f2:	f240 811b 	bls.w	8000a2c <__udivmoddi4+0x298>
 80007f6:	3f02      	subs	r7, #2
 80007f8:	4463      	add	r3, ip
 80007fa:	1a1b      	subs	r3, r3, r0
 80007fc:	fbb3 f0f1 	udiv	r0, r3, r1
 8000800:	fb01 3310 	mls	r3, r1, r0, r3
 8000804:	fb00 fe0e 	mul.w	lr, r0, lr
 8000808:	b2a4      	uxth	r4, r4
 800080a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800080e:	45a6      	cmp	lr, r4
 8000810:	d90a      	bls.n	8000828 <__udivmoddi4+0x94>
 8000812:	eb1c 0404 	adds.w	r4, ip, r4
 8000816:	f100 33ff 	add.w	r3, r0, #4294967295
 800081a:	f080 8109 	bcs.w	8000a30 <__udivmoddi4+0x29c>
 800081e:	45a6      	cmp	lr, r4
 8000820:	f240 8106 	bls.w	8000a30 <__udivmoddi4+0x29c>
 8000824:	4464      	add	r4, ip
 8000826:	3802      	subs	r0, #2
 8000828:	2100      	movs	r1, #0
 800082a:	eba4 040e 	sub.w	r4, r4, lr
 800082e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000832:	b11e      	cbz	r6, 800083c <__udivmoddi4+0xa8>
 8000834:	2300      	movs	r3, #0
 8000836:	40d4      	lsrs	r4, r2
 8000838:	e9c6 4300 	strd	r4, r3, [r6]
 800083c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000840:	428b      	cmp	r3, r1
 8000842:	d908      	bls.n	8000856 <__udivmoddi4+0xc2>
 8000844:	2e00      	cmp	r6, #0
 8000846:	f000 80ee 	beq.w	8000a26 <__udivmoddi4+0x292>
 800084a:	2100      	movs	r1, #0
 800084c:	e9c6 0500 	strd	r0, r5, [r6]
 8000850:	4608      	mov	r0, r1
 8000852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000856:	fab3 f183 	clz	r1, r3
 800085a:	2900      	cmp	r1, #0
 800085c:	d14a      	bne.n	80008f4 <__udivmoddi4+0x160>
 800085e:	42ab      	cmp	r3, r5
 8000860:	d302      	bcc.n	8000868 <__udivmoddi4+0xd4>
 8000862:	4282      	cmp	r2, r0
 8000864:	f200 80fc 	bhi.w	8000a60 <__udivmoddi4+0x2cc>
 8000868:	1a84      	subs	r4, r0, r2
 800086a:	eb65 0303 	sbc.w	r3, r5, r3
 800086e:	2001      	movs	r0, #1
 8000870:	4698      	mov	r8, r3
 8000872:	2e00      	cmp	r6, #0
 8000874:	d0e2      	beq.n	800083c <__udivmoddi4+0xa8>
 8000876:	e9c6 4800 	strd	r4, r8, [r6]
 800087a:	e7df      	b.n	800083c <__udivmoddi4+0xa8>
 800087c:	b902      	cbnz	r2, 8000880 <__udivmoddi4+0xec>
 800087e:	deff      	udf	#255	; 0xff
 8000880:	fab2 f282 	clz	r2, r2
 8000884:	2a00      	cmp	r2, #0
 8000886:	f040 8091 	bne.w	80009ac <__udivmoddi4+0x218>
 800088a:	eba1 000c 	sub.w	r0, r1, ip
 800088e:	2101      	movs	r1, #1
 8000890:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000894:	fa1f fe8c 	uxth.w	lr, ip
 8000898:	fbb0 f3f7 	udiv	r3, r0, r7
 800089c:	fb07 0013 	mls	r0, r7, r3, r0
 80008a0:	0c25      	lsrs	r5, r4, #16
 80008a2:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80008a6:	fb0e f003 	mul.w	r0, lr, r3
 80008aa:	42a8      	cmp	r0, r5
 80008ac:	d908      	bls.n	80008c0 <__udivmoddi4+0x12c>
 80008ae:	eb1c 0505 	adds.w	r5, ip, r5
 80008b2:	f103 38ff 	add.w	r8, r3, #4294967295
 80008b6:	d202      	bcs.n	80008be <__udivmoddi4+0x12a>
 80008b8:	42a8      	cmp	r0, r5
 80008ba:	f200 80ce 	bhi.w	8000a5a <__udivmoddi4+0x2c6>
 80008be:	4643      	mov	r3, r8
 80008c0:	1a2d      	subs	r5, r5, r0
 80008c2:	fbb5 f0f7 	udiv	r0, r5, r7
 80008c6:	fb07 5510 	mls	r5, r7, r0, r5
 80008ca:	fb0e fe00 	mul.w	lr, lr, r0
 80008ce:	b2a4      	uxth	r4, r4
 80008d0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80008d4:	45a6      	cmp	lr, r4
 80008d6:	d908      	bls.n	80008ea <__udivmoddi4+0x156>
 80008d8:	eb1c 0404 	adds.w	r4, ip, r4
 80008dc:	f100 35ff 	add.w	r5, r0, #4294967295
 80008e0:	d202      	bcs.n	80008e8 <__udivmoddi4+0x154>
 80008e2:	45a6      	cmp	lr, r4
 80008e4:	f200 80b6 	bhi.w	8000a54 <__udivmoddi4+0x2c0>
 80008e8:	4628      	mov	r0, r5
 80008ea:	eba4 040e 	sub.w	r4, r4, lr
 80008ee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80008f2:	e79e      	b.n	8000832 <__udivmoddi4+0x9e>
 80008f4:	f1c1 0720 	rsb	r7, r1, #32
 80008f8:	408b      	lsls	r3, r1
 80008fa:	fa22 fc07 	lsr.w	ip, r2, r7
 80008fe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000902:	fa25 fa07 	lsr.w	sl, r5, r7
 8000906:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800090a:	fbba f8f9 	udiv	r8, sl, r9
 800090e:	fa20 f307 	lsr.w	r3, r0, r7
 8000912:	fb09 aa18 	mls	sl, r9, r8, sl
 8000916:	408d      	lsls	r5, r1
 8000918:	fa1f fe8c 	uxth.w	lr, ip
 800091c:	431d      	orrs	r5, r3
 800091e:	fa00 f301 	lsl.w	r3, r0, r1
 8000922:	fb08 f00e 	mul.w	r0, r8, lr
 8000926:	0c2c      	lsrs	r4, r5, #16
 8000928:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800092c:	42a0      	cmp	r0, r4
 800092e:	fa02 f201 	lsl.w	r2, r2, r1
 8000932:	d90b      	bls.n	800094c <__udivmoddi4+0x1b8>
 8000934:	eb1c 0404 	adds.w	r4, ip, r4
 8000938:	f108 3aff 	add.w	sl, r8, #4294967295
 800093c:	f080 8088 	bcs.w	8000a50 <__udivmoddi4+0x2bc>
 8000940:	42a0      	cmp	r0, r4
 8000942:	f240 8085 	bls.w	8000a50 <__udivmoddi4+0x2bc>
 8000946:	f1a8 0802 	sub.w	r8, r8, #2
 800094a:	4464      	add	r4, ip
 800094c:	1a24      	subs	r4, r4, r0
 800094e:	fbb4 f0f9 	udiv	r0, r4, r9
 8000952:	fb09 4410 	mls	r4, r9, r0, r4
 8000956:	fb00 fe0e 	mul.w	lr, r0, lr
 800095a:	b2ad      	uxth	r5, r5
 800095c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000960:	45a6      	cmp	lr, r4
 8000962:	d908      	bls.n	8000976 <__udivmoddi4+0x1e2>
 8000964:	eb1c 0404 	adds.w	r4, ip, r4
 8000968:	f100 35ff 	add.w	r5, r0, #4294967295
 800096c:	d26c      	bcs.n	8000a48 <__udivmoddi4+0x2b4>
 800096e:	45a6      	cmp	lr, r4
 8000970:	d96a      	bls.n	8000a48 <__udivmoddi4+0x2b4>
 8000972:	3802      	subs	r0, #2
 8000974:	4464      	add	r4, ip
 8000976:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800097a:	fba0 9502 	umull	r9, r5, r0, r2
 800097e:	eba4 040e 	sub.w	r4, r4, lr
 8000982:	42ac      	cmp	r4, r5
 8000984:	46c8      	mov	r8, r9
 8000986:	46ae      	mov	lr, r5
 8000988:	d356      	bcc.n	8000a38 <__udivmoddi4+0x2a4>
 800098a:	d053      	beq.n	8000a34 <__udivmoddi4+0x2a0>
 800098c:	2e00      	cmp	r6, #0
 800098e:	d069      	beq.n	8000a64 <__udivmoddi4+0x2d0>
 8000990:	ebb3 0208 	subs.w	r2, r3, r8
 8000994:	eb64 040e 	sbc.w	r4, r4, lr
 8000998:	fa22 f301 	lsr.w	r3, r2, r1
 800099c:	fa04 f707 	lsl.w	r7, r4, r7
 80009a0:	431f      	orrs	r7, r3
 80009a2:	40cc      	lsrs	r4, r1
 80009a4:	e9c6 7400 	strd	r7, r4, [r6]
 80009a8:	2100      	movs	r1, #0
 80009aa:	e747      	b.n	800083c <__udivmoddi4+0xa8>
 80009ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80009b0:	f1c2 0120 	rsb	r1, r2, #32
 80009b4:	fa25 f301 	lsr.w	r3, r5, r1
 80009b8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009bc:	fa20 f101 	lsr.w	r1, r0, r1
 80009c0:	4095      	lsls	r5, r2
 80009c2:	430d      	orrs	r5, r1
 80009c4:	fbb3 f1f7 	udiv	r1, r3, r7
 80009c8:	fb07 3311 	mls	r3, r7, r1, r3
 80009cc:	fa1f fe8c 	uxth.w	lr, ip
 80009d0:	0c28      	lsrs	r0, r5, #16
 80009d2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80009d6:	fb01 f30e 	mul.w	r3, r1, lr
 80009da:	4283      	cmp	r3, r0
 80009dc:	fa04 f402 	lsl.w	r4, r4, r2
 80009e0:	d908      	bls.n	80009f4 <__udivmoddi4+0x260>
 80009e2:	eb1c 0000 	adds.w	r0, ip, r0
 80009e6:	f101 38ff 	add.w	r8, r1, #4294967295
 80009ea:	d22f      	bcs.n	8000a4c <__udivmoddi4+0x2b8>
 80009ec:	4283      	cmp	r3, r0
 80009ee:	d92d      	bls.n	8000a4c <__udivmoddi4+0x2b8>
 80009f0:	3902      	subs	r1, #2
 80009f2:	4460      	add	r0, ip
 80009f4:	1ac0      	subs	r0, r0, r3
 80009f6:	fbb0 f3f7 	udiv	r3, r0, r7
 80009fa:	fb07 0013 	mls	r0, r7, r3, r0
 80009fe:	b2ad      	uxth	r5, r5
 8000a00:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000a04:	fb03 f00e 	mul.w	r0, r3, lr
 8000a08:	42a8      	cmp	r0, r5
 8000a0a:	d908      	bls.n	8000a1e <__udivmoddi4+0x28a>
 8000a0c:	eb1c 0505 	adds.w	r5, ip, r5
 8000a10:	f103 38ff 	add.w	r8, r3, #4294967295
 8000a14:	d216      	bcs.n	8000a44 <__udivmoddi4+0x2b0>
 8000a16:	42a8      	cmp	r0, r5
 8000a18:	d914      	bls.n	8000a44 <__udivmoddi4+0x2b0>
 8000a1a:	3b02      	subs	r3, #2
 8000a1c:	4465      	add	r5, ip
 8000a1e:	1a28      	subs	r0, r5, r0
 8000a20:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a24:	e738      	b.n	8000898 <__udivmoddi4+0x104>
 8000a26:	4631      	mov	r1, r6
 8000a28:	4630      	mov	r0, r6
 8000a2a:	e707      	b.n	800083c <__udivmoddi4+0xa8>
 8000a2c:	462f      	mov	r7, r5
 8000a2e:	e6e4      	b.n	80007fa <__udivmoddi4+0x66>
 8000a30:	4618      	mov	r0, r3
 8000a32:	e6f9      	b.n	8000828 <__udivmoddi4+0x94>
 8000a34:	454b      	cmp	r3, r9
 8000a36:	d2a9      	bcs.n	800098c <__udivmoddi4+0x1f8>
 8000a38:	ebb9 0802 	subs.w	r8, r9, r2
 8000a3c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000a40:	3801      	subs	r0, #1
 8000a42:	e7a3      	b.n	800098c <__udivmoddi4+0x1f8>
 8000a44:	4643      	mov	r3, r8
 8000a46:	e7ea      	b.n	8000a1e <__udivmoddi4+0x28a>
 8000a48:	4628      	mov	r0, r5
 8000a4a:	e794      	b.n	8000976 <__udivmoddi4+0x1e2>
 8000a4c:	4641      	mov	r1, r8
 8000a4e:	e7d1      	b.n	80009f4 <__udivmoddi4+0x260>
 8000a50:	46d0      	mov	r8, sl
 8000a52:	e77b      	b.n	800094c <__udivmoddi4+0x1b8>
 8000a54:	4464      	add	r4, ip
 8000a56:	3802      	subs	r0, #2
 8000a58:	e747      	b.n	80008ea <__udivmoddi4+0x156>
 8000a5a:	3b02      	subs	r3, #2
 8000a5c:	4465      	add	r5, ip
 8000a5e:	e72f      	b.n	80008c0 <__udivmoddi4+0x12c>
 8000a60:	4608      	mov	r0, r1
 8000a62:	e706      	b.n	8000872 <__udivmoddi4+0xde>
 8000a64:	4631      	mov	r1, r6
 8000a66:	e6e9      	b.n	800083c <__udivmoddi4+0xa8>

08000a68 <__aeabi_idiv0>:
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2203      	movs	r2, #3
 8000a78:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	2203      	movs	r2, #3
 8000a84:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_HIGH_RES;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	2204      	movs	r2, #4
 8000a8a:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_HIGH_RES;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2204      	movs	r2, #4
 8000a90:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	2203      	movs	r2, #3
 8000a96:	715a      	strb	r2, [r3, #5]
}
 8000a98:	bf00      	nop
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bc80      	pop	{r7}
 8000aa0:	4770      	bx	lr

08000aa2 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b08a      	sub	sp, #40	; 0x28
 8000aa6:	af04      	add	r7, sp, #16
 8000aa8:	60f8      	str	r0, [r7, #12]
 8000aaa:	460b      	mov	r3, r1
 8000aac:	607a      	str	r2, [r7, #4]
 8000aae:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000ab4:	005b      	lsls	r3, r3, #1
 8000ab6:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000abc:	7afb      	ldrb	r3, [r7, #11]
 8000abe:	b29a      	uxth	r2, r3
 8000ac0:	8af9      	ldrh	r1, [r7, #22]
 8000ac2:	f241 3388 	movw	r3, #5000	; 0x1388
 8000ac6:	9302      	str	r3, [sp, #8]
 8000ac8:	2302      	movs	r3, #2
 8000aca:	9301      	str	r3, [sp, #4]
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	9300      	str	r3, [sp, #0]
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	f003 faca 	bl	800406c <HAL_I2C_Mem_Read>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d10b      	bne.n	8000af6 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8000ade:	7d7b      	ldrb	r3, [r7, #21]
 8000ae0:	021b      	lsls	r3, r3, #8
 8000ae2:	b21a      	sxth	r2, r3
 8000ae4:	7d3b      	ldrb	r3, [r7, #20]
 8000ae6:	b21b      	sxth	r3, r3
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	b21b      	sxth	r3, r3
 8000aec:	b29a      	uxth	r2, r3
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	801a      	strh	r2, [r3, #0]
		return true;
 8000af2:	2301      	movs	r3, #1
 8000af4:	e000      	b.n	8000af8 <read_register16+0x56>
	} else
		return false;
 8000af6:	2300      	movs	r3, #0

}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3718      	adds	r7, #24
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 8000b00:	b590      	push	{r4, r7, lr}
 8000b02:	b08b      	sub	sp, #44	; 0x2c
 8000b04:	af04      	add	r7, sp, #16
 8000b06:	60f8      	str	r0, [r7, #12]
 8000b08:	607a      	str	r2, [r7, #4]
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	460b      	mov	r3, r1
 8000b0e:	72fb      	strb	r3, [r7, #11]
 8000b10:	4613      	mov	r3, r2
 8000b12:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000b18:	005b      	lsls	r3, r3, #1
 8000b1a:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000b20:	7afb      	ldrb	r3, [r7, #11]
 8000b22:	b29a      	uxth	r2, r3
 8000b24:	7abb      	ldrb	r3, [r7, #10]
 8000b26:	b29b      	uxth	r3, r3
 8000b28:	8af9      	ldrh	r1, [r7, #22]
 8000b2a:	f241 3488 	movw	r4, #5000	; 0x1388
 8000b2e:	9402      	str	r4, [sp, #8]
 8000b30:	9301      	str	r3, [sp, #4]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	9300      	str	r3, [sp, #0]
 8000b36:	2301      	movs	r3, #1
 8000b38:	f003 fa98 	bl	800406c <HAL_I2C_Mem_Read>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d101      	bne.n	8000b46 <read_data+0x46>
		return 0;
 8000b42:	2300      	movs	r3, #0
 8000b44:	e000      	b.n	8000b48 <read_data+0x48>
	else
		return 1;
 8000b46:	2301      	movs	r3, #1

}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	371c      	adds	r7, #28
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd90      	pop	{r4, r7, pc}

08000b50 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	2188      	movs	r1, #136	; 0x88
 8000b5e:	6878      	ldr	r0, [r7, #4]
 8000b60:	f7ff ff9f 	bl	8000aa2 <read_register16>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d06f      	beq.n	8000c4a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	3302      	adds	r3, #2
 8000b6e:	461a      	mov	r2, r3
 8000b70:	218a      	movs	r1, #138	; 0x8a
 8000b72:	6878      	ldr	r0, [r7, #4]
 8000b74:	f7ff ff95 	bl	8000aa2 <read_register16>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d065      	beq.n	8000c4a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	3304      	adds	r3, #4
 8000b82:	461a      	mov	r2, r3
 8000b84:	218c      	movs	r1, #140	; 0x8c
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f7ff ff8b 	bl	8000aa2 <read_register16>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d05b      	beq.n	8000c4a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	3306      	adds	r3, #6
 8000b96:	461a      	mov	r2, r3
 8000b98:	218e      	movs	r1, #142	; 0x8e
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f7ff ff81 	bl	8000aa2 <read_register16>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d051      	beq.n	8000c4a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	3308      	adds	r3, #8
 8000baa:	461a      	mov	r2, r3
 8000bac:	2190      	movs	r1, #144	; 0x90
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f7ff ff77 	bl	8000aa2 <read_register16>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d047      	beq.n	8000c4a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	330a      	adds	r3, #10
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	2192      	movs	r1, #146	; 0x92
 8000bc2:	6878      	ldr	r0, [r7, #4]
 8000bc4:	f7ff ff6d 	bl	8000aa2 <read_register16>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d03d      	beq.n	8000c4a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	330c      	adds	r3, #12
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	2194      	movs	r1, #148	; 0x94
 8000bd6:	6878      	ldr	r0, [r7, #4]
 8000bd8:	f7ff ff63 	bl	8000aa2 <read_register16>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d033      	beq.n	8000c4a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	330e      	adds	r3, #14
 8000be6:	461a      	mov	r2, r3
 8000be8:	2196      	movs	r1, #150	; 0x96
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	f7ff ff59 	bl	8000aa2 <read_register16>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d029      	beq.n	8000c4a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	3310      	adds	r3, #16
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	2198      	movs	r1, #152	; 0x98
 8000bfe:	6878      	ldr	r0, [r7, #4]
 8000c00:	f7ff ff4f 	bl	8000aa2 <read_register16>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d01f      	beq.n	8000c4a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	3312      	adds	r3, #18
 8000c0e:	461a      	mov	r2, r3
 8000c10:	219a      	movs	r1, #154	; 0x9a
 8000c12:	6878      	ldr	r0, [r7, #4]
 8000c14:	f7ff ff45 	bl	8000aa2 <read_register16>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d015      	beq.n	8000c4a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	3314      	adds	r3, #20
 8000c22:	461a      	mov	r2, r3
 8000c24:	219c      	movs	r1, #156	; 0x9c
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f7ff ff3b 	bl	8000aa2 <read_register16>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d00b      	beq.n	8000c4a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 8000c36:	461a      	mov	r2, r3
 8000c38:	219e      	movs	r1, #158	; 0x9e
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	f7ff ff31 	bl	8000aa2 <read_register16>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <read_calibration_data+0xfa>

		return true;
 8000c46:	2301      	movs	r3, #1
 8000c48:	e000      	b.n	8000c4c <read_calibration_data+0xfc>
	}

	return false;
 8000c4a:	2300      	movs	r3, #0
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	f103 0218 	add.w	r2, r3, #24
 8000c62:	2301      	movs	r3, #1
 8000c64:	21a1      	movs	r1, #161	; 0xa1
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	f7ff ff4a 	bl	8000b00 <read_data>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d14b      	bne.n	8000d0a <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	331a      	adds	r3, #26
 8000c76:	461a      	mov	r2, r3
 8000c78:	21e1      	movs	r1, #225	; 0xe1
 8000c7a:	6878      	ldr	r0, [r7, #4]
 8000c7c:	f7ff ff11 	bl	8000aa2 <read_register16>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d041      	beq.n	8000d0a <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	f103 021c 	add.w	r2, r3, #28
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	21e3      	movs	r1, #227	; 0xe3
 8000c90:	6878      	ldr	r0, [r7, #4]
 8000c92:	f7ff ff35 	bl	8000b00 <read_data>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d136      	bne.n	8000d0a <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 8000c9c:	f107 030e 	add.w	r3, r7, #14
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	21e4      	movs	r1, #228	; 0xe4
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	f7ff fefc 	bl	8000aa2 <read_register16>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d02c      	beq.n	8000d0a <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 8000cb0:	f107 030c 	add.w	r3, r7, #12
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	21e5      	movs	r1, #229	; 0xe5
 8000cb8:	6878      	ldr	r0, [r7, #4]
 8000cba:	f7ff fef2 	bl	8000aa2 <read_register16>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d022      	beq.n	8000d0a <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	f103 0222 	add.w	r2, r3, #34	; 0x22
 8000cca:	2301      	movs	r3, #1
 8000ccc:	21e7      	movs	r1, #231	; 0xe7
 8000cce:	6878      	ldr	r0, [r7, #4]
 8000cd0:	f7ff ff16 	bl	8000b00 <read_data>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d117      	bne.n	8000d0a <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 8000cda:	89fb      	ldrh	r3, [r7, #14]
 8000cdc:	011b      	lsls	r3, r3, #4
 8000cde:	b21b      	sxth	r3, r3
 8000ce0:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 8000ce4:	b21a      	sxth	r2, r3
 8000ce6:	89fb      	ldrh	r3, [r7, #14]
 8000ce8:	121b      	asrs	r3, r3, #8
 8000cea:	b21b      	sxth	r3, r3
 8000cec:	f003 030f 	and.w	r3, r3, #15
 8000cf0:	b21b      	sxth	r3, r3
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	b21a      	sxth	r2, r3
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 8000cfa:	89bb      	ldrh	r3, [r7, #12]
 8000cfc:	091b      	lsrs	r3, r3, #4
 8000cfe:	b29b      	uxth	r3, r3
 8000d00:	b21a      	sxth	r2, r3
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	841a      	strh	r2, [r3, #32]

		return true;
 8000d06:	2301      	movs	r3, #1
 8000d08:	e000      	b.n	8000d0c <read_hum_calibration_data+0xb8>
	}

	return false;
 8000d0a:	2300      	movs	r3, #0
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3710      	adds	r7, #16
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b088      	sub	sp, #32
 8000d18:	af04      	add	r7, sp, #16
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	460b      	mov	r3, r1
 8000d1e:	70fb      	strb	r3, [r7, #3]
 8000d20:	4613      	mov	r3, r2
 8000d22:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000d30:	78fb      	ldrb	r3, [r7, #3]
 8000d32:	b29a      	uxth	r2, r3
 8000d34:	89f9      	ldrh	r1, [r7, #14]
 8000d36:	f242 7310 	movw	r3, #10000	; 0x2710
 8000d3a:	9302      	str	r3, [sp, #8]
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	9301      	str	r3, [sp, #4]
 8000d40:	1cbb      	adds	r3, r7, #2
 8000d42:	9300      	str	r3, [sp, #0]
 8000d44:	2301      	movs	r3, #1
 8000d46:	f003 f897 	bl	8003e78 <HAL_I2C_Mem_Write>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d101      	bne.n	8000d54 <write_register8+0x40>
		return false;
 8000d50:	2300      	movs	r3, #0
 8000d52:	e000      	b.n	8000d56 <write_register8+0x42>
	else
		return true;
 8000d54:	2301      	movs	r3, #1
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b084      	sub	sp, #16
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
 8000d66:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000d6c:	2b76      	cmp	r3, #118	; 0x76
 8000d6e:	d005      	beq.n	8000d7c <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000d74:	2b77      	cmp	r3, #119	; 0x77
 8000d76:	d001      	beq.n	8000d7c <bmp280_init+0x1e>

		return false;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	e099      	b.n	8000eb0 <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8000d82:	2301      	movs	r3, #1
 8000d84:	21d0      	movs	r1, #208	; 0xd0
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f7ff feba 	bl	8000b00 <read_data>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <bmp280_init+0x38>
		return false;
 8000d92:	2300      	movs	r3, #0
 8000d94:	e08c      	b.n	8000eb0 <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000d9c:	2b58      	cmp	r3, #88	; 0x58
 8000d9e:	d006      	beq.n	8000dae <bmp280_init+0x50>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000da6:	2b60      	cmp	r3, #96	; 0x60
 8000da8:	d001      	beq.n	8000dae <bmp280_init+0x50>

		return false;
 8000daa:	2300      	movs	r3, #0
 8000dac:	e080      	b.n	8000eb0 <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8000dae:	22b6      	movs	r2, #182	; 0xb6
 8000db0:	21e0      	movs	r1, #224	; 0xe0
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f7ff ffae 	bl	8000d14 <write_register8>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <bmp280_init+0x64>
		return false;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e076      	b.n	8000eb0 <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8000dc2:	f107 020c 	add.w	r2, r7, #12
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	21f3      	movs	r1, #243	; 0xf3
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f7ff fe98 	bl	8000b00 <read_data>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d1f5      	bne.n	8000dc2 <bmp280_init+0x64>
				&& (status & 1) == 0)
 8000dd6:	7b3b      	ldrb	r3, [r7, #12]
 8000dd8:	f003 0301 	and.w	r3, r3, #1
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d1f0      	bne.n	8000dc2 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f7ff feb5 	bl	8000b50 <read_calibration_data>
 8000de6:	4603      	mov	r3, r0
 8000de8:	f083 0301 	eor.w	r3, r3, #1
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d100      	bne.n	8000df4 <bmp280_init+0x96>
 8000df2:	e001      	b.n	8000df8 <bmp280_init+0x9a>
		return false;
 8000df4:	2300      	movs	r3, #0
 8000df6:	e05b      	b.n	8000eb0 <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000dfe:	2b60      	cmp	r3, #96	; 0x60
 8000e00:	d10a      	bne.n	8000e18 <bmp280_init+0xba>
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f7ff ff26 	bl	8000c54 <read_hum_calibration_data>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	f083 0301 	eor.w	r3, r3, #1
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <bmp280_init+0xba>
		return false;
 8000e14:	2300      	movs	r3, #0
 8000e16:	e04b      	b.n	8000eb0 <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	795b      	ldrb	r3, [r3, #5]
 8000e1c:	015b      	lsls	r3, r3, #5
 8000e1e:	b25a      	sxtb	r2, r3
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	785b      	ldrb	r3, [r3, #1]
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	b25b      	sxtb	r3, r3
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	b25b      	sxtb	r3, r3
 8000e2c:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8000e2e:	7bfb      	ldrb	r3, [r7, #15]
 8000e30:	461a      	mov	r2, r3
 8000e32:	21f5      	movs	r1, #245	; 0xf5
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f7ff ff6d 	bl	8000d14 <write_register8>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <bmp280_init+0xe6>
		return false;
 8000e40:	2300      	movs	r3, #0
 8000e42:	e035      	b.n	8000eb0 <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d102      	bne.n	8000e52 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	2200      	movs	r2, #0
 8000e50:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	78db      	ldrb	r3, [r3, #3]
 8000e56:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 8000e58:	b25a      	sxtb	r2, r3
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	789b      	ldrb	r3, [r3, #2]
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	b25b      	sxtb	r3, r3
 8000e62:	4313      	orrs	r3, r2
 8000e64:	b25a      	sxtb	r2, r3
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	b25b      	sxtb	r3, r3
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8000e70:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000e78:	2b60      	cmp	r3, #96	; 0x60
 8000e7a:	d10d      	bne.n	8000e98 <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	791b      	ldrb	r3, [r3, #4]
 8000e80:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8000e82:	7b7b      	ldrb	r3, [r7, #13]
 8000e84:	461a      	mov	r2, r3
 8000e86:	21f2      	movs	r1, #242	; 0xf2
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	f7ff ff43 	bl	8000d14 <write_register8>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <bmp280_init+0x13a>
			return false;
 8000e94:	2300      	movs	r3, #0
 8000e96:	e00b      	b.n	8000eb0 <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8000e98:	7bbb      	ldrb	r3, [r7, #14]
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	21f4      	movs	r1, #244	; 0xf4
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	f7ff ff38 	bl	8000d14 <write_register8>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <bmp280_init+0x150>
		return false;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	e000      	b.n	8000eb0 <bmp280_init+0x152>
	}

	return true;
 8000eae:	2301      	movs	r3, #1
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3710      	adds	r7, #16
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 8000eb8:	b480      	push	{r7}
 8000eba:	b087      	sub	sp, #28
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	10da      	asrs	r2, r3, #3
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	881b      	ldrh	r3, [r3, #0]
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 8000ed0:	68fa      	ldr	r2, [r7, #12]
 8000ed2:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8000ed6:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8000eda:	12db      	asrs	r3, r3, #11
 8000edc:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	111b      	asrs	r3, r3, #4
 8000ee2:	68fa      	ldr	r2, [r7, #12]
 8000ee4:	8812      	ldrh	r2, [r2, #0]
 8000ee6:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8000ee8:	68ba      	ldr	r2, [r7, #8]
 8000eea:	1112      	asrs	r2, r2, #4
 8000eec:	68f9      	ldr	r1, [r7, #12]
 8000eee:	8809      	ldrh	r1, [r1, #0]
 8000ef0:	1a52      	subs	r2, r2, r1
 8000ef2:	fb02 f303 	mul.w	r3, r2, r3
 8000ef6:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 8000ef8:	68fa      	ldr	r2, [r7, #12]
 8000efa:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000efe:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8000f02:	139b      	asrs	r3, r3, #14
 8000f04:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8000f06:	697a      	ldr	r2, [r7, #20]
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	441a      	add	r2, r3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	4613      	mov	r3, r2
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	4413      	add	r3, r2
 8000f1a:	3380      	adds	r3, #128	; 0x80
 8000f1c:	121b      	asrs	r3, r3, #8
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	371c      	adds	r7, #28
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bc80      	pop	{r7}
 8000f26:	4770      	bx	lr

08000f28 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8000f28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f2c:	b0cc      	sub	sp, #304	; 0x130
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
 8000f34:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8000f38:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8000f3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000f40:	17da      	asrs	r2, r3, #31
 8000f42:	461c      	mov	r4, r3
 8000f44:	4615      	mov	r5, r2
 8000f46:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 8000f4a:	f145 3bff 	adc.w	fp, r5, #4294967295
 8000f4e:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	; 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8000f52:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8000f56:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000f5a:	fb03 f102 	mul.w	r1, r3, r2
 8000f5e:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8000f62:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000f66:	fb02 f303 	mul.w	r3, r2, r3
 8000f6a:	18ca      	adds	r2, r1, r3
 8000f6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000f70:	fba3 8903 	umull	r8, r9, r3, r3
 8000f74:	eb02 0309 	add.w	r3, r2, r9
 8000f78:	4699      	mov	r9, r3
 8000f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000f7e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000f82:	b21b      	sxth	r3, r3
 8000f84:	17da      	asrs	r2, r3, #31
 8000f86:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8000f8a:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8000f8e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8000f92:	4603      	mov	r3, r0
 8000f94:	fb03 f209 	mul.w	r2, r3, r9
 8000f98:	460b      	mov	r3, r1
 8000f9a:	fb08 f303 	mul.w	r3, r8, r3
 8000f9e:	4413      	add	r3, r2
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	fba8 2102 	umull	r2, r1, r8, r2
 8000fa6:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 8000faa:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8000fae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8000fb2:	4413      	add	r3, r2
 8000fb4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8000fb8:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8000fbc:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
 8000fc0:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8000fc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000fc8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000fcc:	b21b      	sxth	r3, r3
 8000fce:	17da      	asrs	r2, r3, #31
 8000fd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000fd4:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8000fd8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000fdc:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8000fe0:	462a      	mov	r2, r5
 8000fe2:	fb02 f203 	mul.w	r2, r2, r3
 8000fe6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000fea:	4621      	mov	r1, r4
 8000fec:	fb01 f303 	mul.w	r3, r1, r3
 8000ff0:	441a      	add	r2, r3
 8000ff2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000ff6:	4621      	mov	r1, r4
 8000ff8:	fba3 3101 	umull	r3, r1, r3, r1
 8000ffc:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 8001000:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001004:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001008:	18d3      	adds	r3, r2, r3
 800100a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800100e:	f04f 0000 	mov.w	r0, #0
 8001012:	f04f 0100 	mov.w	r1, #0
 8001016:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 800101a:	462b      	mov	r3, r5
 800101c:	0459      	lsls	r1, r3, #17
 800101e:	4622      	mov	r2, r4
 8001020:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 8001024:	4623      	mov	r3, r4
 8001026:	0458      	lsls	r0, r3, #17
 8001028:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800102c:	1814      	adds	r4, r2, r0
 800102e:	643c      	str	r4, [r7, #64]	; 0x40
 8001030:	414b      	adcs	r3, r1
 8001032:	647b      	str	r3, [r7, #68]	; 0x44
 8001034:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001038:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 800103c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001040:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001044:	b21b      	sxth	r3, r3
 8001046:	17da      	asrs	r2, r3, #31
 8001048:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800104c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001050:	f04f 0000 	mov.w	r0, #0
 8001054:	f04f 0100 	mov.w	r1, #0
 8001058:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800105c:	00d9      	lsls	r1, r3, #3
 800105e:	2000      	movs	r0, #0
 8001060:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001064:	1814      	adds	r4, r2, r0
 8001066:	63bc      	str	r4, [r7, #56]	; 0x38
 8001068:	414b      	adcs	r3, r1
 800106a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800106c:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001070:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001074:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001078:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800107c:	fb03 f102 	mul.w	r1, r3, r2
 8001080:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001084:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001088:	fb02 f303 	mul.w	r3, r2, r3
 800108c:	18ca      	adds	r2, r1, r3
 800108e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001092:	fba3 3103 	umull	r3, r1, r3, r3
 8001096:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
 800109a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800109e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80010a2:	18d3      	adds	r3, r2, r3
 80010a4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80010a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80010ac:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80010b0:	b21b      	sxth	r3, r3
 80010b2:	17da      	asrs	r2, r3, #31
 80010b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80010b8:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80010bc:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 80010c0:	4622      	mov	r2, r4
 80010c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80010c6:	4641      	mov	r1, r8
 80010c8:	fb01 f202 	mul.w	r2, r1, r2
 80010cc:	464d      	mov	r5, r9
 80010ce:	4618      	mov	r0, r3
 80010d0:	4621      	mov	r1, r4
 80010d2:	4603      	mov	r3, r0
 80010d4:	fb03 f305 	mul.w	r3, r3, r5
 80010d8:	4413      	add	r3, r2
 80010da:	4602      	mov	r2, r0
 80010dc:	4641      	mov	r1, r8
 80010de:	fba2 2101 	umull	r2, r1, r2, r1
 80010e2:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 80010e6:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 80010ea:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80010ee:	4413      	add	r3, r2
 80010f0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80010f4:	f04f 0000 	mov.w	r0, #0
 80010f8:	f04f 0100 	mov.w	r1, #0
 80010fc:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8001100:	4623      	mov	r3, r4
 8001102:	0a18      	lsrs	r0, r3, #8
 8001104:	462a      	mov	r2, r5
 8001106:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 800110a:	462b      	mov	r3, r5
 800110c:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 800110e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001112:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001116:	b21b      	sxth	r3, r3
 8001118:	17da      	asrs	r2, r3, #31
 800111a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800111e:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001122:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001126:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 800112a:	464a      	mov	r2, r9
 800112c:	fb02 f203 	mul.w	r2, r2, r3
 8001130:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001134:	4644      	mov	r4, r8
 8001136:	fb04 f303 	mul.w	r3, r4, r3
 800113a:	441a      	add	r2, r3
 800113c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001140:	4644      	mov	r4, r8
 8001142:	fba3 3404 	umull	r3, r4, r3, r4
 8001146:	f8c7 40ec 	str.w	r4, [r7, #236]	; 0xec
 800114a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800114e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001152:	18d3      	adds	r3, r2, r3
 8001154:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001158:	f04f 0200 	mov.w	r2, #0
 800115c:	f04f 0300 	mov.w	r3, #0
 8001160:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8001164:	464c      	mov	r4, r9
 8001166:	0323      	lsls	r3, r4, #12
 8001168:	46c4      	mov	ip, r8
 800116a:	ea43 531c 	orr.w	r3, r3, ip, lsr #20
 800116e:	4644      	mov	r4, r8
 8001170:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001172:	1884      	adds	r4, r0, r2
 8001174:	633c      	str	r4, [r7, #48]	; 0x30
 8001176:	eb41 0303 	adc.w	r3, r1, r3
 800117a:	637b      	str	r3, [r7, #52]	; 0x34
 800117c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001180:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8001184:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001188:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 800118c:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8001190:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001194:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001198:	88db      	ldrh	r3, [r3, #6]
 800119a:	b29b      	uxth	r3, r3
 800119c:	2200      	movs	r2, #0
 800119e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80011a2:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80011a6:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 80011aa:	4622      	mov	r2, r4
 80011ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80011b0:	4641      	mov	r1, r8
 80011b2:	fb01 f202 	mul.w	r2, r1, r2
 80011b6:	464d      	mov	r5, r9
 80011b8:	4618      	mov	r0, r3
 80011ba:	4621      	mov	r1, r4
 80011bc:	4603      	mov	r3, r0
 80011be:	fb03 f305 	mul.w	r3, r3, r5
 80011c2:	4413      	add	r3, r2
 80011c4:	4602      	mov	r2, r0
 80011c6:	4641      	mov	r1, r8
 80011c8:	fba2 2101 	umull	r2, r1, r2, r1
 80011cc:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 80011d0:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 80011d4:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80011d8:	4413      	add	r3, r2
 80011da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80011de:	f04f 0200 	mov.w	r2, #0
 80011e2:	f04f 0300 	mov.w	r3, #0
 80011e6:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 80011ea:	4629      	mov	r1, r5
 80011ec:	104a      	asrs	r2, r1, #1
 80011ee:	4629      	mov	r1, r5
 80011f0:	17cb      	asrs	r3, r1, #31
 80011f2:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128

	if (var1 == 0) {
 80011f6:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80011fa:	4313      	orrs	r3, r2
 80011fc:	d101      	bne.n	8001202 <compensate_pressure+0x2da>
		return 0;  // avoid exception caused by division by zero
 80011fe:	2300      	movs	r3, #0
 8001200:	e146      	b.n	8001490 <compensate_pressure+0x568>
	}

	p = 1048576 - adc_press;
 8001202:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001206:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800120a:	17da      	asrs	r2, r3, #31
 800120c:	62bb      	str	r3, [r7, #40]	; 0x28
 800120e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001210:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001214:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 8001218:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800121c:	105b      	asrs	r3, r3, #1
 800121e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001222:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001226:	07db      	lsls	r3, r3, #31
 8001228:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800122c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001230:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001234:	4604      	mov	r4, r0
 8001236:	1aa4      	subs	r4, r4, r2
 8001238:	67bc      	str	r4, [r7, #120]	; 0x78
 800123a:	eb61 0303 	sbc.w	r3, r1, r3
 800123e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001240:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001244:	4622      	mov	r2, r4
 8001246:	462b      	mov	r3, r5
 8001248:	1891      	adds	r1, r2, r2
 800124a:	6239      	str	r1, [r7, #32]
 800124c:	415b      	adcs	r3, r3
 800124e:	627b      	str	r3, [r7, #36]	; 0x24
 8001250:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001254:	4621      	mov	r1, r4
 8001256:	1851      	adds	r1, r2, r1
 8001258:	61b9      	str	r1, [r7, #24]
 800125a:	4629      	mov	r1, r5
 800125c:	414b      	adcs	r3, r1
 800125e:	61fb      	str	r3, [r7, #28]
 8001260:	f04f 0200 	mov.w	r2, #0
 8001264:	f04f 0300 	mov.w	r3, #0
 8001268:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800126c:	4649      	mov	r1, r9
 800126e:	018b      	lsls	r3, r1, #6
 8001270:	4641      	mov	r1, r8
 8001272:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001276:	4641      	mov	r1, r8
 8001278:	018a      	lsls	r2, r1, #6
 800127a:	4641      	mov	r1, r8
 800127c:	1889      	adds	r1, r1, r2
 800127e:	6139      	str	r1, [r7, #16]
 8001280:	4649      	mov	r1, r9
 8001282:	eb43 0101 	adc.w	r1, r3, r1
 8001286:	6179      	str	r1, [r7, #20]
 8001288:	f04f 0200 	mov.w	r2, #0
 800128c:	f04f 0300 	mov.w	r3, #0
 8001290:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001294:	4649      	mov	r1, r9
 8001296:	008b      	lsls	r3, r1, #2
 8001298:	46c4      	mov	ip, r8
 800129a:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 800129e:	4641      	mov	r1, r8
 80012a0:	008a      	lsls	r2, r1, #2
 80012a2:	4610      	mov	r0, r2
 80012a4:	4619      	mov	r1, r3
 80012a6:	4603      	mov	r3, r0
 80012a8:	4622      	mov	r2, r4
 80012aa:	189b      	adds	r3, r3, r2
 80012ac:	60bb      	str	r3, [r7, #8]
 80012ae:	460b      	mov	r3, r1
 80012b0:	462a      	mov	r2, r5
 80012b2:	eb42 0303 	adc.w	r3, r2, r3
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	f04f 0200 	mov.w	r2, #0
 80012bc:	f04f 0300 	mov.w	r3, #0
 80012c0:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80012c4:	4649      	mov	r1, r9
 80012c6:	008b      	lsls	r3, r1, #2
 80012c8:	46c4      	mov	ip, r8
 80012ca:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 80012ce:	4641      	mov	r1, r8
 80012d0:	008a      	lsls	r2, r1, #2
 80012d2:	4610      	mov	r0, r2
 80012d4:	4619      	mov	r1, r3
 80012d6:	4603      	mov	r3, r0
 80012d8:	4622      	mov	r2, r4
 80012da:	189b      	adds	r3, r3, r2
 80012dc:	673b      	str	r3, [r7, #112]	; 0x70
 80012de:	462b      	mov	r3, r5
 80012e0:	460a      	mov	r2, r1
 80012e2:	eb42 0303 	adc.w	r3, r2, r3
 80012e6:	677b      	str	r3, [r7, #116]	; 0x74
 80012e8:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80012ec:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80012f0:	f7ff fa00 	bl	80006f4 <__aeabi_ldivmod>
 80012f4:	4602      	mov	r2, r0
 80012f6:	460b      	mov	r3, r1
 80012f8:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 80012fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001300:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001304:	b21b      	sxth	r3, r3
 8001306:	17da      	asrs	r2, r3, #31
 8001308:	66bb      	str	r3, [r7, #104]	; 0x68
 800130a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800130c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001310:	f04f 0000 	mov.w	r0, #0
 8001314:	f04f 0100 	mov.w	r1, #0
 8001318:	0b50      	lsrs	r0, r2, #13
 800131a:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800131e:	1359      	asrs	r1, r3, #13
 8001320:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001324:	462b      	mov	r3, r5
 8001326:	fb00 f203 	mul.w	r2, r0, r3
 800132a:	4623      	mov	r3, r4
 800132c:	fb03 f301 	mul.w	r3, r3, r1
 8001330:	4413      	add	r3, r2
 8001332:	4622      	mov	r2, r4
 8001334:	fba2 2100 	umull	r2, r1, r2, r0
 8001338:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 800133c:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8001340:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001344:	4413      	add	r3, r2
 8001346:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800134a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800134e:	f04f 0000 	mov.w	r0, #0
 8001352:	f04f 0100 	mov.w	r1, #0
 8001356:	0b50      	lsrs	r0, r2, #13
 8001358:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800135c:	1359      	asrs	r1, r3, #13
 800135e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001362:	462b      	mov	r3, r5
 8001364:	fb00 f203 	mul.w	r2, r0, r3
 8001368:	4623      	mov	r3, r4
 800136a:	fb03 f301 	mul.w	r3, r3, r1
 800136e:	4413      	add	r3, r2
 8001370:	4622      	mov	r2, r4
 8001372:	fba2 2100 	umull	r2, r1, r2, r0
 8001376:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 800137a:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 800137e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001382:	4413      	add	r3, r2
 8001384:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001388:	f04f 0200 	mov.w	r2, #0
 800138c:	f04f 0300 	mov.w	r3, #0
 8001390:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8001394:	4621      	mov	r1, r4
 8001396:	0e4a      	lsrs	r2, r1, #25
 8001398:	4620      	mov	r0, r4
 800139a:	4629      	mov	r1, r5
 800139c:	460c      	mov	r4, r1
 800139e:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
 80013a2:	164b      	asrs	r3, r1, #25
 80013a4:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 80013a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80013ac:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80013b0:	b21b      	sxth	r3, r3
 80013b2:	17da      	asrs	r2, r3, #31
 80013b4:	663b      	str	r3, [r7, #96]	; 0x60
 80013b6:	667a      	str	r2, [r7, #100]	; 0x64
 80013b8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80013bc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80013c0:	462a      	mov	r2, r5
 80013c2:	fb02 f203 	mul.w	r2, r2, r3
 80013c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80013ca:	4621      	mov	r1, r4
 80013cc:	fb01 f303 	mul.w	r3, r1, r3
 80013d0:	4413      	add	r3, r2
 80013d2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80013d6:	4621      	mov	r1, r4
 80013d8:	fba2 2101 	umull	r2, r1, r2, r1
 80013dc:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 80013e0:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 80013e4:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80013e8:	4413      	add	r3, r2
 80013ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	f04f 0300 	mov.w	r3, #0
 80013f6:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 80013fa:	4621      	mov	r1, r4
 80013fc:	0cca      	lsrs	r2, r1, #19
 80013fe:	4620      	mov	r0, r4
 8001400:	4629      	mov	r1, r5
 8001402:	460c      	mov	r4, r1
 8001404:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 8001408:	14cb      	asrs	r3, r1, #19
 800140a:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 800140e:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8001412:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001416:	1884      	adds	r4, r0, r2
 8001418:	65bc      	str	r4, [r7, #88]	; 0x58
 800141a:	eb41 0303 	adc.w	r3, r1, r3
 800141e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001420:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001424:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001428:	4621      	mov	r1, r4
 800142a:	1889      	adds	r1, r1, r2
 800142c:	6539      	str	r1, [r7, #80]	; 0x50
 800142e:	4629      	mov	r1, r5
 8001430:	eb43 0101 	adc.w	r1, r3, r1
 8001434:	6579      	str	r1, [r7, #84]	; 0x54
 8001436:	f04f 0000 	mov.w	r0, #0
 800143a:	f04f 0100 	mov.w	r1, #0
 800143e:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001442:	4623      	mov	r3, r4
 8001444:	0a18      	lsrs	r0, r3, #8
 8001446:	462a      	mov	r2, r5
 8001448:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 800144c:	462b      	mov	r3, r5
 800144e:	1219      	asrs	r1, r3, #8
 8001450:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001454:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001458:	b21b      	sxth	r3, r3
 800145a:	17da      	asrs	r2, r3, #31
 800145c:	64bb      	str	r3, [r7, #72]	; 0x48
 800145e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001460:	f04f 0200 	mov.w	r2, #0
 8001464:	f04f 0300 	mov.w	r3, #0
 8001468:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 800146c:	464c      	mov	r4, r9
 800146e:	0123      	lsls	r3, r4, #4
 8001470:	46c4      	mov	ip, r8
 8001472:	ea43 731c 	orr.w	r3, r3, ip, lsr #28
 8001476:	4644      	mov	r4, r8
 8001478:	0122      	lsls	r2, r4, #4
 800147a:	1884      	adds	r4, r0, r2
 800147c:	603c      	str	r4, [r7, #0]
 800147e:	eb41 0303 	adc.w	r3, r1, r3
 8001482:	607b      	str	r3, [r7, #4]
 8001484:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001488:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	return p;
 800148c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
}
 8001490:	4618      	mov	r0, r3
 8001492:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001496:	46bd      	mov	sp, r7
 8001498:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800149c <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 800149c:	b480      	push	{r7}
 800149e:	b087      	sub	sp, #28
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	60b9      	str	r1, [r7, #8]
 80014a6:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 80014ae:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	039a      	lsls	r2, r3, #14
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80014ba:	051b      	lsls	r3, r3, #20
 80014bc:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80014c4:	4619      	mov	r1, r3
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	fb01 f303 	mul.w	r3, r1, r3
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80014d2:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 80014d4:	68fa      	ldr	r2, [r7, #12]
 80014d6:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 80014da:	4611      	mov	r1, r2
 80014dc:	697a      	ldr	r2, [r7, #20]
 80014de:	fb01 f202 	mul.w	r2, r1, r2
 80014e2:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 80014e4:	68f9      	ldr	r1, [r7, #12]
 80014e6:	7f09      	ldrb	r1, [r1, #28]
 80014e8:	4608      	mov	r0, r1
 80014ea:	6979      	ldr	r1, [r7, #20]
 80014ec:	fb00 f101 	mul.w	r1, r0, r1
 80014f0:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 80014f2:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 80014f6:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 80014fa:	1292      	asrs	r2, r2, #10
 80014fc:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8001500:	68f9      	ldr	r1, [r7, #12]
 8001502:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001506:	fb01 f202 	mul.w	r2, r1, r2
 800150a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800150e:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001510:	fb02 f303 	mul.w	r3, r2, r3
 8001514:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	13db      	asrs	r3, r3, #15
 800151a:	697a      	ldr	r2, [r7, #20]
 800151c:	13d2      	asrs	r2, r2, #15
 800151e:	fb02 f303 	mul.w	r3, r2, r3
 8001522:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8001524:	68fa      	ldr	r2, [r7, #12]
 8001526:	7e12      	ldrb	r2, [r2, #24]
 8001528:	fb02 f303 	mul.w	r3, r2, r3
 800152c:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 800152e:	697a      	ldr	r2, [r7, #20]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800153a:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001542:	bfa8      	it	ge
 8001544:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001548:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	131b      	asrs	r3, r3, #12
}
 800154e:	4618      	mov	r0, r3
 8001550:	371c      	adds	r7, #28
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr

08001558 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8001558:	b580      	push	{r7, lr}
 800155a:	b08c      	sub	sp, #48	; 0x30
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
 8001564:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800156c:	2b60      	cmp	r3, #96	; 0x60
 800156e:	d007      	beq.n	8001580 <bmp280_read_fixed+0x28>
		if (humidity)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d002      	beq.n	800157c <bmp280_read_fixed+0x24>
			*humidity = 0;
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 800157c:	2300      	movs	r3, #0
 800157e:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <bmp280_read_fixed+0x32>
 8001586:	2308      	movs	r3, #8
 8001588:	e000      	b.n	800158c <bmp280_read_fixed+0x34>
 800158a:	2306      	movs	r3, #6
 800158c:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 800158e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001590:	b2db      	uxtb	r3, r3
 8001592:	f107 0218 	add.w	r2, r7, #24
 8001596:	21f7      	movs	r1, #247	; 0xf7
 8001598:	68f8      	ldr	r0, [r7, #12]
 800159a:	f7ff fab1 	bl	8000b00 <read_data>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <bmp280_read_fixed+0x50>
		return false;
 80015a4:	2300      	movs	r3, #0
 80015a6:	e038      	b.n	800161a <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 80015a8:	7e3b      	ldrb	r3, [r7, #24]
 80015aa:	031a      	lsls	r2, r3, #12
 80015ac:	7e7b      	ldrb	r3, [r7, #25]
 80015ae:	011b      	lsls	r3, r3, #4
 80015b0:	4313      	orrs	r3, r2
 80015b2:	7eba      	ldrb	r2, [r7, #26]
 80015b4:	0912      	lsrs	r2, r2, #4
 80015b6:	b2d2      	uxtb	r2, r2
 80015b8:	4313      	orrs	r3, r2
 80015ba:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 80015bc:	7efb      	ldrb	r3, [r7, #27]
 80015be:	031a      	lsls	r2, r3, #12
 80015c0:	7f3b      	ldrb	r3, [r7, #28]
 80015c2:	011b      	lsls	r3, r3, #4
 80015c4:	4313      	orrs	r3, r2
 80015c6:	7f7a      	ldrb	r2, [r7, #29]
 80015c8:	0912      	lsrs	r2, r2, #4
 80015ca:	b2d2      	uxtb	r2, r2
 80015cc:	4313      	orrs	r3, r2
 80015ce:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 80015d0:	f107 0314 	add.w	r3, r7, #20
 80015d4:	461a      	mov	r2, r3
 80015d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015d8:	68f8      	ldr	r0, [r7, #12]
 80015da:	f7ff fc6d 	bl	8000eb8 <compensate_temperature>
 80015de:	4602      	mov	r2, r0
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	461a      	mov	r2, r3
 80015e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80015ea:	68f8      	ldr	r0, [r7, #12]
 80015ec:	f7ff fc9c 	bl	8000f28 <compensate_pressure>
 80015f0:	4602      	mov	r2, r0
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	601a      	str	r2, [r3, #0]

	if (humidity) {
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d00d      	beq.n	8001618 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 80015fc:	7fbb      	ldrb	r3, [r7, #30]
 80015fe:	021b      	lsls	r3, r3, #8
 8001600:	7ffa      	ldrb	r2, [r7, #31]
 8001602:	4313      	orrs	r3, r2
 8001604:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	461a      	mov	r2, r3
 800160a:	6a39      	ldr	r1, [r7, #32]
 800160c:	68f8      	ldr	r0, [r7, #12]
 800160e:	f7ff ff45 	bl	800149c <compensate_humidity>
 8001612:	4602      	mov	r2, r0
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	601a      	str	r2, [r3, #0]
	}

	return true;
 8001618:	2301      	movs	r3, #1
}
 800161a:	4618      	mov	r0, r3
 800161c:	3730      	adds	r7, #48	; 0x30
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
	...

08001624 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8001624:	b580      	push	{r7, lr}
 8001626:	b088      	sub	sp, #32
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
 8001630:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d002      	beq.n	800163e <bmp280_read_float+0x1a>
 8001638:	f107 0314 	add.w	r3, r7, #20
 800163c:	e000      	b.n	8001640 <bmp280_read_float+0x1c>
 800163e:	2300      	movs	r3, #0
 8001640:	f107 0218 	add.w	r2, r7, #24
 8001644:	f107 011c 	add.w	r1, r7, #28
 8001648:	68f8      	ldr	r0, [r7, #12]
 800164a:	f7ff ff85 	bl	8001558 <bmp280_read_fixed>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d02d      	beq.n	80016b0 <bmp280_read_float+0x8c>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	4618      	mov	r0, r3
 8001658:	f7fe fe32 	bl	80002c0 <__aeabi_i2f>
 800165c:	4603      	mov	r3, r0
 800165e:	4917      	ldr	r1, [pc, #92]	; (80016bc <bmp280_read_float+0x98>)
 8001660:	4618      	mov	r0, r3
 8001662:	f7fe ff35 	bl	80004d0 <__aeabi_fdiv>
 8001666:	4603      	mov	r3, r0
 8001668:	461a      	mov	r2, r3
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	601a      	str	r2, [r3, #0]
		*pressure = (float) fixed_pressure / 256;
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	4618      	mov	r0, r3
 8001672:	f7fe fe21 	bl	80002b8 <__aeabi_ui2f>
 8001676:	4603      	mov	r3, r0
 8001678:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800167c:	4618      	mov	r0, r3
 800167e:	f7fe ff27 	bl	80004d0 <__aeabi_fdiv>
 8001682:	4603      	mov	r3, r0
 8001684:	461a      	mov	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	601a      	str	r2, [r3, #0]
		if (humidity)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d00d      	beq.n	80016ac <bmp280_read_float+0x88>
			*humidity = (float) fixed_humidity / 1024;
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	4618      	mov	r0, r3
 8001694:	f7fe fe10 	bl	80002b8 <__aeabi_ui2f>
 8001698:	4603      	mov	r3, r0
 800169a:	f04f 4189 	mov.w	r1, #1149239296	; 0x44800000
 800169e:	4618      	mov	r0, r3
 80016a0:	f7fe ff16 	bl	80004d0 <__aeabi_fdiv>
 80016a4:	4603      	mov	r3, r0
 80016a6:	461a      	mov	r2, r3
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	601a      	str	r2, [r3, #0]
		return true;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e000      	b.n	80016b2 <bmp280_read_float+0x8e>
	}

	return false;
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3720      	adds	r7, #32
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	42c80000 	.word	0x42c80000

080016c0 <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

 80016c6:	f001 f9e3 	bl	8002a90 <HAL_Init>
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */


 80016ca:	f000 fef7 	bl	80024bc <SystemClock_Config>

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

 80016ce:	f000 ffb1 	bl	8002634 <MX_GPIO_Init>
  /* USER CODE END SysInit */
 80016d2:	f000 ff43 	bl	800255c <MX_ADC1_Init>

 80016d6:	f000 ff7f 	bl	80025d8 <MX_I2C1_Init>
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016da:	48b1      	ldr	r0, [pc, #708]	; (80019a0 <main+0x2e0>)
 80016dc:	f002 fa88 	bl	8003bf0 <HAL_I2C_Init>
  MX_ADC1_Init();
 80016e0:	48b0      	ldr	r0, [pc, #704]	; (80019a4 <main+0x2e4>)
 80016e2:	f001 fb0f 	bl	8002d04 <HAL_ADC_Start>
  MX_I2C1_Init();
  /* USER CODE BEGIN 2 */
 80016e6:	48b0      	ldr	r0, [pc, #704]	; (80019a8 <main+0x2e8>)
 80016e8:	f7ff f9c0 	bl	8000a6c <bmp280_init_default_params>
  HAL_ADC_Start(&hadc1);
 80016ec:	4baf      	ldr	r3, [pc, #700]	; (80019ac <main+0x2ec>)
 80016ee:	2276      	movs	r2, #118	; 0x76
 80016f0:	849a      	strh	r2, [r3, #36]	; 0x24
  HAL_I2C_Init(&hi2c1);
 80016f2:	4bae      	ldr	r3, [pc, #696]	; (80019ac <main+0x2ec>)
 80016f4:	4aaa      	ldr	r2, [pc, #680]	; (80019a0 <main+0x2e0>)
 80016f6:	629a      	str	r2, [r3, #40]	; 0x28

  bmp280_init_default_params(&bmp280.params);
 80016f8:	49ab      	ldr	r1, [pc, #684]	; (80019a8 <main+0x2e8>)
 80016fa:	48ac      	ldr	r0, [pc, #688]	; (80019ac <main+0x2ec>)
 80016fc:	f7ff fb2f 	bl	8000d5e <bmp280_init>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d007      	beq.n	8001716 <main+0x56>
  bmp280.addr = BMP280_I2C_ADDRESS_0;
 8001706:	4ba9      	ldr	r3, [pc, #676]	; (80019ac <main+0x2ec>)
 8001708:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800170c:	2b60      	cmp	r3, #96	; 0x60
 800170e:	bf0c      	ite	eq
 8001710:	2301      	moveq	r3, #1
 8001712:	2300      	movne	r3, #0
 8001714:	71fb      	strb	r3, [r7, #7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
 8001716:	4ba6      	ldr	r3, [pc, #664]	; (80019b0 <main+0x2f0>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2b04      	cmp	r3, #4
 800171c:	f200 86b6 	bhi.w	800248c <main+0xdcc>
 8001720:	a201      	add	r2, pc, #4	; (adr r2, 8001728 <main+0x68>)
 8001722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001726:	bf00      	nop
 8001728:	0800173d 	.word	0x0800173d
 800172c:	08001795 	.word	0x08001795
 8001730:	08001ac5 	.word	0x08001ac5
 8001734:	08001deb 	.word	0x08001deb
 8001738:	0800210f 	.word	0x0800210f

    /* USER CODE BEGIN 3 */
 800173c:	2200      	movs	r2, #0
 800173e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001742:	489c      	ldr	r0, [pc, #624]	; (80019b4 <main+0x2f4>)
 8001744:	f002 fa24 	bl	8003b90 <HAL_GPIO_WritePin>
	switch (STATE) {
 8001748:	2200      	movs	r2, #0
 800174a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800174e:	489a      	ldr	r0, [pc, #616]	; (80019b8 <main+0x2f8>)
 8001750:	f002 fa1e 	bl	8003b90 <HAL_GPIO_WritePin>
	case IDLE: //No hace nada
 8001754:	2200      	movs	r2, #0
 8001756:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800175a:	4897      	ldr	r0, [pc, #604]	; (80019b8 <main+0x2f8>)
 800175c:	f002 fa18 	bl	8003b90 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_1V_GPIO_Port, LED_1V_Pin, 0);
 8001760:	2200      	movs	r2, #0
 8001762:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001766:	4894      	ldr	r0, [pc, #592]	; (80019b8 <main+0x2f8>)
 8001768:	f002 fa12 	bl	8003b90 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_2V_GPIO_Port, LED_2V_Pin, 0);
 800176c:	2200      	movs	r2, #0
 800176e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001772:	4891      	ldr	r0, [pc, #580]	; (80019b8 <main+0x2f8>)
 8001774:	f002 fa0c 	bl	8003b90 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_1A_GPIO_Port, LED_1A_Pin, 0);
 8001778:	2200      	movs	r2, #0
 800177a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800177e:	488e      	ldr	r0, [pc, #568]	; (80019b8 <main+0x2f8>)
 8001780:	f002 fa06 	bl	8003b90 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_2A_GPIO_Port, LED_2A_Pin, 0);
 8001784:	2200      	movs	r2, #0
 8001786:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800178a:	488b      	ldr	r0, [pc, #556]	; (80019b8 <main+0x2f8>)
 800178c:	f002 fa00 	bl	8003b90 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_1R_GPIO_Port, LED_1R_Pin, 0);
		HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, 0);
 8001790:	f000 be86 	b.w	80024a0 <main+0xde0>
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
		break;

	case MT: //Medir temp
		//empezar código
		//pedir valor
 8001794:	4b89      	ldr	r3, [pc, #548]	; (80019bc <main+0x2fc>)
 8001796:	4a8a      	ldr	r2, [pc, #552]	; (80019c0 <main+0x300>)
 8001798:	498a      	ldr	r1, [pc, #552]	; (80019c4 <main+0x304>)
 800179a:	4884      	ldr	r0, [pc, #528]	; (80019ac <main+0x2ec>)
 800179c:	f7ff ff42 	bl	8001624 <bmp280_read_float>
		bmp280_read_float(&bmp280,&temperature,&pressure,&humidity);
		if (temperature < 0){
 80017a0:	4b88      	ldr	r3, [pc, #544]	; (80019c4 <main+0x304>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f04f 0100 	mov.w	r1, #0
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7fe ff7b 	bl	80006a4 <__aeabi_fcmplt>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	f040 866e 	bne.w	8002492 <main+0xdd2>
			//no encender led
			HAL_GPIO_WritePin(LED_1V_GPIO_Port, LED_1V_Pin, 0);
 80017b6:	4b83      	ldr	r3, [pc, #524]	; (80019c4 <main+0x304>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f04f 0100 	mov.w	r1, #0
 80017be:	4618      	mov	r0, r3
 80017c0:	f7fe ff8e 	bl	80006e0 <__aeabi_fcmpgt>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d033      	beq.n	8001832 <main+0x172>
 80017ca:	4b7e      	ldr	r3, [pc, #504]	; (80019c4 <main+0x304>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	497e      	ldr	r1, [pc, #504]	; (80019c8 <main+0x308>)
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7fe ff71 	bl	80006b8 <__aeabi_fcmple>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d02a      	beq.n	8001832 <main+0x172>
			HAL_GPIO_WritePin(LED_2V_GPIO_Port, LED_2V_Pin, 0);
			HAL_GPIO_WritePin(LED_1A_GPIO_Port, LED_1A_Pin, 0);
 80017dc:	2201      	movs	r2, #1
 80017de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017e2:	4874      	ldr	r0, [pc, #464]	; (80019b4 <main+0x2f4>)
 80017e4:	f002 f9d4 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2A_GPIO_Port, LED_2A_Pin, 0);
 80017e8:	2200      	movs	r2, #0
 80017ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017ee:	4872      	ldr	r0, [pc, #456]	; (80019b8 <main+0x2f8>)
 80017f0:	f002 f9ce 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1R_GPIO_Port, LED_1R_Pin, 0);
 80017f4:	2200      	movs	r2, #0
 80017f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017fa:	486f      	ldr	r0, [pc, #444]	; (80019b8 <main+0x2f8>)
 80017fc:	f002 f9c8 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, 0);
 8001800:	2200      	movs	r2, #0
 8001802:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001806:	486c      	ldr	r0, [pc, #432]	; (80019b8 <main+0x2f8>)
 8001808:	f002 f9c2 	bl	8003b90 <HAL_GPIO_WritePin>

 800180c:	2200      	movs	r2, #0
 800180e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001812:	4869      	ldr	r0, [pc, #420]	; (80019b8 <main+0x2f8>)
 8001814:	f002 f9bc 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 8001818:	2200      	movs	r2, #0
 800181a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800181e:	4866      	ldr	r0, [pc, #408]	; (80019b8 <main+0x2f8>)
 8001820:	f002 f9b6 	bl	8003b90 <HAL_GPIO_WritePin>

		} else if (temperature > 0 && temperature <= 10){
 8001824:	2200      	movs	r2, #0
 8001826:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800182a:	4863      	ldr	r0, [pc, #396]	; (80019b8 <main+0x2f8>)
 800182c:	f002 f9b0 	bl	8003b90 <HAL_GPIO_WritePin>
 8001830:	e146      	b.n	8001ac0 <main+0x400>
			//primer led verde
			HAL_GPIO_WritePin(LED_1V_GPIO_Port, LED_1V_Pin, 1);
 8001832:	4b64      	ldr	r3, [pc, #400]	; (80019c4 <main+0x304>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4964      	ldr	r1, [pc, #400]	; (80019c8 <main+0x308>)
 8001838:	4618      	mov	r0, r3
 800183a:	f7fe ff51 	bl	80006e0 <__aeabi_fcmpgt>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d033      	beq.n	80018ac <main+0x1ec>
 8001844:	4b5f      	ldr	r3, [pc, #380]	; (80019c4 <main+0x304>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4960      	ldr	r1, [pc, #384]	; (80019cc <main+0x30c>)
 800184a:	4618      	mov	r0, r3
 800184c:	f7fe ff34 	bl	80006b8 <__aeabi_fcmple>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d02a      	beq.n	80018ac <main+0x1ec>
			HAL_GPIO_WritePin(LED_2V_GPIO_Port, LED_2V_Pin, 0);
			HAL_GPIO_WritePin(LED_1A_GPIO_Port, LED_1A_Pin, 0);
 8001856:	2201      	movs	r2, #1
 8001858:	f44f 7180 	mov.w	r1, #256	; 0x100
 800185c:	4855      	ldr	r0, [pc, #340]	; (80019b4 <main+0x2f4>)
 800185e:	f002 f997 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2A_GPIO_Port, LED_2A_Pin, 0);
 8001862:	2201      	movs	r2, #1
 8001864:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001868:	4853      	ldr	r0, [pc, #332]	; (80019b8 <main+0x2f8>)
 800186a:	f002 f991 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1R_GPIO_Port, LED_1R_Pin, 0);
 800186e:	2200      	movs	r2, #0
 8001870:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001874:	4850      	ldr	r0, [pc, #320]	; (80019b8 <main+0x2f8>)
 8001876:	f002 f98b 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, 0);
 800187a:	2200      	movs	r2, #0
 800187c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001880:	484d      	ldr	r0, [pc, #308]	; (80019b8 <main+0x2f8>)
 8001882:	f002 f985 	bl	8003b90 <HAL_GPIO_WritePin>

 8001886:	2200      	movs	r2, #0
 8001888:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800188c:	484a      	ldr	r0, [pc, #296]	; (80019b8 <main+0x2f8>)
 800188e:	f002 f97f 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0); //Prende el Buzzer
 8001892:	2200      	movs	r2, #0
 8001894:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001898:	4847      	ldr	r0, [pc, #284]	; (80019b8 <main+0x2f8>)
 800189a:	f002 f979 	bl	8003b90 <HAL_GPIO_WritePin>

		} else if (temperature > 10 && temperature <= 21){
 800189e:	2200      	movs	r2, #0
 80018a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018a4:	4844      	ldr	r0, [pc, #272]	; (80019b8 <main+0x2f8>)
 80018a6:	f002 f973 	bl	8003b90 <HAL_GPIO_WritePin>
 80018aa:	e109      	b.n	8001ac0 <main+0x400>
			//primer y desungo led verde
			HAL_GPIO_WritePin(LED_1V_GPIO_Port, LED_1V_Pin, 1);
 80018ac:	4b45      	ldr	r3, [pc, #276]	; (80019c4 <main+0x304>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4946      	ldr	r1, [pc, #280]	; (80019cc <main+0x30c>)
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7fe ff14 	bl	80006e0 <__aeabi_fcmpgt>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d033      	beq.n	8001926 <main+0x266>
 80018be:	4b41      	ldr	r3, [pc, #260]	; (80019c4 <main+0x304>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4943      	ldr	r1, [pc, #268]	; (80019d0 <main+0x310>)
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7fe fef7 	bl	80006b8 <__aeabi_fcmple>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d02a      	beq.n	8001926 <main+0x266>
			HAL_GPIO_WritePin(LED_2V_GPIO_Port, LED_2V_Pin, 1);
			HAL_GPIO_WritePin(LED_1A_GPIO_Port, LED_1A_Pin, 0);
 80018d0:	2201      	movs	r2, #1
 80018d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018d6:	4837      	ldr	r0, [pc, #220]	; (80019b4 <main+0x2f4>)
 80018d8:	f002 f95a 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2A_GPIO_Port, LED_2A_Pin, 0);
 80018dc:	2201      	movs	r2, #1
 80018de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018e2:	4835      	ldr	r0, [pc, #212]	; (80019b8 <main+0x2f8>)
 80018e4:	f002 f954 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1R_GPIO_Port, LED_1R_Pin, 0);
 80018e8:	2201      	movs	r2, #1
 80018ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018ee:	4832      	ldr	r0, [pc, #200]	; (80019b8 <main+0x2f8>)
 80018f0:	f002 f94e 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, 0);
 80018f4:	2200      	movs	r2, #0
 80018f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018fa:	482f      	ldr	r0, [pc, #188]	; (80019b8 <main+0x2f8>)
 80018fc:	f002 f948 	bl	8003b90 <HAL_GPIO_WritePin>

 8001900:	2200      	movs	r2, #0
 8001902:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001906:	482c      	ldr	r0, [pc, #176]	; (80019b8 <main+0x2f8>)
 8001908:	f002 f942 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 800190c:	2200      	movs	r2, #0
 800190e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001912:	4829      	ldr	r0, [pc, #164]	; (80019b8 <main+0x2f8>)
 8001914:	f002 f93c 	bl	8003b90 <HAL_GPIO_WritePin>


 8001918:	2200      	movs	r2, #0
 800191a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800191e:	4826      	ldr	r0, [pc, #152]	; (80019b8 <main+0x2f8>)
 8001920:	f002 f936 	bl	8003b90 <HAL_GPIO_WritePin>
 8001924:	e0cc      	b.n	8001ac0 <main+0x400>
		} else if (temperature > 21 && temperature <= 23){
			//primer y desungo led verde, primer amarillo
 8001926:	4b27      	ldr	r3, [pc, #156]	; (80019c4 <main+0x304>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4929      	ldr	r1, [pc, #164]	; (80019d0 <main+0x310>)
 800192c:	4618      	mov	r0, r3
 800192e:	f7fe fed7 	bl	80006e0 <__aeabi_fcmpgt>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d04f      	beq.n	80019d8 <main+0x318>
 8001938:	4b22      	ldr	r3, [pc, #136]	; (80019c4 <main+0x304>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4925      	ldr	r1, [pc, #148]	; (80019d4 <main+0x314>)
 800193e:	4618      	mov	r0, r3
 8001940:	f7fe feba 	bl	80006b8 <__aeabi_fcmple>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d046      	beq.n	80019d8 <main+0x318>
			HAL_GPIO_WritePin(LED_1V_GPIO_Port, LED_1V_Pin, 1);
			HAL_GPIO_WritePin(LED_2V_GPIO_Port, LED_2V_Pin, 1);
 800194a:	2201      	movs	r2, #1
 800194c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001950:	4818      	ldr	r0, [pc, #96]	; (80019b4 <main+0x2f4>)
 8001952:	f002 f91d 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1A_GPIO_Port, LED_1A_Pin, 1);
 8001956:	2201      	movs	r2, #1
 8001958:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800195c:	4816      	ldr	r0, [pc, #88]	; (80019b8 <main+0x2f8>)
 800195e:	f002 f917 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2A_GPIO_Port, LED_2A_Pin, 0);
 8001962:	2201      	movs	r2, #1
 8001964:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001968:	4813      	ldr	r0, [pc, #76]	; (80019b8 <main+0x2f8>)
 800196a:	f002 f911 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1R_GPIO_Port, LED_1R_Pin, 0);
 800196e:	2201      	movs	r2, #1
 8001970:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001974:	4810      	ldr	r0, [pc, #64]	; (80019b8 <main+0x2f8>)
 8001976:	f002 f90b 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, 0);
 800197a:	2200      	movs	r2, #0
 800197c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001980:	480d      	ldr	r0, [pc, #52]	; (80019b8 <main+0x2f8>)
 8001982:	f002 f905 	bl	8003b90 <HAL_GPIO_WritePin>

 8001986:	2200      	movs	r2, #0
 8001988:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800198c:	480a      	ldr	r0, [pc, #40]	; (80019b8 <main+0x2f8>)
 800198e:	f002 f8ff 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);

 8001992:	2200      	movs	r2, #0
 8001994:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001998:	4807      	ldr	r0, [pc, #28]	; (80019b8 <main+0x2f8>)
 800199a:	f002 f8f9 	bl	8003b90 <HAL_GPIO_WritePin>
 800199e:	e08f      	b.n	8001ac0 <main+0x400>
 80019a0:	20000058 	.word	0x20000058
 80019a4:	20000028 	.word	0x20000028
 80019a8:	200000d8 	.word	0x200000d8
 80019ac:	200000ac 	.word	0x200000ac
 80019b0:	200000e0 	.word	0x200000e0
 80019b4:	40010800 	.word	0x40010800
 80019b8:	40010c00 	.word	0x40010c00
 80019bc:	200000ec 	.word	0x200000ec
 80019c0:	200000f0 	.word	0x200000f0
 80019c4:	200000e8 	.word	0x200000e8
 80019c8:	41200000 	.word	0x41200000
 80019cc:	41b00000 	.word	0x41b00000
 80019d0:	41c80000 	.word	0x41c80000
 80019d4:	41d80000 	.word	0x41d80000
		} else if (temperature > 23 && temperature <= 25){
			//primer y desungo led verde, primer amarillo y de segundo
 80019d8:	4bbd      	ldr	r3, [pc, #756]	; (8001cd0 <main+0x610>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	49bd      	ldr	r1, [pc, #756]	; (8001cd4 <main+0x614>)
 80019de:	4618      	mov	r0, r3
 80019e0:	f7fe fe7e 	bl	80006e0 <__aeabi_fcmpgt>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d033      	beq.n	8001a52 <main+0x392>
 80019ea:	4bb9      	ldr	r3, [pc, #740]	; (8001cd0 <main+0x610>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	49ba      	ldr	r1, [pc, #744]	; (8001cd8 <main+0x618>)
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7fe fe61 	bl	80006b8 <__aeabi_fcmple>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d02a      	beq.n	8001a52 <main+0x392>
			HAL_GPIO_WritePin(LED_1V_GPIO_Port, LED_1V_Pin, 1);
 80019fc:	2201      	movs	r2, #1
 80019fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a02:	48b6      	ldr	r0, [pc, #728]	; (8001cdc <main+0x61c>)
 8001a04:	f002 f8c4 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2V_GPIO_Port, LED_2V_Pin, 1);
 8001a08:	2201      	movs	r2, #1
 8001a0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a0e:	48b4      	ldr	r0, [pc, #720]	; (8001ce0 <main+0x620>)
 8001a10:	f002 f8be 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1A_GPIO_Port, LED_1A_Pin, 1);
 8001a14:	2201      	movs	r2, #1
 8001a16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a1a:	48b1      	ldr	r0, [pc, #708]	; (8001ce0 <main+0x620>)
 8001a1c:	f002 f8b8 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2A_GPIO_Port, LED_2A_Pin, 1);
 8001a20:	2201      	movs	r2, #1
 8001a22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a26:	48ae      	ldr	r0, [pc, #696]	; (8001ce0 <main+0x620>)
 8001a28:	f002 f8b2 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1R_GPIO_Port, LED_1R_Pin, 0);
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a32:	48ab      	ldr	r0, [pc, #684]	; (8001ce0 <main+0x620>)
 8001a34:	f002 f8ac 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, 0);
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a3e:	48a8      	ldr	r0, [pc, #672]	; (8001ce0 <main+0x620>)
 8001a40:	f002 f8a6 	bl	8003b90 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 8001a44:	2201      	movs	r2, #1
 8001a46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a4a:	48a5      	ldr	r0, [pc, #660]	; (8001ce0 <main+0x620>)
 8001a4c:	f002 f8a0 	bl	8003b90 <HAL_GPIO_WritePin>
 8001a50:	e036      	b.n	8001ac0 <main+0x400>

		} else if (temperature > 25 && temperature <= 27){
			//primer y desungo led verde, primer amarillo y de segundo, primer rojo
 8001a52:	4b9f      	ldr	r3, [pc, #636]	; (8001cd0 <main+0x610>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	49a3      	ldr	r1, [pc, #652]	; (8001ce4 <main+0x624>)
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7fe fe41 	bl	80006e0 <__aeabi_fcmpgt>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d101      	bne.n	8001a68 <main+0x3a8>
		} else if (temperature > 27){
			//todos los leds
			HAL_GPIO_WritePin(LED_1V_GPIO_Port, LED_1V_Pin, 1);
			HAL_GPIO_WritePin(LED_2V_GPIO_Port, LED_2V_Pin, 1);
			HAL_GPIO_WritePin(LED_1A_GPIO_Port, LED_1A_Pin, 1);
			HAL_GPIO_WritePin(LED_2A_GPIO_Port, LED_2A_Pin, 1);
 8001a64:	f000 bd15 	b.w	8002492 <main+0xdd2>
			HAL_GPIO_WritePin(LED_2V_GPIO_Port, LED_2V_Pin, 1);
 8001a68:	2201      	movs	r2, #1
 8001a6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a6e:	489b      	ldr	r0, [pc, #620]	; (8001cdc <main+0x61c>)
 8001a70:	f002 f88e 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1A_GPIO_Port, LED_1A_Pin, 1);
 8001a74:	2201      	movs	r2, #1
 8001a76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a7a:	4899      	ldr	r0, [pc, #612]	; (8001ce0 <main+0x620>)
 8001a7c:	f002 f888 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2A_GPIO_Port, LED_2A_Pin, 1);
 8001a80:	2201      	movs	r2, #1
 8001a82:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a86:	4896      	ldr	r0, [pc, #600]	; (8001ce0 <main+0x620>)
 8001a88:	f002 f882 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1R_GPIO_Port, LED_1R_Pin, 1);
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a92:	4893      	ldr	r0, [pc, #588]	; (8001ce0 <main+0x620>)
 8001a94:	f002 f87c 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, 0);
 8001a98:	2201      	movs	r2, #1
 8001a9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a9e:	4890      	ldr	r0, [pc, #576]	; (8001ce0 <main+0x620>)
 8001aa0:	f002 f876 	bl	8003b90 <HAL_GPIO_WritePin>

 8001aa4:	2201      	movs	r2, #1
 8001aa6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001aaa:	488d      	ldr	r0, [pc, #564]	; (8001ce0 <main+0x620>)
 8001aac:	f002 f870 	bl	8003b90 <HAL_GPIO_WritePin>

 8001ab0:	2201      	movs	r2, #1
 8001ab2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ab6:	488a      	ldr	r0, [pc, #552]	; (8001ce0 <main+0x620>)
 8001ab8:	f002 f86a 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2A_GPIO_Port, LED_2A_Pin, 1);
 8001abc:	f000 bce9 	b.w	8002492 <main+0xdd2>
 8001ac0:	f000 bce7 	b.w	8002492 <main+0xdd2>
			HAL_GPIO_WritePin(LED_1R_GPIO_Port, LED_1R_Pin, 1);
			HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, 1);

			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 8001ac4:	4b88      	ldr	r3, [pc, #544]	; (8001ce8 <main+0x628>)
 8001ac6:	4a89      	ldr	r2, [pc, #548]	; (8001cec <main+0x62c>)
 8001ac8:	4981      	ldr	r1, [pc, #516]	; (8001cd0 <main+0x610>)
 8001aca:	4889      	ldr	r0, [pc, #548]	; (8001cf0 <main+0x630>)
 8001acc:	f7ff fdaa 	bl	8001624 <bmp280_read_float>

		} else {
 8001ad0:	4b85      	ldr	r3, [pc, #532]	; (8001ce8 <main+0x628>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f04f 0100 	mov.w	r1, #0
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7fe fde3 	bl	80006a4 <__aeabi_fcmplt>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	f040 84d9 	bne.w	8002498 <main+0xdd8>
			//ninguno
			HAL_GPIO_WritePin(LED_1V_GPIO_Port, LED_1V_Pin, 0);
 8001ae6:	4b80      	ldr	r3, [pc, #512]	; (8001ce8 <main+0x628>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f04f 0100 	mov.w	r1, #0
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7fe fdf6 	bl	80006e0 <__aeabi_fcmpgt>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d033      	beq.n	8001b62 <main+0x4a2>
 8001afa:	4b7b      	ldr	r3, [pc, #492]	; (8001ce8 <main+0x628>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	497d      	ldr	r1, [pc, #500]	; (8001cf4 <main+0x634>)
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7fe fdd9 	bl	80006b8 <__aeabi_fcmple>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d02a      	beq.n	8001b62 <main+0x4a2>
			HAL_GPIO_WritePin(LED_2V_GPIO_Port, LED_2V_Pin, 0);
			HAL_GPIO_WritePin(LED_1A_GPIO_Port, LED_1A_Pin, 0);
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b12:	4872      	ldr	r0, [pc, #456]	; (8001cdc <main+0x61c>)
 8001b14:	f002 f83c 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2A_GPIO_Port, LED_2A_Pin, 0);
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b1e:	4870      	ldr	r0, [pc, #448]	; (8001ce0 <main+0x620>)
 8001b20:	f002 f836 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1R_GPIO_Port, LED_1R_Pin, 0);
 8001b24:	2200      	movs	r2, #0
 8001b26:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b2a:	486d      	ldr	r0, [pc, #436]	; (8001ce0 <main+0x620>)
 8001b2c:	f002 f830 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, 0);
 8001b30:	2200      	movs	r2, #0
 8001b32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b36:	486a      	ldr	r0, [pc, #424]	; (8001ce0 <main+0x620>)
 8001b38:	f002 f82a 	bl	8003b90 <HAL_GPIO_WritePin>

 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b42:	4867      	ldr	r0, [pc, #412]	; (8001ce0 <main+0x620>)
 8001b44:	f002 f824 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b4e:	4864      	ldr	r0, [pc, #400]	; (8001ce0 <main+0x620>)
 8001b50:	f002 f81e 	bl	8003b90 <HAL_GPIO_WritePin>
		}

 8001b54:	2200      	movs	r2, #0
 8001b56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b5a:	4861      	ldr	r0, [pc, #388]	; (8001ce0 <main+0x620>)
 8001b5c:	f002 f818 	bl	8003b90 <HAL_GPIO_WritePin>
 8001b60:	e142      	b.n	8001de8 <main+0x728>
		break;

 8001b62:	4b61      	ldr	r3, [pc, #388]	; (8001ce8 <main+0x628>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4963      	ldr	r1, [pc, #396]	; (8001cf4 <main+0x634>)
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7fe fdb9 	bl	80006e0 <__aeabi_fcmpgt>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d033      	beq.n	8001bdc <main+0x51c>
 8001b74:	4b5c      	ldr	r3, [pc, #368]	; (8001ce8 <main+0x628>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	495f      	ldr	r1, [pc, #380]	; (8001cf8 <main+0x638>)
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7fe fd9c 	bl	80006b8 <__aeabi_fcmple>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d02a      	beq.n	8001bdc <main+0x51c>
	case MH: //Medir humedad
		//empezar código
 8001b86:	2201      	movs	r2, #1
 8001b88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b8c:	4853      	ldr	r0, [pc, #332]	; (8001cdc <main+0x61c>)
 8001b8e:	f001 ffff 	bl	8003b90 <HAL_GPIO_WritePin>
		//pedir valor
 8001b92:	2201      	movs	r2, #1
 8001b94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b98:	4851      	ldr	r0, [pc, #324]	; (8001ce0 <main+0x620>)
 8001b9a:	f001 fff9 	bl	8003b90 <HAL_GPIO_WritePin>
		bmp280_read_float(&bmp280,&temperature,&pressure,&humidity);
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ba4:	484e      	ldr	r0, [pc, #312]	; (8001ce0 <main+0x620>)
 8001ba6:	f001 fff3 	bl	8003b90 <HAL_GPIO_WritePin>
		if (humidity < 0){
 8001baa:	2200      	movs	r2, #0
 8001bac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bb0:	484b      	ldr	r0, [pc, #300]	; (8001ce0 <main+0x620>)
 8001bb2:	f001 ffed 	bl	8003b90 <HAL_GPIO_WritePin>
			//no encender led
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bbc:	4848      	ldr	r0, [pc, #288]	; (8001ce0 <main+0x620>)
 8001bbe:	f001 ffe7 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1V_GPIO_Port, LED_1V_Pin, 0);
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bc8:	4845      	ldr	r0, [pc, #276]	; (8001ce0 <main+0x620>)
 8001bca:	f001 ffe1 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2V_GPIO_Port, LED_2V_Pin, 0);
			HAL_GPIO_WritePin(LED_1A_GPIO_Port, LED_1A_Pin, 0);
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bd4:	4842      	ldr	r0, [pc, #264]	; (8001ce0 <main+0x620>)
 8001bd6:	f001 ffdb 	bl	8003b90 <HAL_GPIO_WritePin>
 8001bda:	e105      	b.n	8001de8 <main+0x728>
			HAL_GPIO_WritePin(LED_2A_GPIO_Port, LED_2A_Pin, 0);
			HAL_GPIO_WritePin(LED_1R_GPIO_Port, LED_1R_Pin, 0);
 8001bdc:	4b42      	ldr	r3, [pc, #264]	; (8001ce8 <main+0x628>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4945      	ldr	r1, [pc, #276]	; (8001cf8 <main+0x638>)
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7fe fd7c 	bl	80006e0 <__aeabi_fcmpgt>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d033      	beq.n	8001c56 <main+0x596>
 8001bee:	4b3e      	ldr	r3, [pc, #248]	; (8001ce8 <main+0x628>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4942      	ldr	r1, [pc, #264]	; (8001cfc <main+0x63c>)
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7fe fd5f 	bl	80006b8 <__aeabi_fcmple>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d02a      	beq.n	8001c56 <main+0x596>
			HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, 0);

 8001c00:	2201      	movs	r2, #1
 8001c02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c06:	4835      	ldr	r0, [pc, #212]	; (8001cdc <main+0x61c>)
 8001c08:	f001 ffc2 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c12:	4833      	ldr	r0, [pc, #204]	; (8001ce0 <main+0x620>)
 8001c14:	f001 ffbc 	bl	8003b90 <HAL_GPIO_WritePin>

 8001c18:	2201      	movs	r2, #1
 8001c1a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c1e:	4830      	ldr	r0, [pc, #192]	; (8001ce0 <main+0x620>)
 8001c20:	f001 ffb6 	bl	8003b90 <HAL_GPIO_WritePin>
		} else if (humidity > 0 && humidity <= 20){
 8001c24:	2200      	movs	r2, #0
 8001c26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c2a:	482d      	ldr	r0, [pc, #180]	; (8001ce0 <main+0x620>)
 8001c2c:	f001 ffb0 	bl	8003b90 <HAL_GPIO_WritePin>
			//primer led verde
 8001c30:	2200      	movs	r2, #0
 8001c32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c36:	482a      	ldr	r0, [pc, #168]	; (8001ce0 <main+0x620>)
 8001c38:	f001 ffaa 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1V_GPIO_Port, LED_1V_Pin, 1);
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c42:	4827      	ldr	r0, [pc, #156]	; (8001ce0 <main+0x620>)
 8001c44:	f001 ffa4 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2V_GPIO_Port, LED_2V_Pin, 0);
			HAL_GPIO_WritePin(LED_1A_GPIO_Port, LED_1A_Pin, 0);
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c4e:	4824      	ldr	r0, [pc, #144]	; (8001ce0 <main+0x620>)
 8001c50:	f001 ff9e 	bl	8003b90 <HAL_GPIO_WritePin>
 8001c54:	e0c8      	b.n	8001de8 <main+0x728>
			HAL_GPIO_WritePin(LED_2A_GPIO_Port, LED_2A_Pin, 0);
			HAL_GPIO_WritePin(LED_1R_GPIO_Port, LED_1R_Pin, 0);
 8001c56:	4b24      	ldr	r3, [pc, #144]	; (8001ce8 <main+0x628>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4928      	ldr	r1, [pc, #160]	; (8001cfc <main+0x63c>)
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7fe fd3f 	bl	80006e0 <__aeabi_fcmpgt>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d04d      	beq.n	8001d04 <main+0x644>
 8001c68:	4b1f      	ldr	r3, [pc, #124]	; (8001ce8 <main+0x628>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4924      	ldr	r1, [pc, #144]	; (8001d00 <main+0x640>)
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7fe fd22 	bl	80006b8 <__aeabi_fcmple>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d044      	beq.n	8001d04 <main+0x644>
			HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, 0);

 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c80:	4816      	ldr	r0, [pc, #88]	; (8001cdc <main+0x61c>)
 8001c82:	f001 ff85 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 8001c86:	2201      	movs	r2, #1
 8001c88:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c8c:	4814      	ldr	r0, [pc, #80]	; (8001ce0 <main+0x620>)
 8001c8e:	f001 ff7f 	bl	8003b90 <HAL_GPIO_WritePin>

 8001c92:	2201      	movs	r2, #1
 8001c94:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c98:	4811      	ldr	r0, [pc, #68]	; (8001ce0 <main+0x620>)
 8001c9a:	f001 ff79 	bl	8003b90 <HAL_GPIO_WritePin>
		} else if (humidity > 20 && humidity <= 40){
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ca4:	480e      	ldr	r0, [pc, #56]	; (8001ce0 <main+0x620>)
 8001ca6:	f001 ff73 	bl	8003b90 <HAL_GPIO_WritePin>
			//primer y desungo led verde
 8001caa:	2200      	movs	r2, #0
 8001cac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cb0:	480b      	ldr	r0, [pc, #44]	; (8001ce0 <main+0x620>)
 8001cb2:	f001 ff6d 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1V_GPIO_Port, LED_1V_Pin, 1);
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001cbc:	4808      	ldr	r0, [pc, #32]	; (8001ce0 <main+0x620>)
 8001cbe:	f001 ff67 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2V_GPIO_Port, LED_2V_Pin, 1);
			HAL_GPIO_WritePin(LED_1A_GPIO_Port, LED_1A_Pin, 0);
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cc8:	4805      	ldr	r0, [pc, #20]	; (8001ce0 <main+0x620>)
 8001cca:	f001 ff61 	bl	8003b90 <HAL_GPIO_WritePin>
 8001cce:	e08b      	b.n	8001de8 <main+0x728>
 8001cd0:	200000e8 	.word	0x200000e8
 8001cd4:	41d80000 	.word	0x41d80000
 8001cd8:	41e80000 	.word	0x41e80000
 8001cdc:	40010800 	.word	0x40010800
 8001ce0:	40010c00 	.word	0x40010c00
 8001ce4:	41f00000 	.word	0x41f00000
 8001ce8:	200000ec 	.word	0x200000ec
 8001cec:	200000f0 	.word	0x200000f0
 8001cf0:	200000ac 	.word	0x200000ac
 8001cf4:	41a00000 	.word	0x41a00000
 8001cf8:	42200000 	.word	0x42200000
 8001cfc:	42700000 	.word	0x42700000
 8001d00:	42a00000 	.word	0x42a00000
			HAL_GPIO_WritePin(LED_2A_GPIO_Port, LED_2A_Pin, 0);
			HAL_GPIO_WritePin(LED_1R_GPIO_Port, LED_1R_Pin, 0);
 8001d04:	4bbb      	ldr	r3, [pc, #748]	; (8001ff4 <main+0x934>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	49bb      	ldr	r1, [pc, #748]	; (8001ff8 <main+0x938>)
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7fe fce8 	bl	80006e0 <__aeabi_fcmpgt>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d033      	beq.n	8001d7e <main+0x6be>
 8001d16:	4bb7      	ldr	r3, [pc, #732]	; (8001ff4 <main+0x934>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	49b8      	ldr	r1, [pc, #736]	; (8001ffc <main+0x93c>)
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7fe fcc1 	bl	80006a4 <__aeabi_fcmplt>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d02a      	beq.n	8001d7e <main+0x6be>
			HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, 0);
 8001d28:	2201      	movs	r2, #1
 8001d2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d2e:	48b4      	ldr	r0, [pc, #720]	; (8002000 <main+0x940>)
 8001d30:	f001 ff2e 	bl	8003b90 <HAL_GPIO_WritePin>

 8001d34:	2201      	movs	r2, #1
 8001d36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d3a:	48b2      	ldr	r0, [pc, #712]	; (8002004 <main+0x944>)
 8001d3c:	f001 ff28 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 8001d40:	2201      	movs	r2, #1
 8001d42:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d46:	48af      	ldr	r0, [pc, #700]	; (8002004 <main+0x944>)
 8001d48:	f001 ff22 	bl	8003b90 <HAL_GPIO_WritePin>

 8001d4c:	2201      	movs	r2, #1
 8001d4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d52:	48ac      	ldr	r0, [pc, #688]	; (8002004 <main+0x944>)
 8001d54:	f001 ff1c 	bl	8003b90 <HAL_GPIO_WritePin>
		} else if (humidity > 40 && humidity <= 60){
 8001d58:	2201      	movs	r2, #1
 8001d5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d5e:	48a9      	ldr	r0, [pc, #676]	; (8002004 <main+0x944>)
 8001d60:	f001 ff16 	bl	8003b90 <HAL_GPIO_WritePin>
			//primer y desungo led verde, primer amarillo
 8001d64:	2200      	movs	r2, #0
 8001d66:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d6a:	48a6      	ldr	r0, [pc, #664]	; (8002004 <main+0x944>)
 8001d6c:	f001 ff10 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1V_GPIO_Port, LED_1V_Pin, 1);
			HAL_GPIO_WritePin(LED_2V_GPIO_Port, LED_2V_Pin, 1);
 8001d70:	2201      	movs	r2, #1
 8001d72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d76:	48a3      	ldr	r0, [pc, #652]	; (8002004 <main+0x944>)
 8001d78:	f001 ff0a 	bl	8003b90 <HAL_GPIO_WritePin>
 8001d7c:	e034      	b.n	8001de8 <main+0x728>
			HAL_GPIO_WritePin(LED_1A_GPIO_Port, LED_1A_Pin, 1);
			HAL_GPIO_WritePin(LED_2A_GPIO_Port, LED_2A_Pin, 0);
 8001d7e:	4b9d      	ldr	r3, [pc, #628]	; (8001ff4 <main+0x934>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	499e      	ldr	r1, [pc, #632]	; (8001ffc <main+0x93c>)
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7fe fcab 	bl	80006e0 <__aeabi_fcmpgt>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d100      	bne.n	8001d92 <main+0x6d2>
			HAL_GPIO_WritePin(LED_1V_GPIO_Port, LED_1V_Pin, 1);
			HAL_GPIO_WritePin(LED_2V_GPIO_Port, LED_2V_Pin, 1);
			HAL_GPIO_WritePin(LED_1A_GPIO_Port, LED_1A_Pin, 1);
			HAL_GPIO_WritePin(LED_2A_GPIO_Port, LED_2A_Pin, 1);
			HAL_GPIO_WritePin(LED_1R_GPIO_Port, LED_1R_Pin, 0);
			HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, 0);
 8001d90:	e382      	b.n	8002498 <main+0xdd8>
			HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, 0);
 8001d92:	2201      	movs	r2, #1
 8001d94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d98:	4899      	ldr	r0, [pc, #612]	; (8002000 <main+0x940>)
 8001d9a:	f001 fef9 	bl	8003b90 <HAL_GPIO_WritePin>

 8001d9e:	2201      	movs	r2, #1
 8001da0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001da4:	4897      	ldr	r0, [pc, #604]	; (8002004 <main+0x944>)
 8001da6:	f001 fef3 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 8001daa:	2201      	movs	r2, #1
 8001dac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001db0:	4894      	ldr	r0, [pc, #592]	; (8002004 <main+0x944>)
 8001db2:	f001 feed 	bl	8003b90 <HAL_GPIO_WritePin>

 8001db6:	2201      	movs	r2, #1
 8001db8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dbc:	4891      	ldr	r0, [pc, #580]	; (8002004 <main+0x944>)
 8001dbe:	f001 fee7 	bl	8003b90 <HAL_GPIO_WritePin>
		} else if (humidity > 60 && humidity <= 80){
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dc8:	488e      	ldr	r0, [pc, #568]	; (8002004 <main+0x944>)
 8001dca:	f001 fee1 	bl	8003b90 <HAL_GPIO_WritePin>
			//primer y desungo led verde, primer amarillo y de segundo
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001dd4:	488b      	ldr	r0, [pc, #556]	; (8002004 <main+0x944>)
 8001dd6:	f001 fedb 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1V_GPIO_Port, LED_1V_Pin, 1);
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001de0:	4888      	ldr	r0, [pc, #544]	; (8002004 <main+0x944>)
 8001de2:	f001 fed5 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, 0);
 8001de6:	e357      	b.n	8002498 <main+0xdd8>
 8001de8:	e356      	b.n	8002498 <main+0xdd8>

			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);

		} else if (humidity > 80 && humidity <= 100){
 8001dea:	4b82      	ldr	r3, [pc, #520]	; (8001ff4 <main+0x934>)
 8001dec:	4a86      	ldr	r2, [pc, #536]	; (8002008 <main+0x948>)
 8001dee:	4987      	ldr	r1, [pc, #540]	; (800200c <main+0x94c>)
 8001df0:	4887      	ldr	r0, [pc, #540]	; (8002010 <main+0x950>)
 8001df2:	f7ff fc17 	bl	8001624 <bmp280_read_float>
			//primer y desungo led verde, primer amarillo y de segundo, primer rojo
			HAL_GPIO_WritePin(LED_1V_GPIO_Port, LED_1V_Pin, 1);
 8001df6:	4b84      	ldr	r3, [pc, #528]	; (8002008 <main+0x948>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4986      	ldr	r1, [pc, #536]	; (8002014 <main+0x954>)
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7fe fc51 	bl	80006a4 <__aeabi_fcmplt>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	f040 834a 	bne.w	800249e <main+0xdde>
			HAL_GPIO_WritePin(LED_2V_GPIO_Port, LED_2V_Pin, 1);
			HAL_GPIO_WritePin(LED_1A_GPIO_Port, LED_1A_Pin, 1);
 8001e0a:	4b7f      	ldr	r3, [pc, #508]	; (8002008 <main+0x948>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4981      	ldr	r1, [pc, #516]	; (8002014 <main+0x954>)
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7fe fc5b 	bl	80006cc <__aeabi_fcmpge>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d033      	beq.n	8001e84 <main+0x7c4>
 8001e1c:	4b7a      	ldr	r3, [pc, #488]	; (8002008 <main+0x948>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	497d      	ldr	r1, [pc, #500]	; (8002018 <main+0x958>)
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7fe fc48 	bl	80006b8 <__aeabi_fcmple>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d02a      	beq.n	8001e84 <main+0x7c4>
			HAL_GPIO_WritePin(LED_2A_GPIO_Port, LED_2A_Pin, 1);
			HAL_GPIO_WritePin(LED_1R_GPIO_Port, LED_1R_Pin, 1);
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e34:	4872      	ldr	r0, [pc, #456]	; (8002000 <main+0x940>)
 8001e36:	f001 feab 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, 0);
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e40:	4870      	ldr	r0, [pc, #448]	; (8002004 <main+0x944>)
 8001e42:	f001 fea5 	bl	8003b90 <HAL_GPIO_WritePin>

 8001e46:	2200      	movs	r2, #0
 8001e48:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e4c:	486d      	ldr	r0, [pc, #436]	; (8002004 <main+0x944>)
 8001e4e:	f001 fe9f 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 8001e52:	2200      	movs	r2, #0
 8001e54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e58:	486a      	ldr	r0, [pc, #424]	; (8002004 <main+0x944>)
 8001e5a:	f001 fe99 	bl	8003b90 <HAL_GPIO_WritePin>

 8001e5e:	2200      	movs	r2, #0
 8001e60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e64:	4867      	ldr	r0, [pc, #412]	; (8002004 <main+0x944>)
 8001e66:	f001 fe93 	bl	8003b90 <HAL_GPIO_WritePin>
		} else if (humidity > 100){
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e70:	4864      	ldr	r0, [pc, #400]	; (8002004 <main+0x944>)
 8001e72:	f001 fe8d 	bl	8003b90 <HAL_GPIO_WritePin>
				//todos los leds
			HAL_GPIO_WritePin(LED_1V_GPIO_Port, LED_1V_Pin, 1);
 8001e76:	2200      	movs	r2, #0
 8001e78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e7c:	4861      	ldr	r0, [pc, #388]	; (8002004 <main+0x944>)
 8001e7e:	f001 fe87 	bl	8003b90 <HAL_GPIO_WritePin>
 8001e82:	e143      	b.n	800210c <main+0xa4c>
			HAL_GPIO_WritePin(LED_2V_GPIO_Port, LED_2V_Pin, 1);
			HAL_GPIO_WritePin(LED_1A_GPIO_Port, LED_1A_Pin, 1);
 8001e84:	4b60      	ldr	r3, [pc, #384]	; (8002008 <main+0x948>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4963      	ldr	r1, [pc, #396]	; (8002018 <main+0x958>)
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7fe fc28 	bl	80006e0 <__aeabi_fcmpgt>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d033      	beq.n	8001efe <main+0x83e>
 8001e96:	4b5c      	ldr	r3, [pc, #368]	; (8002008 <main+0x948>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4960      	ldr	r1, [pc, #384]	; (800201c <main+0x95c>)
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7fe fc0b 	bl	80006b8 <__aeabi_fcmple>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d02a      	beq.n	8001efe <main+0x83e>
			HAL_GPIO_WritePin(LED_2A_GPIO_Port, LED_2A_Pin, 1);
			HAL_GPIO_WritePin(LED_1R_GPIO_Port, LED_1R_Pin, 1);
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001eae:	4854      	ldr	r0, [pc, #336]	; (8002000 <main+0x940>)
 8001eb0:	f001 fe6e 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, 1);
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001eba:	4852      	ldr	r0, [pc, #328]	; (8002004 <main+0x944>)
 8001ebc:	f001 fe68 	bl	8003b90 <HAL_GPIO_WritePin>

 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ec6:	484f      	ldr	r0, [pc, #316]	; (8002004 <main+0x944>)
 8001ec8:	f001 fe62 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ed2:	484c      	ldr	r0, [pc, #304]	; (8002004 <main+0x944>)
 8001ed4:	f001 fe5c 	bl	8003b90 <HAL_GPIO_WritePin>

 8001ed8:	2200      	movs	r2, #0
 8001eda:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ede:	4849      	ldr	r0, [pc, #292]	; (8002004 <main+0x944>)
 8001ee0:	f001 fe56 	bl	8003b90 <HAL_GPIO_WritePin>
		} else {
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001eea:	4846      	ldr	r0, [pc, #280]	; (8002004 <main+0x944>)
 8001eec:	f001 fe50 	bl	8003b90 <HAL_GPIO_WritePin>
			//ninguno
			HAL_GPIO_WritePin(LED_1V_GPIO_Port, LED_1V_Pin, 0);
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ef6:	4843      	ldr	r0, [pc, #268]	; (8002004 <main+0x944>)
 8001ef8:	f001 fe4a 	bl	8003b90 <HAL_GPIO_WritePin>
 8001efc:	e106      	b.n	800210c <main+0xa4c>
			HAL_GPIO_WritePin(LED_2V_GPIO_Port, LED_2V_Pin, 0);
			HAL_GPIO_WritePin(LED_1A_GPIO_Port, LED_1A_Pin, 0);
 8001efe:	4b42      	ldr	r3, [pc, #264]	; (8002008 <main+0x948>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4946      	ldr	r1, [pc, #280]	; (800201c <main+0x95c>)
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7fe fbeb 	bl	80006e0 <__aeabi_fcmpgt>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d033      	beq.n	8001f78 <main+0x8b8>
 8001f10:	4b3d      	ldr	r3, [pc, #244]	; (8002008 <main+0x948>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4942      	ldr	r1, [pc, #264]	; (8002020 <main+0x960>)
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7fe fbce 	bl	80006b8 <__aeabi_fcmple>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d02a      	beq.n	8001f78 <main+0x8b8>
			HAL_GPIO_WritePin(LED_2A_GPIO_Port, LED_2A_Pin, 0);
			HAL_GPIO_WritePin(LED_1R_GPIO_Port, LED_1R_Pin, 0);
 8001f22:	2201      	movs	r2, #1
 8001f24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f28:	4835      	ldr	r0, [pc, #212]	; (8002000 <main+0x940>)
 8001f2a:	f001 fe31 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, 0);
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f34:	4833      	ldr	r0, [pc, #204]	; (8002004 <main+0x944>)
 8001f36:	f001 fe2b 	bl	8003b90 <HAL_GPIO_WritePin>

 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f40:	4830      	ldr	r0, [pc, #192]	; (8002004 <main+0x944>)
 8001f42:	f001 fe25 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 8001f46:	2200      	movs	r2, #0
 8001f48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f4c:	482d      	ldr	r0, [pc, #180]	; (8002004 <main+0x944>)
 8001f4e:	f001 fe1f 	bl	8003b90 <HAL_GPIO_WritePin>
		}
 8001f52:	2200      	movs	r2, #0
 8001f54:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f58:	482a      	ldr	r0, [pc, #168]	; (8002004 <main+0x944>)
 8001f5a:	f001 fe19 	bl	8003b90 <HAL_GPIO_WritePin>

 8001f5e:	2200      	movs	r2, #0
 8001f60:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f64:	4827      	ldr	r0, [pc, #156]	; (8002004 <main+0x944>)
 8001f66:	f001 fe13 	bl	8003b90 <HAL_GPIO_WritePin>
	    break;

 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f70:	4824      	ldr	r0, [pc, #144]	; (8002004 <main+0x944>)
 8001f72:	f001 fe0d 	bl	8003b90 <HAL_GPIO_WritePin>
 8001f76:	e0c9      	b.n	800210c <main+0xa4c>
	case MP: //medir presión
		//empezar código
 8001f78:	4b23      	ldr	r3, [pc, #140]	; (8002008 <main+0x948>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4928      	ldr	r1, [pc, #160]	; (8002020 <main+0x960>)
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7fe fbae 	bl	80006e0 <__aeabi_fcmpgt>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d04e      	beq.n	8002028 <main+0x968>
 8001f8a:	4b1f      	ldr	r3, [pc, #124]	; (8002008 <main+0x948>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4925      	ldr	r1, [pc, #148]	; (8002024 <main+0x964>)
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7fe fb91 	bl	80006b8 <__aeabi_fcmple>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d045      	beq.n	8002028 <main+0x968>
		//pedir valor
		bmp280_read_float(&bmp280,&temperature,&pressure,&humidity);
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fa2:	4817      	ldr	r0, [pc, #92]	; (8002000 <main+0x940>)
 8001fa4:	f001 fdf4 	bl	8003b90 <HAL_GPIO_WritePin>
		if (pressure < 0){
 8001fa8:	2201      	movs	r2, #1
 8001faa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fae:	4815      	ldr	r0, [pc, #84]	; (8002004 <main+0x944>)
 8001fb0:	f001 fdee 	bl	8003b90 <HAL_GPIO_WritePin>
		//no encender led
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001fba:	4812      	ldr	r0, [pc, #72]	; (8002004 <main+0x944>)
 8001fbc:	f001 fde8 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1V_GPIO_Port, LED_1V_Pin, 0);
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fc6:	480f      	ldr	r0, [pc, #60]	; (8002004 <main+0x944>)
 8001fc8:	f001 fde2 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2V_GPIO_Port, LED_2V_Pin, 0);
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fd2:	480c      	ldr	r0, [pc, #48]	; (8002004 <main+0x944>)
 8001fd4:	f001 fddc 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1A_GPIO_Port, LED_1A_Pin, 0);
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fde:	4809      	ldr	r0, [pc, #36]	; (8002004 <main+0x944>)
 8001fe0:	f001 fdd6 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2A_GPIO_Port, LED_2A_Pin, 0);
			HAL_GPIO_WritePin(LED_1R_GPIO_Port, LED_1R_Pin, 0);
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fea:	4806      	ldr	r0, [pc, #24]	; (8002004 <main+0x944>)
 8001fec:	f001 fdd0 	bl	8003b90 <HAL_GPIO_WritePin>
 8001ff0:	e08c      	b.n	800210c <main+0xa4c>
 8001ff2:	bf00      	nop
 8001ff4:	200000ec 	.word	0x200000ec
 8001ff8:	42a00000 	.word	0x42a00000
 8001ffc:	42c80000 	.word	0x42c80000
 8002000:	40010800 	.word	0x40010800
 8002004:	40010c00 	.word	0x40010c00
 8002008:	200000f0 	.word	0x200000f0
 800200c:	200000e8 	.word	0x200000e8
 8002010:	200000ac 	.word	0x200000ac
 8002014:	43960000 	.word	0x43960000
 8002018:	43fa0000 	.word	0x43fa0000
 800201c:	442f0000 	.word	0x442f0000
 8002020:	44610000 	.word	0x44610000
 8002024:	447a0000 	.word	0x447a0000
			HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, 0);

 8002028:	4bb5      	ldr	r3, [pc, #724]	; (8002300 <main+0xc40>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	49b5      	ldr	r1, [pc, #724]	; (8002304 <main+0xc44>)
 800202e:	4618      	mov	r0, r3
 8002030:	f7fe fb56 	bl	80006e0 <__aeabi_fcmpgt>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d033      	beq.n	80020a2 <main+0x9e2>
 800203a:	4bb1      	ldr	r3, [pc, #708]	; (8002300 <main+0xc40>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	49b2      	ldr	r1, [pc, #712]	; (8002308 <main+0xc48>)
 8002040:	4618      	mov	r0, r3
 8002042:	f7fe fb39 	bl	80006b8 <__aeabi_fcmple>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d02a      	beq.n	80020a2 <main+0x9e2>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 800204c:	2201      	movs	r2, #1
 800204e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002052:	48ae      	ldr	r0, [pc, #696]	; (800230c <main+0xc4c>)
 8002054:	f001 fd9c 	bl	8003b90 <HAL_GPIO_WritePin>

 8002058:	2201      	movs	r2, #1
 800205a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800205e:	48ac      	ldr	r0, [pc, #688]	; (8002310 <main+0xc50>)
 8002060:	f001 fd96 	bl	8003b90 <HAL_GPIO_WritePin>
		} else if (pressure > 0 && pressure <= 20){
 8002064:	2201      	movs	r2, #1
 8002066:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800206a:	48a9      	ldr	r0, [pc, #676]	; (8002310 <main+0xc50>)
 800206c:	f001 fd90 	bl	8003b90 <HAL_GPIO_WritePin>
		//primer led verde
 8002070:	2201      	movs	r2, #1
 8002072:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002076:	48a6      	ldr	r0, [pc, #664]	; (8002310 <main+0xc50>)
 8002078:	f001 fd8a 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1V_GPIO_Port, LED_1V_Pin, 1);
 800207c:	2201      	movs	r2, #1
 800207e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002082:	48a3      	ldr	r0, [pc, #652]	; (8002310 <main+0xc50>)
 8002084:	f001 fd84 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2V_GPIO_Port, LED_2V_Pin, 0);
 8002088:	2200      	movs	r2, #0
 800208a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800208e:	48a0      	ldr	r0, [pc, #640]	; (8002310 <main+0xc50>)
 8002090:	f001 fd7e 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1A_GPIO_Port, LED_1A_Pin, 0);
			HAL_GPIO_WritePin(LED_2A_GPIO_Port, LED_2A_Pin, 0);
 8002094:	2201      	movs	r2, #1
 8002096:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800209a:	489d      	ldr	r0, [pc, #628]	; (8002310 <main+0xc50>)
 800209c:	f001 fd78 	bl	8003b90 <HAL_GPIO_WritePin>
 80020a0:	e034      	b.n	800210c <main+0xa4c>
			HAL_GPIO_WritePin(LED_1R_GPIO_Port, LED_1R_Pin, 0);
			HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, 0);

 80020a2:	4b97      	ldr	r3, [pc, #604]	; (8002300 <main+0xc40>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4998      	ldr	r1, [pc, #608]	; (8002308 <main+0xc48>)
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7fe fb19 	bl	80006e0 <__aeabi_fcmpgt>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d100      	bne.n	80020b6 <main+0x9f6>
			HAL_GPIO_WritePin(LED_1A_GPIO_Port, LED_1A_Pin, 0);
			HAL_GPIO_WritePin(LED_2A_GPIO_Port, LED_2A_Pin, 0);
			HAL_GPIO_WritePin(LED_1R_GPIO_Port, LED_1R_Pin, 0);
			HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, 0);

			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 80020b4:	e1f3      	b.n	800249e <main+0xdde>

 80020b6:	2201      	movs	r2, #1
 80020b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020bc:	4893      	ldr	r0, [pc, #588]	; (800230c <main+0xc4c>)
 80020be:	f001 fd67 	bl	8003b90 <HAL_GPIO_WritePin>
		} else if (pressure > 20 && pressure <= 40){
 80020c2:	2201      	movs	r2, #1
 80020c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020c8:	4891      	ldr	r0, [pc, #580]	; (8002310 <main+0xc50>)
 80020ca:	f001 fd61 	bl	8003b90 <HAL_GPIO_WritePin>
		//primer y desungo led verde
 80020ce:	2201      	movs	r2, #1
 80020d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80020d4:	488e      	ldr	r0, [pc, #568]	; (8002310 <main+0xc50>)
 80020d6:	f001 fd5b 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1V_GPIO_Port, LED_1V_Pin, 1);
 80020da:	2201      	movs	r2, #1
 80020dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020e0:	488b      	ldr	r0, [pc, #556]	; (8002310 <main+0xc50>)
 80020e2:	f001 fd55 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2V_GPIO_Port, LED_2V_Pin, 1);
 80020e6:	2201      	movs	r2, #1
 80020e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020ec:	4888      	ldr	r0, [pc, #544]	; (8002310 <main+0xc50>)
 80020ee:	f001 fd4f 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1A_GPIO_Port, LED_1A_Pin, 0);
 80020f2:	2201      	movs	r2, #1
 80020f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020f8:	4885      	ldr	r0, [pc, #532]	; (8002310 <main+0xc50>)
 80020fa:	f001 fd49 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1R_GPIO_Port, LED_1R_Pin, 0);
 80020fe:	2201      	movs	r2, #1
 8002100:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002104:	4882      	ldr	r0, [pc, #520]	; (8002310 <main+0xc50>)
 8002106:	f001 fd43 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 800210a:	e1c8      	b.n	800249e <main+0xdde>
 800210c:	e1c7      	b.n	800249e <main+0xdde>

		} else if (pressure > 40 && pressure <= 60){
		//primer y desungo led verde, primer amarillo
 800210e:	2164      	movs	r1, #100	; 0x64
 8002110:	4880      	ldr	r0, [pc, #512]	; (8002314 <main+0xc54>)
 8002112:	f000 fea5 	bl	8002e60 <HAL_ADC_PollForConversion>
			HAL_GPIO_WritePin(LED_1V_GPIO_Port, LED_1V_Pin, 1);
 8002116:	487f      	ldr	r0, [pc, #508]	; (8002314 <main+0xc54>)
 8002118:	f000 ffa8 	bl	800306c <HAL_ADC_GetValue>
 800211c:	4603      	mov	r3, r0
 800211e:	4618      	mov	r0, r3
 8002120:	f7fe f8ca 	bl	80002b8 <__aeabi_ui2f>
 8002124:	4603      	mov	r3, r0
 8002126:	4a7c      	ldr	r2, [pc, #496]	; (8002318 <main+0xc58>)
 8002128:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(LED_2V_GPIO_Port, LED_2V_Pin, 1);
			HAL_GPIO_WritePin(LED_1A_GPIO_Port, LED_1A_Pin, 1);
 800212a:	4b7b      	ldr	r3, [pc, #492]	; (8002318 <main+0xc58>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	497b      	ldr	r1, [pc, #492]	; (800231c <main+0xc5c>)
 8002130:	4618      	mov	r0, r3
 8002132:	f7fe fab7 	bl	80006a4 <__aeabi_fcmplt>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d02a      	beq.n	8002192 <main+0xad2>
			HAL_GPIO_WritePin(LED_2A_GPIO_Port, LED_2A_Pin, 0);
			HAL_GPIO_WritePin(LED_1R_GPIO_Port, LED_1R_Pin, 0);
 800213c:	2200      	movs	r2, #0
 800213e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002142:	4872      	ldr	r0, [pc, #456]	; (800230c <main+0xc4c>)
 8002144:	f001 fd24 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, 0);
 8002148:	2200      	movs	r2, #0
 800214a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800214e:	4870      	ldr	r0, [pc, #448]	; (8002310 <main+0xc50>)
 8002150:	f001 fd1e 	bl	8003b90 <HAL_GPIO_WritePin>

 8002154:	2200      	movs	r2, #0
 8002156:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800215a:	486d      	ldr	r0, [pc, #436]	; (8002310 <main+0xc50>)
 800215c:	f001 fd18 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 8002160:	2200      	movs	r2, #0
 8002162:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002166:	486a      	ldr	r0, [pc, #424]	; (8002310 <main+0xc50>)
 8002168:	f001 fd12 	bl	8003b90 <HAL_GPIO_WritePin>

 800216c:	2200      	movs	r2, #0
 800216e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002172:	4867      	ldr	r0, [pc, #412]	; (8002310 <main+0xc50>)
 8002174:	f001 fd0c 	bl	8003b90 <HAL_GPIO_WritePin>
		} else if (pressure > 60 && pressure <= 80){
 8002178:	2200      	movs	r2, #0
 800217a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800217e:	4864      	ldr	r0, [pc, #400]	; (8002310 <main+0xc50>)
 8002180:	f001 fd06 	bl	8003b90 <HAL_GPIO_WritePin>
		//primer y desungo led verde, primer amarillo y de segundo
 8002184:	2201      	movs	r2, #1
 8002186:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800218a:	4861      	ldr	r0, [pc, #388]	; (8002310 <main+0xc50>)
 800218c:	f001 fd00 	bl	8003b90 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_1V_GPIO_Port, LED_1V_Pin, 1);
		HAL_GPIO_WritePin(LED_2V_GPIO_Port, LED_2V_Pin, 0);
		HAL_GPIO_WritePin(LED_1A_GPIO_Port, LED_1A_Pin, 0);
		HAL_GPIO_WritePin(LED_2A_GPIO_Port, LED_2A_Pin, 0);
		HAL_GPIO_WritePin(LED_1R_GPIO_Port, LED_1R_Pin, 0);
		HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, 0);
 8002190:	e186      	b.n	80024a0 <main+0xde0>
			HAL_GPIO_WritePin(LED_1V_GPIO_Port, LED_1V_Pin, 1);
 8002192:	4b61      	ldr	r3, [pc, #388]	; (8002318 <main+0xc58>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4961      	ldr	r1, [pc, #388]	; (800231c <main+0xc5c>)
 8002198:	4618      	mov	r0, r3
 800219a:	f7fe faa1 	bl	80006e0 <__aeabi_fcmpgt>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d033      	beq.n	800220c <main+0xb4c>
 80021a4:	4b5c      	ldr	r3, [pc, #368]	; (8002318 <main+0xc58>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	495d      	ldr	r1, [pc, #372]	; (8002320 <main+0xc60>)
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7fe fa84 	bl	80006b8 <__aeabi_fcmple>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d02a      	beq.n	800220c <main+0xb4c>
			HAL_GPIO_WritePin(LED_1A_GPIO_Port, LED_1A_Pin, 1);
 80021b6:	2201      	movs	r2, #1
 80021b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021bc:	4853      	ldr	r0, [pc, #332]	; (800230c <main+0xc4c>)
 80021be:	f001 fce7 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2A_GPIO_Port, LED_2A_Pin, 1);
 80021c2:	2200      	movs	r2, #0
 80021c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021c8:	4851      	ldr	r0, [pc, #324]	; (8002310 <main+0xc50>)
 80021ca:	f001 fce1 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1R_GPIO_Port, LED_1R_Pin, 0);
 80021ce:	2200      	movs	r2, #0
 80021d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80021d4:	484e      	ldr	r0, [pc, #312]	; (8002310 <main+0xc50>)
 80021d6:	f001 fcdb 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, 0);
 80021da:	2200      	movs	r2, #0
 80021dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021e0:	484b      	ldr	r0, [pc, #300]	; (8002310 <main+0xc50>)
 80021e2:	f001 fcd5 	bl	8003b90 <HAL_GPIO_WritePin>

 80021e6:	2200      	movs	r2, #0
 80021e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021ec:	4848      	ldr	r0, [pc, #288]	; (8002310 <main+0xc50>)
 80021ee:	f001 fccf 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 80021f2:	2200      	movs	r2, #0
 80021f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021f8:	4845      	ldr	r0, [pc, #276]	; (8002310 <main+0xc50>)
 80021fa:	f001 fcc9 	bl	8003b90 <HAL_GPIO_WritePin>

 80021fe:	2200      	movs	r2, #0
 8002200:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002204:	4842      	ldr	r0, [pc, #264]	; (8002310 <main+0xc50>)
 8002206:	f001 fcc3 	bl	8003b90 <HAL_GPIO_WritePin>
 800220a:	e13e      	b.n	800248a <main+0xdca>
		//primer y desungo led verde, primer amarillo y de segundo, primer rojo
 800220c:	4b42      	ldr	r3, [pc, #264]	; (8002318 <main+0xc58>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4943      	ldr	r1, [pc, #268]	; (8002320 <main+0xc60>)
 8002212:	4618      	mov	r0, r3
 8002214:	f7fe fa64 	bl	80006e0 <__aeabi_fcmpgt>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d033      	beq.n	8002286 <main+0xbc6>
 800221e:	4b3e      	ldr	r3, [pc, #248]	; (8002318 <main+0xc58>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4940      	ldr	r1, [pc, #256]	; (8002324 <main+0xc64>)
 8002224:	4618      	mov	r0, r3
 8002226:	f7fe fa47 	bl	80006b8 <__aeabi_fcmple>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d02a      	beq.n	8002286 <main+0xbc6>
			HAL_GPIO_WritePin(LED_2V_GPIO_Port, LED_2V_Pin, 1);
 8002230:	2201      	movs	r2, #1
 8002232:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002236:	4835      	ldr	r0, [pc, #212]	; (800230c <main+0xc4c>)
 8002238:	f001 fcaa 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1A_GPIO_Port, LED_1A_Pin, 1);
 800223c:	2201      	movs	r2, #1
 800223e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002242:	4833      	ldr	r0, [pc, #204]	; (8002310 <main+0xc50>)
 8002244:	f001 fca4 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2A_GPIO_Port, LED_2A_Pin, 1);
 8002248:	2200      	movs	r2, #0
 800224a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800224e:	4830      	ldr	r0, [pc, #192]	; (8002310 <main+0xc50>)
 8002250:	f001 fc9e 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1R_GPIO_Port, LED_1R_Pin, 1);
 8002254:	2200      	movs	r2, #0
 8002256:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800225a:	482d      	ldr	r0, [pc, #180]	; (8002310 <main+0xc50>)
 800225c:	f001 fc98 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, 0);
 8002260:	2200      	movs	r2, #0
 8002262:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002266:	482a      	ldr	r0, [pc, #168]	; (8002310 <main+0xc50>)
 8002268:	f001 fc92 	bl	8003b90 <HAL_GPIO_WritePin>

 800226c:	2200      	movs	r2, #0
 800226e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002272:	4827      	ldr	r0, [pc, #156]	; (8002310 <main+0xc50>)
 8002274:	f001 fc8c 	bl	8003b90 <HAL_GPIO_WritePin>

 8002278:	2200      	movs	r2, #0
 800227a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800227e:	4824      	ldr	r0, [pc, #144]	; (8002310 <main+0xc50>)
 8002280:	f001 fc86 	bl	8003b90 <HAL_GPIO_WritePin>
 8002284:	e101      	b.n	800248a <main+0xdca>
		//todos los leds
 8002286:	4b24      	ldr	r3, [pc, #144]	; (8002318 <main+0xc58>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4926      	ldr	r1, [pc, #152]	; (8002324 <main+0xc64>)
 800228c:	4618      	mov	r0, r3
 800228e:	f7fe fa27 	bl	80006e0 <__aeabi_fcmpgt>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d049      	beq.n	800232c <main+0xc6c>
 8002298:	4b1f      	ldr	r3, [pc, #124]	; (8002318 <main+0xc58>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4922      	ldr	r1, [pc, #136]	; (8002328 <main+0xc68>)
 800229e:	4618      	mov	r0, r3
 80022a0:	f7fe fa0a 	bl	80006b8 <__aeabi_fcmple>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d040      	beq.n	800232c <main+0xc6c>
			HAL_GPIO_WritePin(LED_2V_GPIO_Port, LED_2V_Pin, 1);
 80022aa:	2201      	movs	r2, #1
 80022ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022b0:	4816      	ldr	r0, [pc, #88]	; (800230c <main+0xc4c>)
 80022b2:	f001 fc6d 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1A_GPIO_Port, LED_1A_Pin, 1);
 80022b6:	2201      	movs	r2, #1
 80022b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022bc:	4814      	ldr	r0, [pc, #80]	; (8002310 <main+0xc50>)
 80022be:	f001 fc67 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2A_GPIO_Port, LED_2A_Pin, 1);
 80022c2:	2201      	movs	r2, #1
 80022c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80022c8:	4811      	ldr	r0, [pc, #68]	; (8002310 <main+0xc50>)
 80022ca:	f001 fc61 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1R_GPIO_Port, LED_1R_Pin, 1);
 80022ce:	2200      	movs	r2, #0
 80022d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022d4:	480e      	ldr	r0, [pc, #56]	; (8002310 <main+0xc50>)
 80022d6:	f001 fc5b 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, 1);
 80022da:	2200      	movs	r2, #0
 80022dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022e0:	480b      	ldr	r0, [pc, #44]	; (8002310 <main+0xc50>)
 80022e2:	f001 fc55 	bl	8003b90 <HAL_GPIO_WritePin>

 80022e6:	2200      	movs	r2, #0
 80022e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022ec:	4808      	ldr	r0, [pc, #32]	; (8002310 <main+0xc50>)
 80022ee:	f001 fc4f 	bl	8003b90 <HAL_GPIO_WritePin>

 80022f2:	2200      	movs	r2, #0
 80022f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022f8:	4805      	ldr	r0, [pc, #20]	; (8002310 <main+0xc50>)
 80022fa:	f001 fc49 	bl	8003b90 <HAL_GPIO_WritePin>
 80022fe:	e0c4      	b.n	800248a <main+0xdca>
 8002300:	200000f0 	.word	0x200000f0
 8002304:	447a0000 	.word	0x447a0000
 8002308:	44898000 	.word	0x44898000
 800230c:	40010800 	.word	0x40010800
 8002310:	40010c00 	.word	0x40010c00
 8002314:	20000028 	.word	0x20000028
 8002318:	200000f4 	.word	0x200000f4
 800231c:	43480000 	.word	0x43480000
 8002320:	43fa0000 	.word	0x43fa0000
 8002324:	44bb8000 	.word	0x44bb8000
 8002328:	451c4000 	.word	0x451c4000
		//ninguno
 800232c:	4b5d      	ldr	r3, [pc, #372]	; (80024a4 <main+0xde4>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	495d      	ldr	r1, [pc, #372]	; (80024a8 <main+0xde8>)
 8002332:	4618      	mov	r0, r3
 8002334:	f7fe f9d4 	bl	80006e0 <__aeabi_fcmpgt>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d033      	beq.n	80023a6 <main+0xce6>
 800233e:	4b59      	ldr	r3, [pc, #356]	; (80024a4 <main+0xde4>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	495a      	ldr	r1, [pc, #360]	; (80024ac <main+0xdec>)
 8002344:	4618      	mov	r0, r3
 8002346:	f7fe f9b7 	bl	80006b8 <__aeabi_fcmple>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d02a      	beq.n	80023a6 <main+0xce6>
			HAL_GPIO_WritePin(LED_2V_GPIO_Port, LED_2V_Pin, 0);
 8002350:	2201      	movs	r2, #1
 8002352:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002356:	4856      	ldr	r0, [pc, #344]	; (80024b0 <main+0xdf0>)
 8002358:	f001 fc1a 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1A_GPIO_Port, LED_1A_Pin, 0);
 800235c:	2201      	movs	r2, #1
 800235e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002362:	4854      	ldr	r0, [pc, #336]	; (80024b4 <main+0xdf4>)
 8002364:	f001 fc14 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2A_GPIO_Port, LED_2A_Pin, 0);
 8002368:	2201      	movs	r2, #1
 800236a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800236e:	4851      	ldr	r0, [pc, #324]	; (80024b4 <main+0xdf4>)
 8002370:	f001 fc0e 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1R_GPIO_Port, LED_1R_Pin, 0);
 8002374:	2201      	movs	r2, #1
 8002376:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800237a:	484e      	ldr	r0, [pc, #312]	; (80024b4 <main+0xdf4>)
 800237c:	f001 fc08 	bl	8003b90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, 0);
 8002380:	2200      	movs	r2, #0
 8002382:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002386:	484b      	ldr	r0, [pc, #300]	; (80024b4 <main+0xdf4>)
 8002388:	f001 fc02 	bl	8003b90 <HAL_GPIO_WritePin>

 800238c:	2200      	movs	r2, #0
 800238e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002392:	4848      	ldr	r0, [pc, #288]	; (80024b4 <main+0xdf4>)
 8002394:	f001 fbfc 	bl	8003b90 <HAL_GPIO_WritePin>
			}
 8002398:	2200      	movs	r2, #0
 800239a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800239e:	4845      	ldr	r0, [pc, #276]	; (80024b4 <main+0xdf4>)
 80023a0:	f001 fbf6 	bl	8003b90 <HAL_GPIO_WritePin>
 80023a4:	e071      	b.n	800248a <main+0xdca>
			break;
 80023a6:	4b3f      	ldr	r3, [pc, #252]	; (80024a4 <main+0xde4>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4940      	ldr	r1, [pc, #256]	; (80024ac <main+0xdec>)
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7fe f997 	bl	80006e0 <__aeabi_fcmpgt>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d033      	beq.n	8002420 <main+0xd60>
 80023b8:	4b3a      	ldr	r3, [pc, #232]	; (80024a4 <main+0xde4>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	493e      	ldr	r1, [pc, #248]	; (80024b8 <main+0xdf8>)
 80023be:	4618      	mov	r0, r3
 80023c0:	f7fe f97a 	bl	80006b8 <__aeabi_fcmple>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d02a      	beq.n	8002420 <main+0xd60>

 80023ca:	2201      	movs	r2, #1
 80023cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023d0:	4837      	ldr	r0, [pc, #220]	; (80024b0 <main+0xdf0>)
 80023d2:	f001 fbdd 	bl	8003b90 <HAL_GPIO_WritePin>
	case ML: //medir luz
 80023d6:	2201      	movs	r2, #1
 80023d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023dc:	4835      	ldr	r0, [pc, #212]	; (80024b4 <main+0xdf4>)
 80023de:	f001 fbd7 	bl	8003b90 <HAL_GPIO_WritePin>
		//empezar código
 80023e2:	2201      	movs	r2, #1
 80023e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80023e8:	4832      	ldr	r0, [pc, #200]	; (80024b4 <main+0xdf4>)
 80023ea:	f001 fbd1 	bl	8003b90 <HAL_GPIO_WritePin>
		//pedir valor
 80023ee:	2201      	movs	r2, #1
 80023f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023f4:	482f      	ldr	r0, [pc, #188]	; (80024b4 <main+0xdf4>)
 80023f6:	f001 fbcb 	bl	8003b90 <HAL_GPIO_WritePin>
		HAL_ADC_PollForConversion(&hadc1, 100);
 80023fa:	2201      	movs	r2, #1
 80023fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002400:	482c      	ldr	r0, [pc, #176]	; (80024b4 <main+0xdf4>)
 8002402:	f001 fbc5 	bl	8003b90 <HAL_GPIO_WritePin>
		light = HAL_ADC_GetValue(&hadc1);
 8002406:	2200      	movs	r2, #0
 8002408:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800240c:	4829      	ldr	r0, [pc, #164]	; (80024b4 <main+0xdf4>)
 800240e:	f001 fbbf 	bl	8003b90 <HAL_GPIO_WritePin>
		//no encender led
 8002412:	2201      	movs	r2, #1
 8002414:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002418:	4826      	ldr	r0, [pc, #152]	; (80024b4 <main+0xdf4>)
 800241a:	f001 fbb9 	bl	8003b90 <HAL_GPIO_WritePin>
 800241e:	e034      	b.n	800248a <main+0xdca>
		HAL_GPIO_WritePin(LED_1A_GPIO_Port, LED_1A_Pin, 0);
 8002420:	4b20      	ldr	r3, [pc, #128]	; (80024a4 <main+0xde4>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4924      	ldr	r1, [pc, #144]	; (80024b8 <main+0xdf8>)
 8002426:	4618      	mov	r0, r3
 8002428:	f7fe f95a 	bl	80006e0 <__aeabi_fcmpgt>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d100      	bne.n	8002434 <main+0xd74>
		HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, 0);
 8002432:	e035      	b.n	80024a0 <main+0xde0>
		HAL_GPIO_WritePin(LED_1R_GPIO_Port, LED_1R_Pin, 0);
 8002434:	2201      	movs	r2, #1
 8002436:	f44f 7180 	mov.w	r1, #256	; 0x100
 800243a:	481d      	ldr	r0, [pc, #116]	; (80024b0 <main+0xdf0>)
 800243c:	f001 fba8 	bl	8003b90 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, 0);
 8002440:	2201      	movs	r2, #1
 8002442:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002446:	481b      	ldr	r0, [pc, #108]	; (80024b4 <main+0xdf4>)
 8002448:	f001 fba2 	bl	8003b90 <HAL_GPIO_WritePin>

 800244c:	2201      	movs	r2, #1
 800244e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002452:	4818      	ldr	r0, [pc, #96]	; (80024b4 <main+0xdf4>)
 8002454:	f001 fb9c 	bl	8003b90 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 8002458:	2201      	movs	r2, #1
 800245a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800245e:	4815      	ldr	r0, [pc, #84]	; (80024b4 <main+0xdf4>)
 8002460:	f001 fb96 	bl	8003b90 <HAL_GPIO_WritePin>

 8002464:	2201      	movs	r2, #1
 8002466:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800246a:	4812      	ldr	r0, [pc, #72]	; (80024b4 <main+0xdf4>)
 800246c:	f001 fb90 	bl	8003b90 <HAL_GPIO_WritePin>
		} else if (light > 0 && light <= 20000){
 8002470:	2201      	movs	r2, #1
 8002472:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002476:	480f      	ldr	r0, [pc, #60]	; (80024b4 <main+0xdf4>)
 8002478:	f001 fb8a 	bl	8003b90 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_1V_GPIO_Port, LED_1V_Pin, 1);
 800247c:	2201      	movs	r2, #1
 800247e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002482:	480c      	ldr	r0, [pc, #48]	; (80024b4 <main+0xdf4>)
 8002484:	f001 fb84 	bl	8003b90 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, 0);
 8002488:	e00a      	b.n	80024a0 <main+0xde0>
 800248a:	e009      	b.n	80024a0 <main+0xde0>

		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);

 800248c:	bf00      	nop
 800248e:	f7ff b942 	b.w	8001716 <main+0x56>
			HAL_GPIO_WritePin(LED_2A_GPIO_Port, LED_2A_Pin, 1);
 8002492:	bf00      	nop
 8002494:	f7ff b93f 	b.w	8001716 <main+0x56>
			HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, 0);
 8002498:	bf00      	nop
 800249a:	f7ff b93c 	b.w	8001716 <main+0x56>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 800249e:	bf00      	nop
    /* USER CODE END WHILE */
 80024a0:	f7ff b939 	b.w	8001716 <main+0x56>
 80024a4:	200000f4 	.word	0x200000f4
 80024a8:	451c4000 	.word	0x451c4000
 80024ac:	453b8000 	.word	0x453b8000
 80024b0:	40010800 	.word	0x40010800
 80024b4:	40010c00 	.word	0x40010c00
 80024b8:	455ac000 	.word	0x455ac000

080024bc <SystemClock_Config>:
		HAL_GPIO_WritePin(LED_2A_GPIO_Port, LED_2A_Pin, 0);
		HAL_GPIO_WritePin(LED_1R_GPIO_Port, LED_1R_Pin, 0);
		HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, 0);

		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);

 80024bc:	b580      	push	{r7, lr}
 80024be:	b094      	sub	sp, #80	; 0x50
 80024c0:	af00      	add	r7, sp, #0
		} else if (light > 25000 && light <= 30000){
 80024c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024c6:	2228      	movs	r2, #40	; 0x28
 80024c8:	2100      	movs	r1, #0
 80024ca:	4618      	mov	r0, r3
 80024cc:	f004 fe18 	bl	8007100 <memset>
		//primer y desungo led verde, primer amarillo
 80024d0:	f107 0314 	add.w	r3, r7, #20
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	605a      	str	r2, [r3, #4]
 80024da:	609a      	str	r2, [r3, #8]
 80024dc:	60da      	str	r2, [r3, #12]
 80024de:	611a      	str	r2, [r3, #16]
		HAL_GPIO_WritePin(LED_1V_GPIO_Port, LED_1V_Pin, 1);
 80024e0:	1d3b      	adds	r3, r7, #4
 80024e2:	2200      	movs	r2, #0
 80024e4:	601a      	str	r2, [r3, #0]
 80024e6:	605a      	str	r2, [r3, #4]
 80024e8:	609a      	str	r2, [r3, #8]
 80024ea:	60da      	str	r2, [r3, #12]
		HAL_GPIO_WritePin(LED_2V_GPIO_Port, LED_2V_Pin, 1);
		HAL_GPIO_WritePin(LED_1A_GPIO_Port, LED_1A_Pin, 1);
		HAL_GPIO_WritePin(LED_2A_GPIO_Port, LED_2A_Pin, 0);
		HAL_GPIO_WritePin(LED_1R_GPIO_Port, LED_1R_Pin, 0);
		HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, 0);
 80024ec:	2302      	movs	r3, #2
 80024ee:	62bb      	str	r3, [r7, #40]	; 0x28

 80024f0:	2301      	movs	r3, #1
 80024f2:	63bb      	str	r3, [r7, #56]	; 0x38
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 80024f4:	2310      	movs	r3, #16
 80024f6:	63fb      	str	r3, [r7, #60]	; 0x3c

 80024f8:	2300      	movs	r3, #0
 80024fa:	647b      	str	r3, [r7, #68]	; 0x44
		} else if (light > 30000 && light <= 35000){
 80024fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002500:	4618      	mov	r0, r3
 8002502:	f004 f849 	bl	8006598 <HAL_RCC_OscConfig>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <SystemClock_Config+0x54>
		//primer y desungo led verde, primer amarillo y de segundo
		HAL_GPIO_WritePin(LED_1V_GPIO_Port, LED_1V_Pin, 1);
 800250c:	f000 f96c 	bl	80027e8 <Error_Handler>
		HAL_GPIO_WritePin(LED_2V_GPIO_Port, LED_2V_Pin, 1);
		HAL_GPIO_WritePin(LED_1A_GPIO_Port, LED_1A_Pin, 1);
		HAL_GPIO_WritePin(LED_2A_GPIO_Port, LED_2A_Pin, 1);
		HAL_GPIO_WritePin(LED_1R_GPIO_Port, LED_1R_Pin, 0);
		HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, 0);
 8002510:	230f      	movs	r3, #15
 8002512:	617b      	str	r3, [r7, #20]

		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 8002514:	2300      	movs	r3, #0
 8002516:	61bb      	str	r3, [r7, #24]

 8002518:	2300      	movs	r3, #0
 800251a:	61fb      	str	r3, [r7, #28]
		} else if (light > 35000 && light <= 40000){
 800251c:	2300      	movs	r3, #0
 800251e:	623b      	str	r3, [r7, #32]
		//primer y desungo led verde, primer amarillo y de segundo, primer rojo
 8002520:	2300      	movs	r3, #0
 8002522:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_WritePin(LED_1V_GPIO_Port, LED_1V_Pin, 1);
		HAL_GPIO_WritePin(LED_2V_GPIO_Port, LED_2V_Pin, 1);
 8002524:	f107 0314 	add.w	r3, r7, #20
 8002528:	2100      	movs	r1, #0
 800252a:	4618      	mov	r0, r3
 800252c:	f004 fab6 	bl	8006a9c <HAL_RCC_ClockConfig>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <SystemClock_Config+0x7e>
		HAL_GPIO_WritePin(LED_1A_GPIO_Port, LED_1A_Pin, 1);
		HAL_GPIO_WritePin(LED_2A_GPIO_Port, LED_2A_Pin, 1);
 8002536:	f000 f957 	bl	80027e8 <Error_Handler>
		HAL_GPIO_WritePin(LED_1R_GPIO_Port, LED_1R_Pin, 1);
		HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, 0);
 800253a:	2302      	movs	r3, #2
 800253c:	607b      	str	r3, [r7, #4]

 800253e:	2300      	movs	r3, #0
 8002540:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 8002542:	1d3b      	adds	r3, r7, #4
 8002544:	4618      	mov	r0, r3
 8002546:	f004 fc41 	bl	8006dcc <HAL_RCCEx_PeriphCLKConfig>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <SystemClock_Config+0x98>

		} else if (light > 40000){
 8002550:	f000 f94a 	bl	80027e8 <Error_Handler>
		//todos los leds
		HAL_GPIO_WritePin(LED_1V_GPIO_Port, LED_1V_Pin, 1);
 8002554:	bf00      	nop
 8002556:	3750      	adds	r7, #80	; 0x50
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <MX_ADC1_Init>:
		HAL_GPIO_WritePin(LED_2A_GPIO_Port, LED_2A_Pin, 1);
		HAL_GPIO_WritePin(LED_1R_GPIO_Port, LED_1R_Pin, 1);
		HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, 1);

		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);

 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
		} else {
		//ninguno
		HAL_GPIO_WritePin(LED_1V_GPIO_Port, LED_1V_Pin, 0);
		HAL_GPIO_WritePin(LED_2V_GPIO_Port, LED_2V_Pin, 0);
		HAL_GPIO_WritePin(LED_1A_GPIO_Port, LED_1A_Pin, 0);
		HAL_GPIO_WritePin(LED_2A_GPIO_Port, LED_2A_Pin, 0);
 8002562:	1d3b      	adds	r3, r7, #4
 8002564:	2200      	movs	r2, #0
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	605a      	str	r2, [r3, #4]
 800256a:	609a      	str	r2, [r3, #8]

		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);

		}

			break;
 800256c:	4b18      	ldr	r3, [pc, #96]	; (80025d0 <MX_ADC1_Init+0x74>)
 800256e:	4a19      	ldr	r2, [pc, #100]	; (80025d4 <MX_ADC1_Init+0x78>)
 8002570:	601a      	str	r2, [r3, #0]

 8002572:	4b17      	ldr	r3, [pc, #92]	; (80025d0 <MX_ADC1_Init+0x74>)
 8002574:	2200      	movs	r2, #0
 8002576:	609a      	str	r2, [r3, #8]
	default:
 8002578:	4b15      	ldr	r3, [pc, #84]	; (80025d0 <MX_ADC1_Init+0x74>)
 800257a:	2201      	movs	r2, #1
 800257c:	731a      	strb	r2, [r3, #12]
		break;
 800257e:	4b14      	ldr	r3, [pc, #80]	; (80025d0 <MX_ADC1_Init+0x74>)
 8002580:	2200      	movs	r2, #0
 8002582:	751a      	strb	r2, [r3, #20]
	}
 8002584:	4b12      	ldr	r3, [pc, #72]	; (80025d0 <MX_ADC1_Init+0x74>)
 8002586:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800258a:	61da      	str	r2, [r3, #28]
  }
 800258c:	4b10      	ldr	r3, [pc, #64]	; (80025d0 <MX_ADC1_Init+0x74>)
 800258e:	2200      	movs	r2, #0
 8002590:	605a      	str	r2, [r3, #4]
  /* USER CODE END 3 */
 8002592:	4b0f      	ldr	r3, [pc, #60]	; (80025d0 <MX_ADC1_Init+0x74>)
 8002594:	2201      	movs	r2, #1
 8002596:	611a      	str	r2, [r3, #16]
}
 8002598:	480d      	ldr	r0, [pc, #52]	; (80025d0 <MX_ADC1_Init+0x74>)
 800259a:	f000 fadb 	bl	8002b54 <HAL_ADC_Init>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <MX_ADC1_Init+0x4c>

/**
 80025a4:	f000 f920 	bl	80027e8 <Error_Handler>
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025a8:	2300      	movs	r3, #0
 80025aa:	607b      	str	r3, [r7, #4]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025ac:	2301      	movs	r3, #1
 80025ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025b0:	2300      	movs	r3, #0
 80025b2:	60fb      	str	r3, [r7, #12]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025b4:	1d3b      	adds	r3, r7, #4
 80025b6:	4619      	mov	r1, r3
 80025b8:	4805      	ldr	r0, [pc, #20]	; (80025d0 <MX_ADC1_Init+0x74>)
 80025ba:	f000 fe39 	bl	8003230 <HAL_ADC_ConfigChannel>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <MX_ADC1_Init+0x6c>

  /** Initializes the RCC Oscillators according to the specified parameters
 80025c4:	f000 f910 	bl	80027e8 <Error_Handler>
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80025c8:	bf00      	nop
 80025ca:	3710      	adds	r7, #16
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	20000028 	.word	0x20000028
 80025d4:	40012400 	.word	0x40012400

080025d8 <MX_I2C1_Init>:
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
 80025dc:	4b12      	ldr	r3, [pc, #72]	; (8002628 <MX_I2C1_Init+0x50>)
 80025de:	4a13      	ldr	r2, [pc, #76]	; (800262c <MX_I2C1_Init+0x54>)
 80025e0:	601a      	str	r2, [r3, #0]
  }
 80025e2:	4b11      	ldr	r3, [pc, #68]	; (8002628 <MX_I2C1_Init+0x50>)
 80025e4:	4a12      	ldr	r2, [pc, #72]	; (8002630 <MX_I2C1_Init+0x58>)
 80025e6:	605a      	str	r2, [r3, #4]
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80025e8:	4b0f      	ldr	r3, [pc, #60]	; (8002628 <MX_I2C1_Init+0x50>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	609a      	str	r2, [r3, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80025ee:	4b0e      	ldr	r3, [pc, #56]	; (8002628 <MX_I2C1_Init+0x50>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025f4:	4b0c      	ldr	r3, [pc, #48]	; (8002628 <MX_I2C1_Init+0x50>)
 80025f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80025fa:	611a      	str	r2, [r3, #16]
  {
 80025fc:	4b0a      	ldr	r3, [pc, #40]	; (8002628 <MX_I2C1_Init+0x50>)
 80025fe:	2200      	movs	r2, #0
 8002600:	615a      	str	r2, [r3, #20]
    Error_Handler();
 8002602:	4b09      	ldr	r3, [pc, #36]	; (8002628 <MX_I2C1_Init+0x50>)
 8002604:	2200      	movs	r2, #0
 8002606:	619a      	str	r2, [r3, #24]
  }
 8002608:	4b07      	ldr	r3, [pc, #28]	; (8002628 <MX_I2C1_Init+0x50>)
 800260a:	2200      	movs	r2, #0
 800260c:	61da      	str	r2, [r3, #28]
}
 800260e:	4b06      	ldr	r3, [pc, #24]	; (8002628 <MX_I2C1_Init+0x50>)
 8002610:	2200      	movs	r2, #0
 8002612:	621a      	str	r2, [r3, #32]

 8002614:	4804      	ldr	r0, [pc, #16]	; (8002628 <MX_I2C1_Init+0x50>)
 8002616:	f001 faeb 	bl	8003bf0 <HAL_I2C_Init>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <MX_I2C1_Init+0x4c>
/**
  * @brief ADC1 Initialization Function
 8002620:	f000 f8e2 	bl	80027e8 <Error_Handler>
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{

 8002624:	bf00      	nop
 8002626:	bd80      	pop	{r7, pc}
 8002628:	20000058 	.word	0x20000058
 800262c:	40005400 	.word	0x40005400
 8002630:	000186a0 	.word	0x000186a0

08002634 <MX_GPIO_Init>:
  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC1_Init 1 */

 8002634:	b580      	push	{r7, lr}
 8002636:	b088      	sub	sp, #32
 8002638:	af00      	add	r7, sp, #0
  /* USER CODE END ADC1_Init 1 */
 800263a:	f107 0310 	add.w	r3, r7, #16
 800263e:	2200      	movs	r2, #0
 8002640:	601a      	str	r2, [r3, #0]
 8002642:	605a      	str	r2, [r3, #4]
 8002644:	609a      	str	r2, [r3, #8]
 8002646:	60da      	str	r2, [r3, #12]

  /** Common config
  */
 8002648:	4b3d      	ldr	r3, [pc, #244]	; (8002740 <MX_GPIO_Init+0x10c>)
 800264a:	699b      	ldr	r3, [r3, #24]
 800264c:	4a3c      	ldr	r2, [pc, #240]	; (8002740 <MX_GPIO_Init+0x10c>)
 800264e:	f043 0310 	orr.w	r3, r3, #16
 8002652:	6193      	str	r3, [r2, #24]
 8002654:	4b3a      	ldr	r3, [pc, #232]	; (8002740 <MX_GPIO_Init+0x10c>)
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	f003 0310 	and.w	r3, r3, #16
 800265c:	60fb      	str	r3, [r7, #12]
 800265e:	68fb      	ldr	r3, [r7, #12]
  hadc1.Instance = ADC1;
 8002660:	4b37      	ldr	r3, [pc, #220]	; (8002740 <MX_GPIO_Init+0x10c>)
 8002662:	699b      	ldr	r3, [r3, #24]
 8002664:	4a36      	ldr	r2, [pc, #216]	; (8002740 <MX_GPIO_Init+0x10c>)
 8002666:	f043 0320 	orr.w	r3, r3, #32
 800266a:	6193      	str	r3, [r2, #24]
 800266c:	4b34      	ldr	r3, [pc, #208]	; (8002740 <MX_GPIO_Init+0x10c>)
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	f003 0320 	and.w	r3, r3, #32
 8002674:	60bb      	str	r3, [r7, #8]
 8002676:	68bb      	ldr	r3, [r7, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002678:	4b31      	ldr	r3, [pc, #196]	; (8002740 <MX_GPIO_Init+0x10c>)
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	4a30      	ldr	r2, [pc, #192]	; (8002740 <MX_GPIO_Init+0x10c>)
 800267e:	f043 0304 	orr.w	r3, r3, #4
 8002682:	6193      	str	r3, [r2, #24]
 8002684:	4b2e      	ldr	r3, [pc, #184]	; (8002740 <MX_GPIO_Init+0x10c>)
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	f003 0304 	and.w	r3, r3, #4
 800268c:	607b      	str	r3, [r7, #4]
 800268e:	687b      	ldr	r3, [r7, #4]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002690:	4b2b      	ldr	r3, [pc, #172]	; (8002740 <MX_GPIO_Init+0x10c>)
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	4a2a      	ldr	r2, [pc, #168]	; (8002740 <MX_GPIO_Init+0x10c>)
 8002696:	f043 0308 	orr.w	r3, r3, #8
 800269a:	6193      	str	r3, [r2, #24]
 800269c:	4b28      	ldr	r3, [pc, #160]	; (8002740 <MX_GPIO_Init+0x10c>)
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	f003 0308 	and.w	r3, r3, #8
 80026a4:	603b      	str	r3, [r7, #0]
 80026a6:	683b      	ldr	r3, [r7, #0]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80026a8:	2200      	movs	r2, #0
 80026aa:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 80026ae:	4825      	ldr	r0, [pc, #148]	; (8002744 <MX_GPIO_Init+0x110>)
 80026b0:	f001 fa6e 	bl	8003b90 <HAL_GPIO_WritePin>
  hadc1.Init.NbrOfConversion = 1;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    Error_Handler();
 80026b4:	2200      	movs	r2, #0
 80026b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026ba:	4823      	ldr	r0, [pc, #140]	; (8002748 <MX_GPIO_Init+0x114>)
 80026bc:	f001 fa68 	bl	8003b90 <HAL_GPIO_WritePin>
  }

  /** Configure Regular Channel
  */
 80026c0:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80026c4:	613b      	str	r3, [r7, #16]
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80026c6:	2301      	movs	r3, #1
 80026c8:	617b      	str	r3, [r7, #20]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80026ca:	2300      	movs	r3, #0
 80026cc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026ce:	2302      	movs	r3, #2
 80026d0:	61fb      	str	r3, [r7, #28]
  {
 80026d2:	f107 0310 	add.w	r3, r7, #16
 80026d6:	4619      	mov	r1, r3
 80026d8:	481a      	ldr	r0, [pc, #104]	; (8002744 <MX_GPIO_Init+0x110>)
 80026da:	f001 f8d5 	bl	8003888 <HAL_GPIO_Init>
    Error_Handler();
  }
  /* USER CODE BEGIN ADC1_Init 2 */
 80026de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026e2:	613b      	str	r3, [r7, #16]

 80026e4:	2301      	movs	r3, #1
 80026e6:	617b      	str	r3, [r7, #20]
  /* USER CODE END ADC1_Init 2 */
 80026e8:	2300      	movs	r3, #0
 80026ea:	61bb      	str	r3, [r7, #24]

 80026ec:	2302      	movs	r3, #2
 80026ee:	61fb      	str	r3, [r7, #28]
}
 80026f0:	f107 0310 	add.w	r3, r7, #16
 80026f4:	4619      	mov	r1, r3
 80026f6:	4814      	ldr	r0, [pc, #80]	; (8002748 <MX_GPIO_Init+0x114>)
 80026f8:	f001 f8c6 	bl	8003888 <HAL_GPIO_Init>

/**
  * @brief I2C1 Initialization Function
 80026fc:	f44f 430e 	mov.w	r3, #36352	; 0x8e00
 8002700:	613b      	str	r3, [r7, #16]
  * @param None
 8002702:	4b12      	ldr	r3, [pc, #72]	; (800274c <MX_GPIO_Init+0x118>)
 8002704:	617b      	str	r3, [r7, #20]
  * @retval None
 8002706:	2302      	movs	r3, #2
 8002708:	61bb      	str	r3, [r7, #24]
  */
 800270a:	f107 0310 	add.w	r3, r7, #16
 800270e:	4619      	mov	r1, r3
 8002710:	480d      	ldr	r0, [pc, #52]	; (8002748 <MX_GPIO_Init+0x114>)
 8002712:	f001 f8b9 	bl	8003888 <HAL_GPIO_Init>
static void MX_I2C1_Init(void)
{

 8002716:	2200      	movs	r2, #0
 8002718:	2100      	movs	r1, #0
 800271a:	2017      	movs	r0, #23
 800271c:	f000 fffb 	bl	8003716 <HAL_NVIC_SetPriority>
  /* USER CODE BEGIN I2C1_Init 0 */
 8002720:	2017      	movs	r0, #23
 8002722:	f001 f814 	bl	800374e <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_Init 0 */
 8002726:	2200      	movs	r2, #0
 8002728:	2100      	movs	r1, #0
 800272a:	2028      	movs	r0, #40	; 0x28
 800272c:	f000 fff3 	bl	8003716 <HAL_NVIC_SetPriority>

 8002730:	2028      	movs	r0, #40	; 0x28
 8002732:	f001 f80c 	bl	800374e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_Init 1 */

 8002736:	bf00      	nop
 8002738:	3720      	adds	r7, #32
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	40021000 	.word	0x40021000
 8002744:	40010c00 	.word	0x40010c00
 8002748:	40010800 	.word	0x40010800
 800274c:	10110000 	.word	0x10110000

08002750 <HAL_GPIO_EXTI_Callback>:
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	4603      	mov	r3, r0
 8002758:	80fb      	strh	r3, [r7, #6]
  hi2c1.Init.OwnAddress1 = 0;
 800275a:	88fb      	ldrh	r3, [r7, #6]
 800275c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002760:	d108      	bne.n	8002774 <HAL_GPIO_EXTI_Callback+0x24>
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002762:	4b1f      	ldr	r3, [pc, #124]	; (80027e0 <HAL_GPIO_EXTI_Callback+0x90>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	b2da      	uxtb	r2, r3
 8002768:	4b1e      	ldr	r3, [pc, #120]	; (80027e4 <HAL_GPIO_EXTI_Callback+0x94>)
 800276a:	701a      	strb	r2, [r3, #0]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800276c:	4b1c      	ldr	r3, [pc, #112]	; (80027e0 <HAL_GPIO_EXTI_Callback+0x90>)
 800276e:	2201      	movs	r2, #1
 8002770:	601a      	str	r2, [r3, #0]

}

/**
  * @brief GPIO Initialization Function
  * @param None
 8002772:	e02f      	b.n	80027d4 <HAL_GPIO_EXTI_Callback+0x84>
  hi2c1.Init.OwnAddress2 = 0;
 8002774:	88fb      	ldrh	r3, [r7, #6]
 8002776:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800277a:	d108      	bne.n	800278e <HAL_GPIO_EXTI_Callback+0x3e>
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800277c:	4b18      	ldr	r3, [pc, #96]	; (80027e0 <HAL_GPIO_EXTI_Callback+0x90>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	b2da      	uxtb	r2, r3
 8002782:	4b18      	ldr	r3, [pc, #96]	; (80027e4 <HAL_GPIO_EXTI_Callback+0x94>)
 8002784:	701a      	strb	r2, [r3, #0]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002786:	4b16      	ldr	r3, [pc, #88]	; (80027e0 <HAL_GPIO_EXTI_Callback+0x90>)
 8002788:	2202      	movs	r2, #2
 800278a:	601a      	str	r2, [r3, #0]
  * @param None
 800278c:	e022      	b.n	80027d4 <HAL_GPIO_EXTI_Callback+0x84>
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800278e:	88fb      	ldrh	r3, [r7, #6]
 8002790:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002794:	d108      	bne.n	80027a8 <HAL_GPIO_EXTI_Callback+0x58>
  {
 8002796:	4b12      	ldr	r3, [pc, #72]	; (80027e0 <HAL_GPIO_EXTI_Callback+0x90>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	b2da      	uxtb	r2, r3
 800279c:	4b11      	ldr	r3, [pc, #68]	; (80027e4 <HAL_GPIO_EXTI_Callback+0x94>)
 800279e:	701a      	strb	r2, [r3, #0]
    Error_Handler();
 80027a0:	4b0f      	ldr	r3, [pc, #60]	; (80027e0 <HAL_GPIO_EXTI_Callback+0x90>)
 80027a2:	2204      	movs	r2, #4
 80027a4:	601a      	str	r2, [r3, #0]
  * @param None
 80027a6:	e015      	b.n	80027d4 <HAL_GPIO_EXTI_Callback+0x84>
  }
 80027a8:	88fb      	ldrh	r3, [r7, #6]
 80027aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027ae:	d111      	bne.n	80027d4 <HAL_GPIO_EXTI_Callback+0x84>
  /* USER CODE BEGIN I2C1_Init 2 */
 80027b0:	4b0b      	ldr	r3, [pc, #44]	; (80027e0 <HAL_GPIO_EXTI_Callback+0x90>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d105      	bne.n	80027c4 <HAL_GPIO_EXTI_Callback+0x74>
  /* USER CODE END I2C1_Init 2 */
 80027b8:	4b0a      	ldr	r3, [pc, #40]	; (80027e4 <HAL_GPIO_EXTI_Callback+0x94>)
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	461a      	mov	r2, r3
 80027be:	4b08      	ldr	r3, [pc, #32]	; (80027e0 <HAL_GPIO_EXTI_Callback+0x90>)
 80027c0:	601a      	str	r2, [r3, #0]
  * @param None
 80027c2:	e007      	b.n	80027d4 <HAL_GPIO_EXTI_Callback+0x84>
}
 80027c4:	4b06      	ldr	r3, [pc, #24]	; (80027e0 <HAL_GPIO_EXTI_Callback+0x90>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	b2da      	uxtb	r2, r3
 80027ca:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <HAL_GPIO_EXTI_Callback+0x94>)
 80027cc:	701a      	strb	r2, [r3, #0]

 80027ce:	4b04      	ldr	r3, [pc, #16]	; (80027e0 <HAL_GPIO_EXTI_Callback+0x90>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]
  * @param None
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	bc80      	pop	{r7}
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	200000e0 	.word	0x200000e0
 80027e4:	200000e4 	.word	0x200000e4

080027e8 <Error_Handler>:
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027ec:	b672      	cpsid	i
}
 80027ee:	bf00      	nop
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

 80027f0:	e7fe      	b.n	80027f0 <Error_Handler+0x8>
	...

080027f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80027fa:	4b15      	ldr	r3, [pc, #84]	; (8002850 <HAL_MspInit+0x5c>)
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	4a14      	ldr	r2, [pc, #80]	; (8002850 <HAL_MspInit+0x5c>)
 8002800:	f043 0301 	orr.w	r3, r3, #1
 8002804:	6193      	str	r3, [r2, #24]
 8002806:	4b12      	ldr	r3, [pc, #72]	; (8002850 <HAL_MspInit+0x5c>)
 8002808:	699b      	ldr	r3, [r3, #24]
 800280a:	f003 0301 	and.w	r3, r3, #1
 800280e:	60bb      	str	r3, [r7, #8]
 8002810:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002812:	4b0f      	ldr	r3, [pc, #60]	; (8002850 <HAL_MspInit+0x5c>)
 8002814:	69db      	ldr	r3, [r3, #28]
 8002816:	4a0e      	ldr	r2, [pc, #56]	; (8002850 <HAL_MspInit+0x5c>)
 8002818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800281c:	61d3      	str	r3, [r2, #28]
 800281e:	4b0c      	ldr	r3, [pc, #48]	; (8002850 <HAL_MspInit+0x5c>)
 8002820:	69db      	ldr	r3, [r3, #28]
 8002822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002826:	607b      	str	r3, [r7, #4]
 8002828:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800282a:	4b0a      	ldr	r3, [pc, #40]	; (8002854 <HAL_MspInit+0x60>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	60fb      	str	r3, [r7, #12]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002836:	60fb      	str	r3, [r7, #12]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800283e:	60fb      	str	r3, [r7, #12]
 8002840:	4a04      	ldr	r2, [pc, #16]	; (8002854 <HAL_MspInit+0x60>)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002846:	bf00      	nop
 8002848:	3714      	adds	r7, #20
 800284a:	46bd      	mov	sp, r7
 800284c:	bc80      	pop	{r7}
 800284e:	4770      	bx	lr
 8002850:	40021000 	.word	0x40021000
 8002854:	40010000 	.word	0x40010000

08002858 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b088      	sub	sp, #32
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002860:	f107 0310 	add.w	r3, r7, #16
 8002864:	2200      	movs	r2, #0
 8002866:	601a      	str	r2, [r3, #0]
 8002868:	605a      	str	r2, [r3, #4]
 800286a:	609a      	str	r2, [r3, #8]
 800286c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a18      	ldr	r2, [pc, #96]	; (80028d4 <HAL_ADC_MspInit+0x7c>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d129      	bne.n	80028cc <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002878:	4b17      	ldr	r3, [pc, #92]	; (80028d8 <HAL_ADC_MspInit+0x80>)
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	4a16      	ldr	r2, [pc, #88]	; (80028d8 <HAL_ADC_MspInit+0x80>)
 800287e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002882:	6193      	str	r3, [r2, #24]
 8002884:	4b14      	ldr	r3, [pc, #80]	; (80028d8 <HAL_ADC_MspInit+0x80>)
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800288c:	60fb      	str	r3, [r7, #12]
 800288e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002890:	4b11      	ldr	r3, [pc, #68]	; (80028d8 <HAL_ADC_MspInit+0x80>)
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	4a10      	ldr	r2, [pc, #64]	; (80028d8 <HAL_ADC_MspInit+0x80>)
 8002896:	f043 0304 	orr.w	r3, r3, #4
 800289a:	6193      	str	r3, [r2, #24]
 800289c:	4b0e      	ldr	r3, [pc, #56]	; (80028d8 <HAL_ADC_MspInit+0x80>)
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	f003 0304 	and.w	r3, r3, #4
 80028a4:	60bb      	str	r3, [r7, #8]
 80028a6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = LUZ_Pin;
 80028a8:	2301      	movs	r3, #1
 80028aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028ac:	2303      	movs	r3, #3
 80028ae:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(LUZ_GPIO_Port, &GPIO_InitStruct);
 80028b0:	f107 0310 	add.w	r3, r7, #16
 80028b4:	4619      	mov	r1, r3
 80028b6:	4809      	ldr	r0, [pc, #36]	; (80028dc <HAL_ADC_MspInit+0x84>)
 80028b8:	f000 ffe6 	bl	8003888 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80028bc:	2200      	movs	r2, #0
 80028be:	2100      	movs	r1, #0
 80028c0:	2012      	movs	r0, #18
 80028c2:	f000 ff28 	bl	8003716 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80028c6:	2012      	movs	r0, #18
 80028c8:	f000 ff41 	bl	800374e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80028cc:	bf00      	nop
 80028ce:	3720      	adds	r7, #32
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	40012400 	.word	0x40012400
 80028d8:	40021000 	.word	0x40021000
 80028dc:	40010800 	.word	0x40010800

080028e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b088      	sub	sp, #32
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e8:	f107 0310 	add.w	r3, r7, #16
 80028ec:	2200      	movs	r2, #0
 80028ee:	601a      	str	r2, [r3, #0]
 80028f0:	605a      	str	r2, [r3, #4]
 80028f2:	609a      	str	r2, [r3, #8]
 80028f4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a1d      	ldr	r2, [pc, #116]	; (8002970 <HAL_I2C_MspInit+0x90>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d133      	bne.n	8002968 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002900:	4b1c      	ldr	r3, [pc, #112]	; (8002974 <HAL_I2C_MspInit+0x94>)
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	4a1b      	ldr	r2, [pc, #108]	; (8002974 <HAL_I2C_MspInit+0x94>)
 8002906:	f043 0308 	orr.w	r3, r3, #8
 800290a:	6193      	str	r3, [r2, #24]
 800290c:	4b19      	ldr	r3, [pc, #100]	; (8002974 <HAL_I2C_MspInit+0x94>)
 800290e:	699b      	ldr	r3, [r3, #24]
 8002910:	f003 0308 	and.w	r3, r3, #8
 8002914:	60fb      	str	r3, [r7, #12]
 8002916:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002918:	23c0      	movs	r3, #192	; 0xc0
 800291a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800291c:	2312      	movs	r3, #18
 800291e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002920:	2303      	movs	r3, #3
 8002922:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002924:	f107 0310 	add.w	r3, r7, #16
 8002928:	4619      	mov	r1, r3
 800292a:	4813      	ldr	r0, [pc, #76]	; (8002978 <HAL_I2C_MspInit+0x98>)
 800292c:	f000 ffac 	bl	8003888 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002930:	4b10      	ldr	r3, [pc, #64]	; (8002974 <HAL_I2C_MspInit+0x94>)
 8002932:	69db      	ldr	r3, [r3, #28]
 8002934:	4a0f      	ldr	r2, [pc, #60]	; (8002974 <HAL_I2C_MspInit+0x94>)
 8002936:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800293a:	61d3      	str	r3, [r2, #28]
 800293c:	4b0d      	ldr	r3, [pc, #52]	; (8002974 <HAL_I2C_MspInit+0x94>)
 800293e:	69db      	ldr	r3, [r3, #28]
 8002940:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002944:	60bb      	str	r3, [r7, #8]
 8002946:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002948:	2200      	movs	r2, #0
 800294a:	2100      	movs	r1, #0
 800294c:	201f      	movs	r0, #31
 800294e:	f000 fee2 	bl	8003716 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002952:	201f      	movs	r0, #31
 8002954:	f000 fefb 	bl	800374e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002958:	2200      	movs	r2, #0
 800295a:	2100      	movs	r1, #0
 800295c:	2020      	movs	r0, #32
 800295e:	f000 feda 	bl	8003716 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002962:	2020      	movs	r0, #32
 8002964:	f000 fef3 	bl	800374e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002968:	bf00      	nop
 800296a:	3720      	adds	r7, #32
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	40005400 	.word	0x40005400
 8002974:	40021000 	.word	0x40021000
 8002978:	40010c00 	.word	0x40010c00

0800297c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002980:	e7fe      	b.n	8002980 <NMI_Handler+0x4>

08002982 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002982:	b480      	push	{r7}
 8002984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002986:	e7fe      	b.n	8002986 <HardFault_Handler+0x4>

08002988 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800298c:	e7fe      	b.n	800298c <MemManage_Handler+0x4>

0800298e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800298e:	b480      	push	{r7}
 8002990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002992:	e7fe      	b.n	8002992 <BusFault_Handler+0x4>

08002994 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002998:	e7fe      	b.n	8002998 <UsageFault_Handler+0x4>

0800299a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800299a:	b480      	push	{r7}
 800299c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800299e:	bf00      	nop
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bc80      	pop	{r7}
 80029a4:	4770      	bx	lr

080029a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029a6:	b480      	push	{r7}
 80029a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029aa:	bf00      	nop
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bc80      	pop	{r7}
 80029b0:	4770      	bx	lr

080029b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029b2:	b480      	push	{r7}
 80029b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029b6:	bf00      	nop
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bc80      	pop	{r7}
 80029bc:	4770      	bx	lr

080029be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029c2:	f000 f8ab 	bl	8002b1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029c6:	bf00      	nop
 80029c8:	bd80      	pop	{r7, pc}
	...

080029cc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80029d0:	4802      	ldr	r0, [pc, #8]	; (80029dc <ADC1_2_IRQHandler+0x10>)
 80029d2:	f000 fb57 	bl	8003084 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80029d6:	bf00      	nop
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	20000028 	.word	0x20000028

080029e0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_LUZ_Pin);
 80029e4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80029e8:	f001 f8ea 	bl	8003bc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80029ec:	bf00      	nop
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80029f4:	4802      	ldr	r0, [pc, #8]	; (8002a00 <I2C1_EV_IRQHandler+0x10>)
 80029f6:	f001 fda1 	bl	800453c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80029fa:	bf00      	nop
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	20000058 	.word	0x20000058

08002a04 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002a08:	4802      	ldr	r0, [pc, #8]	; (8002a14 <I2C1_ER_IRQHandler+0x10>)
 8002a0a:	f001 ff08 	bl	800481e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002a0e:	bf00      	nop
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	20000058 	.word	0x20000058

08002a18 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_HUM_Pin);
 8002a1c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002a20:	f001 f8ce 	bl	8003bc0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_TEMP_Pin);
 8002a24:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002a28:	f001 f8ca 	bl	8003bc0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_ONOFF_Pin);
 8002a2c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002a30:	f001 f8c6 	bl	8003bc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002a34:	bf00      	nop
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a3c:	bf00      	nop
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bc80      	pop	{r7}
 8002a42:	4770      	bx	lr

08002a44 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a44:	480c      	ldr	r0, [pc, #48]	; (8002a78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002a46:	490d      	ldr	r1, [pc, #52]	; (8002a7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002a48:	4a0d      	ldr	r2, [pc, #52]	; (8002a80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002a4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a4c:	e002      	b.n	8002a54 <LoopCopyDataInit>

08002a4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a52:	3304      	adds	r3, #4

08002a54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a58:	d3f9      	bcc.n	8002a4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a5a:	4a0a      	ldr	r2, [pc, #40]	; (8002a84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002a5c:	4c0a      	ldr	r4, [pc, #40]	; (8002a88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002a5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a60:	e001      	b.n	8002a66 <LoopFillZerobss>

08002a62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a64:	3204      	adds	r2, #4

08002a66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a68:	d3fb      	bcc.n	8002a62 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002a6a:	f7ff ffe5 	bl	8002a38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a6e:	f004 fb23 	bl	80070b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a72:	f7fe fe25 	bl	80016c0 <main>
  bx lr
 8002a76:	4770      	bx	lr
  ldr r0, =_sdata
 8002a78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a7c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002a80:	08007170 	.word	0x08007170
  ldr r2, =_sbss
 8002a84:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002a88:	200000fc 	.word	0x200000fc

08002a8c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a8c:	e7fe      	b.n	8002a8c <CAN1_RX1_IRQHandler>
	...

08002a90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a94:	4b08      	ldr	r3, [pc, #32]	; (8002ab8 <HAL_Init+0x28>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a07      	ldr	r2, [pc, #28]	; (8002ab8 <HAL_Init+0x28>)
 8002a9a:	f043 0310 	orr.w	r3, r3, #16
 8002a9e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002aa0:	2003      	movs	r0, #3
 8002aa2:	f000 fe2d 	bl	8003700 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002aa6:	200f      	movs	r0, #15
 8002aa8:	f000 f808 	bl	8002abc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002aac:	f7ff fea2 	bl	80027f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	40022000 	.word	0x40022000

08002abc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ac4:	4b12      	ldr	r3, [pc, #72]	; (8002b10 <HAL_InitTick+0x54>)
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	4b12      	ldr	r3, [pc, #72]	; (8002b14 <HAL_InitTick+0x58>)
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	4619      	mov	r1, r3
 8002ace:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ad2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ada:	4618      	mov	r0, r3
 8002adc:	f000 fe45 	bl	800376a <HAL_SYSTICK_Config>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e00e      	b.n	8002b08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2b0f      	cmp	r3, #15
 8002aee:	d80a      	bhi.n	8002b06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002af0:	2200      	movs	r2, #0
 8002af2:	6879      	ldr	r1, [r7, #4]
 8002af4:	f04f 30ff 	mov.w	r0, #4294967295
 8002af8:	f000 fe0d 	bl	8003716 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002afc:	4a06      	ldr	r2, [pc, #24]	; (8002b18 <HAL_InitTick+0x5c>)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b02:	2300      	movs	r3, #0
 8002b04:	e000      	b.n	8002b08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3708      	adds	r7, #8
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	20000000 	.word	0x20000000
 8002b14:	20000008 	.word	0x20000008
 8002b18:	20000004 	.word	0x20000004

08002b1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b20:	4b05      	ldr	r3, [pc, #20]	; (8002b38 <HAL_IncTick+0x1c>)
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	461a      	mov	r2, r3
 8002b26:	4b05      	ldr	r3, [pc, #20]	; (8002b3c <HAL_IncTick+0x20>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	4a03      	ldr	r2, [pc, #12]	; (8002b3c <HAL_IncTick+0x20>)
 8002b2e:	6013      	str	r3, [r2, #0]
}
 8002b30:	bf00      	nop
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bc80      	pop	{r7}
 8002b36:	4770      	bx	lr
 8002b38:	20000008 	.word	0x20000008
 8002b3c:	200000f8 	.word	0x200000f8

08002b40 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
  return uwTick;
 8002b44:	4b02      	ldr	r3, [pc, #8]	; (8002b50 <HAL_GetTick+0x10>)
 8002b46:	681b      	ldr	r3, [r3, #0]
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bc80      	pop	{r7}
 8002b4e:	4770      	bx	lr
 8002b50:	200000f8 	.word	0x200000f8

08002b54 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b086      	sub	sp, #24
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002b60:	2300      	movs	r3, #0
 8002b62:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002b64:	2300      	movs	r3, #0
 8002b66:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e0be      	b.n	8002cf4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d109      	bne.n	8002b98 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f7ff fe60 	bl	8002858 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f000 fc9b 	bl	80034d4 <ADC_ConversionStop_Disable>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba6:	f003 0310 	and.w	r3, r3, #16
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	f040 8099 	bne.w	8002ce2 <HAL_ADC_Init+0x18e>
 8002bb0:	7dfb      	ldrb	r3, [r7, #23]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	f040 8095 	bne.w	8002ce2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bbc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002bc0:	f023 0302 	bic.w	r3, r3, #2
 8002bc4:	f043 0202 	orr.w	r2, r3, #2
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002bd4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	7b1b      	ldrb	r3, [r3, #12]
 8002bda:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002bdc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002bde:	68ba      	ldr	r2, [r7, #8]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bec:	d003      	beq.n	8002bf6 <HAL_ADC_Init+0xa2>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d102      	bne.n	8002bfc <HAL_ADC_Init+0xa8>
 8002bf6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bfa:	e000      	b.n	8002bfe <HAL_ADC_Init+0xaa>
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	693a      	ldr	r2, [r7, #16]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	7d1b      	ldrb	r3, [r3, #20]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d119      	bne.n	8002c40 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	7b1b      	ldrb	r3, [r3, #12]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d109      	bne.n	8002c28 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	699b      	ldr	r3, [r3, #24]
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	035a      	lsls	r2, r3, #13
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002c24:	613b      	str	r3, [r7, #16]
 8002c26:	e00b      	b.n	8002c40 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c2c:	f043 0220 	orr.w	r2, r3, #32
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c38:	f043 0201 	orr.w	r2, r3, #1
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	693a      	ldr	r2, [r7, #16]
 8002c50:	430a      	orrs	r2, r1
 8002c52:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	689a      	ldr	r2, [r3, #8]
 8002c5a:	4b28      	ldr	r3, [pc, #160]	; (8002cfc <HAL_ADC_Init+0x1a8>)
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	6812      	ldr	r2, [r2, #0]
 8002c62:	68b9      	ldr	r1, [r7, #8]
 8002c64:	430b      	orrs	r3, r1
 8002c66:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c70:	d003      	beq.n	8002c7a <HAL_ADC_Init+0x126>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d104      	bne.n	8002c84 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	051b      	lsls	r3, r3, #20
 8002c82:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	430a      	orrs	r2, r1
 8002c96:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	689a      	ldr	r2, [r3, #8]
 8002c9e:	4b18      	ldr	r3, [pc, #96]	; (8002d00 <HAL_ADC_Init+0x1ac>)
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	68ba      	ldr	r2, [r7, #8]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d10b      	bne.n	8002cc0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb2:	f023 0303 	bic.w	r3, r3, #3
 8002cb6:	f043 0201 	orr.w	r2, r3, #1
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002cbe:	e018      	b.n	8002cf2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc4:	f023 0312 	bic.w	r3, r3, #18
 8002cc8:	f043 0210 	orr.w	r2, r3, #16
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd4:	f043 0201 	orr.w	r2, r3, #1
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002ce0:	e007      	b.n	8002cf2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce6:	f043 0210 	orr.w	r2, r3, #16
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002cf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3718      	adds	r7, #24
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	ffe1f7fd 	.word	0xffe1f7fd
 8002d00:	ff1f0efe 	.word	0xff1f0efe

08002d04 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d101      	bne.n	8002d1e <HAL_ADC_Start+0x1a>
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	e098      	b.n	8002e50 <HAL_ADC_Start+0x14c>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2201      	movs	r2, #1
 8002d22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 fb7a 	bl	8003420 <ADC_Enable>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002d30:	7bfb      	ldrb	r3, [r7, #15]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	f040 8087 	bne.w	8002e46 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d40:	f023 0301 	bic.w	r3, r3, #1
 8002d44:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a41      	ldr	r2, [pc, #260]	; (8002e58 <HAL_ADC_Start+0x154>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d105      	bne.n	8002d62 <HAL_ADC_Start+0x5e>
 8002d56:	4b41      	ldr	r3, [pc, #260]	; (8002e5c <HAL_ADC_Start+0x158>)
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d115      	bne.n	8002d8e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d66:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d026      	beq.n	8002dca <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d80:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d84:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002d8c:	e01d      	b.n	8002dca <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d92:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a2f      	ldr	r2, [pc, #188]	; (8002e5c <HAL_ADC_Start+0x158>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d004      	beq.n	8002dae <HAL_ADC_Start+0xaa>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a2b      	ldr	r2, [pc, #172]	; (8002e58 <HAL_ADC_Start+0x154>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d10d      	bne.n	8002dca <HAL_ADC_Start+0xc6>
 8002dae:	4b2b      	ldr	r3, [pc, #172]	; (8002e5c <HAL_ADC_Start+0x158>)
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d007      	beq.n	8002dca <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dbe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002dc2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d006      	beq.n	8002de4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dda:	f023 0206 	bic.w	r2, r3, #6
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	62da      	str	r2, [r3, #44]	; 0x2c
 8002de2:	e002      	b.n	8002dea <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f06f 0202 	mvn.w	r2, #2
 8002dfa:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002e06:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002e0a:	d113      	bne.n	8002e34 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002e10:	4a11      	ldr	r2, [pc, #68]	; (8002e58 <HAL_ADC_Start+0x154>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d105      	bne.n	8002e22 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002e16:	4b11      	ldr	r3, [pc, #68]	; (8002e5c <HAL_ADC_Start+0x158>)
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d108      	bne.n	8002e34 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002e30:	609a      	str	r2, [r3, #8]
 8002e32:	e00c      	b.n	8002e4e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	689a      	ldr	r2, [r3, #8]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002e42:	609a      	str	r2, [r3, #8]
 8002e44:	e003      	b.n	8002e4e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3710      	adds	r7, #16
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	40012800 	.word	0x40012800
 8002e5c:	40012400 	.word	0x40012400

08002e60 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002e60:	b590      	push	{r4, r7, lr}
 8002e62:	b087      	sub	sp, #28
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002e72:	2300      	movs	r3, #0
 8002e74:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002e76:	f7ff fe63 	bl	8002b40 <HAL_GetTick>
 8002e7a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00b      	beq.n	8002ea2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e8e:	f043 0220 	orr.w	r2, r3, #32
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e0d3      	b.n	800304a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d131      	bne.n	8002f14 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d12a      	bne.n	8002f14 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002ebe:	e021      	b.n	8002f04 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec6:	d01d      	beq.n	8002f04 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d007      	beq.n	8002ede <HAL_ADC_PollForConversion+0x7e>
 8002ece:	f7ff fe37 	bl	8002b40 <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d212      	bcs.n	8002f04 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0302 	and.w	r3, r3, #2
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d10b      	bne.n	8002f04 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef0:	f043 0204 	orr.w	r2, r3, #4
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e0a2      	b.n	800304a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d0d6      	beq.n	8002ec0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002f12:	e070      	b.n	8002ff6 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002f14:	4b4f      	ldr	r3, [pc, #316]	; (8003054 <HAL_ADC_PollForConversion+0x1f4>)
 8002f16:	681c      	ldr	r4, [r3, #0]
 8002f18:	2002      	movs	r0, #2
 8002f1a:	f004 f80d 	bl	8006f38 <HAL_RCCEx_GetPeriphCLKFreq>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	6919      	ldr	r1, [r3, #16]
 8002f2a:	4b4b      	ldr	r3, [pc, #300]	; (8003058 <HAL_ADC_PollForConversion+0x1f8>)
 8002f2c:	400b      	ands	r3, r1
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d118      	bne.n	8002f64 <HAL_ADC_PollForConversion+0x104>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68d9      	ldr	r1, [r3, #12]
 8002f38:	4b48      	ldr	r3, [pc, #288]	; (800305c <HAL_ADC_PollForConversion+0x1fc>)
 8002f3a:	400b      	ands	r3, r1
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d111      	bne.n	8002f64 <HAL_ADC_PollForConversion+0x104>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	6919      	ldr	r1, [r3, #16]
 8002f46:	4b46      	ldr	r3, [pc, #280]	; (8003060 <HAL_ADC_PollForConversion+0x200>)
 8002f48:	400b      	ands	r3, r1
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d108      	bne.n	8002f60 <HAL_ADC_PollForConversion+0x100>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68d9      	ldr	r1, [r3, #12]
 8002f54:	4b43      	ldr	r3, [pc, #268]	; (8003064 <HAL_ADC_PollForConversion+0x204>)
 8002f56:	400b      	ands	r3, r1
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d101      	bne.n	8002f60 <HAL_ADC_PollForConversion+0x100>
 8002f5c:	2314      	movs	r3, #20
 8002f5e:	e020      	b.n	8002fa2 <HAL_ADC_PollForConversion+0x142>
 8002f60:	2329      	movs	r3, #41	; 0x29
 8002f62:	e01e      	b.n	8002fa2 <HAL_ADC_PollForConversion+0x142>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6919      	ldr	r1, [r3, #16]
 8002f6a:	4b3d      	ldr	r3, [pc, #244]	; (8003060 <HAL_ADC_PollForConversion+0x200>)
 8002f6c:	400b      	ands	r3, r1
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d106      	bne.n	8002f80 <HAL_ADC_PollForConversion+0x120>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68d9      	ldr	r1, [r3, #12]
 8002f78:	4b3a      	ldr	r3, [pc, #232]	; (8003064 <HAL_ADC_PollForConversion+0x204>)
 8002f7a:	400b      	ands	r3, r1
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d00d      	beq.n	8002f9c <HAL_ADC_PollForConversion+0x13c>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	6919      	ldr	r1, [r3, #16]
 8002f86:	4b38      	ldr	r3, [pc, #224]	; (8003068 <HAL_ADC_PollForConversion+0x208>)
 8002f88:	400b      	ands	r3, r1
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d108      	bne.n	8002fa0 <HAL_ADC_PollForConversion+0x140>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68d9      	ldr	r1, [r3, #12]
 8002f94:	4b34      	ldr	r3, [pc, #208]	; (8003068 <HAL_ADC_PollForConversion+0x208>)
 8002f96:	400b      	ands	r3, r1
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d101      	bne.n	8002fa0 <HAL_ADC_PollForConversion+0x140>
 8002f9c:	2354      	movs	r3, #84	; 0x54
 8002f9e:	e000      	b.n	8002fa2 <HAL_ADC_PollForConversion+0x142>
 8002fa0:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002fa2:	fb02 f303 	mul.w	r3, r2, r3
 8002fa6:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002fa8:	e021      	b.n	8002fee <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb0:	d01a      	beq.n	8002fe8 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d007      	beq.n	8002fc8 <HAL_ADC_PollForConversion+0x168>
 8002fb8:	f7ff fdc2 	bl	8002b40 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	683a      	ldr	r2, [r7, #0]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d20f      	bcs.n	8002fe8 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d90b      	bls.n	8002fe8 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd4:	f043 0204 	orr.w	r2, r3, #4
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e030      	b.n	800304a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	3301      	adds	r3, #1
 8002fec:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d8d9      	bhi.n	8002faa <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f06f 0212 	mvn.w	r2, #18
 8002ffe:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003004:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003016:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800301a:	d115      	bne.n	8003048 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003020:	2b00      	cmp	r3, #0
 8003022:	d111      	bne.n	8003048 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003028:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003034:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d105      	bne.n	8003048 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003040:	f043 0201 	orr.w	r2, r3, #1
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	371c      	adds	r7, #28
 800304e:	46bd      	mov	sp, r7
 8003050:	bd90      	pop	{r4, r7, pc}
 8003052:	bf00      	nop
 8003054:	20000000 	.word	0x20000000
 8003058:	24924924 	.word	0x24924924
 800305c:	00924924 	.word	0x00924924
 8003060:	12492492 	.word	0x12492492
 8003064:	00492492 	.word	0x00492492
 8003068:	00249249 	.word	0x00249249

0800306c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800307a:	4618      	mov	r0, r3
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	bc80      	pop	{r7}
 8003082:	4770      	bx	lr

08003084 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f003 0320 	and.w	r3, r3, #32
 8003096:	2b20      	cmp	r3, #32
 8003098:	d140      	bne.n	800311c <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0302 	and.w	r3, r3, #2
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d139      	bne.n	800311c <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ac:	f003 0310 	and.w	r3, r3, #16
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d105      	bne.n	80030c0 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80030ca:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80030ce:	d11d      	bne.n	800310c <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d119      	bne.n	800310c <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	685a      	ldr	r2, [r3, #4]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f022 0220 	bic.w	r2, r2, #32
 80030e6:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d105      	bne.n	800310c <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003104:	f043 0201 	orr.w	r2, r3, #1
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f000 f87c 	bl	800320a <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f06f 0212 	mvn.w	r2, #18
 800311a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003126:	2b80      	cmp	r3, #128	; 0x80
 8003128:	d14f      	bne.n	80031ca <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0304 	and.w	r3, r3, #4
 8003134:	2b04      	cmp	r3, #4
 8003136:	d148      	bne.n	80031ca <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800313c:	f003 0310 	and.w	r3, r3, #16
 8003140:	2b00      	cmp	r3, #0
 8003142:	d105      	bne.n	8003150 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003148:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800315a:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800315e:	d012      	beq.n	8003186 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800316a:	2b00      	cmp	r3, #0
 800316c:	d125      	bne.n	80031ba <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003178:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800317c:	d11d      	bne.n	80031ba <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003182:	2b00      	cmp	r3, #0
 8003184:	d119      	bne.n	80031ba <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	685a      	ldr	r2, [r3, #4]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003194:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800319a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d105      	bne.n	80031ba <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b2:	f043 0201 	orr.w	r2, r3, #1
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 f9cb 	bl	8003556 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f06f 020c 	mvn.w	r2, #12
 80031c8:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031d4:	2b40      	cmp	r3, #64	; 0x40
 80031d6:	d114      	bne.n	8003202 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d10d      	bne.n	8003202 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 f812 	bl	800321c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f06f 0201 	mvn.w	r2, #1
 8003200:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8003202:	bf00      	nop
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800320a:	b480      	push	{r7}
 800320c:	b083      	sub	sp, #12
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003212:	bf00      	nop
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	bc80      	pop	{r7}
 800321a:	4770      	bx	lr

0800321c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003224:	bf00      	nop
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	bc80      	pop	{r7}
 800322c:	4770      	bx	lr
	...

08003230 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800323a:	2300      	movs	r3, #0
 800323c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800323e:	2300      	movs	r3, #0
 8003240:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003248:	2b01      	cmp	r3, #1
 800324a:	d101      	bne.n	8003250 <HAL_ADC_ConfigChannel+0x20>
 800324c:	2302      	movs	r3, #2
 800324e:	e0dc      	b.n	800340a <HAL_ADC_ConfigChannel+0x1da>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	2b06      	cmp	r3, #6
 800325e:	d81c      	bhi.n	800329a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	685a      	ldr	r2, [r3, #4]
 800326a:	4613      	mov	r3, r2
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	4413      	add	r3, r2
 8003270:	3b05      	subs	r3, #5
 8003272:	221f      	movs	r2, #31
 8003274:	fa02 f303 	lsl.w	r3, r2, r3
 8003278:	43db      	mvns	r3, r3
 800327a:	4019      	ands	r1, r3
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	6818      	ldr	r0, [r3, #0]
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685a      	ldr	r2, [r3, #4]
 8003284:	4613      	mov	r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	4413      	add	r3, r2
 800328a:	3b05      	subs	r3, #5
 800328c:	fa00 f203 	lsl.w	r2, r0, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	430a      	orrs	r2, r1
 8003296:	635a      	str	r2, [r3, #52]	; 0x34
 8003298:	e03c      	b.n	8003314 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	2b0c      	cmp	r3, #12
 80032a0:	d81c      	bhi.n	80032dc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685a      	ldr	r2, [r3, #4]
 80032ac:	4613      	mov	r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	4413      	add	r3, r2
 80032b2:	3b23      	subs	r3, #35	; 0x23
 80032b4:	221f      	movs	r2, #31
 80032b6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ba:	43db      	mvns	r3, r3
 80032bc:	4019      	ands	r1, r3
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	6818      	ldr	r0, [r3, #0]
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	685a      	ldr	r2, [r3, #4]
 80032c6:	4613      	mov	r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	4413      	add	r3, r2
 80032cc:	3b23      	subs	r3, #35	; 0x23
 80032ce:	fa00 f203 	lsl.w	r2, r0, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	430a      	orrs	r2, r1
 80032d8:	631a      	str	r2, [r3, #48]	; 0x30
 80032da:	e01b      	b.n	8003314 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	685a      	ldr	r2, [r3, #4]
 80032e6:	4613      	mov	r3, r2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	4413      	add	r3, r2
 80032ec:	3b41      	subs	r3, #65	; 0x41
 80032ee:	221f      	movs	r2, #31
 80032f0:	fa02 f303 	lsl.w	r3, r2, r3
 80032f4:	43db      	mvns	r3, r3
 80032f6:	4019      	ands	r1, r3
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	6818      	ldr	r0, [r3, #0]
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	685a      	ldr	r2, [r3, #4]
 8003300:	4613      	mov	r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	4413      	add	r3, r2
 8003306:	3b41      	subs	r3, #65	; 0x41
 8003308:	fa00 f203 	lsl.w	r2, r0, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	430a      	orrs	r2, r1
 8003312:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2b09      	cmp	r3, #9
 800331a:	d91c      	bls.n	8003356 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	68d9      	ldr	r1, [r3, #12]
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	4613      	mov	r3, r2
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	4413      	add	r3, r2
 800332c:	3b1e      	subs	r3, #30
 800332e:	2207      	movs	r2, #7
 8003330:	fa02 f303 	lsl.w	r3, r2, r3
 8003334:	43db      	mvns	r3, r3
 8003336:	4019      	ands	r1, r3
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	6898      	ldr	r0, [r3, #8]
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	4613      	mov	r3, r2
 8003342:	005b      	lsls	r3, r3, #1
 8003344:	4413      	add	r3, r2
 8003346:	3b1e      	subs	r3, #30
 8003348:	fa00 f203 	lsl.w	r2, r0, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	430a      	orrs	r2, r1
 8003352:	60da      	str	r2, [r3, #12]
 8003354:	e019      	b.n	800338a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	6919      	ldr	r1, [r3, #16]
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	4613      	mov	r3, r2
 8003362:	005b      	lsls	r3, r3, #1
 8003364:	4413      	add	r3, r2
 8003366:	2207      	movs	r2, #7
 8003368:	fa02 f303 	lsl.w	r3, r2, r3
 800336c:	43db      	mvns	r3, r3
 800336e:	4019      	ands	r1, r3
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	6898      	ldr	r0, [r3, #8]
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	4613      	mov	r3, r2
 800337a:	005b      	lsls	r3, r3, #1
 800337c:	4413      	add	r3, r2
 800337e:	fa00 f203 	lsl.w	r2, r0, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	430a      	orrs	r2, r1
 8003388:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2b10      	cmp	r3, #16
 8003390:	d003      	beq.n	800339a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003396:	2b11      	cmp	r3, #17
 8003398:	d132      	bne.n	8003400 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a1d      	ldr	r2, [pc, #116]	; (8003414 <HAL_ADC_ConfigChannel+0x1e4>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d125      	bne.n	80033f0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d126      	bne.n	8003400 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	689a      	ldr	r2, [r3, #8]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80033c0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2b10      	cmp	r3, #16
 80033c8:	d11a      	bne.n	8003400 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80033ca:	4b13      	ldr	r3, [pc, #76]	; (8003418 <HAL_ADC_ConfigChannel+0x1e8>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a13      	ldr	r2, [pc, #76]	; (800341c <HAL_ADC_ConfigChannel+0x1ec>)
 80033d0:	fba2 2303 	umull	r2, r3, r2, r3
 80033d4:	0c9a      	lsrs	r2, r3, #18
 80033d6:	4613      	mov	r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	4413      	add	r3, r2
 80033dc:	005b      	lsls	r3, r3, #1
 80033de:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80033e0:	e002      	b.n	80033e8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	3b01      	subs	r3, #1
 80033e6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1f9      	bne.n	80033e2 <HAL_ADC_ConfigChannel+0x1b2>
 80033ee:	e007      	b.n	8003400 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f4:	f043 0220 	orr.w	r2, r3, #32
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003408:	7bfb      	ldrb	r3, [r7, #15]
}
 800340a:	4618      	mov	r0, r3
 800340c:	3714      	adds	r7, #20
 800340e:	46bd      	mov	sp, r7
 8003410:	bc80      	pop	{r7}
 8003412:	4770      	bx	lr
 8003414:	40012400 	.word	0x40012400
 8003418:	20000000 	.word	0x20000000
 800341c:	431bde83 	.word	0x431bde83

08003420 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003428:	2300      	movs	r3, #0
 800342a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800342c:	2300      	movs	r3, #0
 800342e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	2b01      	cmp	r3, #1
 800343c:	d040      	beq.n	80034c0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	689a      	ldr	r2, [r3, #8]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f042 0201 	orr.w	r2, r2, #1
 800344c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800344e:	4b1f      	ldr	r3, [pc, #124]	; (80034cc <ADC_Enable+0xac>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a1f      	ldr	r2, [pc, #124]	; (80034d0 <ADC_Enable+0xb0>)
 8003454:	fba2 2303 	umull	r2, r3, r2, r3
 8003458:	0c9b      	lsrs	r3, r3, #18
 800345a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800345c:	e002      	b.n	8003464 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	3b01      	subs	r3, #1
 8003462:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1f9      	bne.n	800345e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800346a:	f7ff fb69 	bl	8002b40 <HAL_GetTick>
 800346e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003470:	e01f      	b.n	80034b2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003472:	f7ff fb65 	bl	8002b40 <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	2b02      	cmp	r3, #2
 800347e:	d918      	bls.n	80034b2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	2b01      	cmp	r3, #1
 800348c:	d011      	beq.n	80034b2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003492:	f043 0210 	orr.w	r2, r3, #16
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349e:	f043 0201 	orr.w	r2, r3, #1
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e007      	b.n	80034c2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d1d8      	bne.n	8003472 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	20000000 	.word	0x20000000
 80034d0:	431bde83 	.word	0x431bde83

080034d4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034dc:	2300      	movs	r3, #0
 80034de:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d12e      	bne.n	800354c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	689a      	ldr	r2, [r3, #8]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f022 0201 	bic.w	r2, r2, #1
 80034fc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80034fe:	f7ff fb1f 	bl	8002b40 <HAL_GetTick>
 8003502:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003504:	e01b      	b.n	800353e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003506:	f7ff fb1b 	bl	8002b40 <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	2b02      	cmp	r3, #2
 8003512:	d914      	bls.n	800353e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	2b01      	cmp	r3, #1
 8003520:	d10d      	bne.n	800353e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003526:	f043 0210 	orr.w	r2, r3, #16
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003532:	f043 0201 	orr.w	r2, r3, #1
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e007      	b.n	800354e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f003 0301 	and.w	r3, r3, #1
 8003548:	2b01      	cmp	r3, #1
 800354a:	d0dc      	beq.n	8003506 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3710      	adds	r7, #16
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}

08003556 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003556:	b480      	push	{r7}
 8003558:	b083      	sub	sp, #12
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800355e:	bf00      	nop
 8003560:	370c      	adds	r7, #12
 8003562:	46bd      	mov	sp, r7
 8003564:	bc80      	pop	{r7}
 8003566:	4770      	bx	lr

08003568 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003568:	b480      	push	{r7}
 800356a:	b085      	sub	sp, #20
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f003 0307 	and.w	r3, r3, #7
 8003576:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003578:	4b0c      	ldr	r3, [pc, #48]	; (80035ac <__NVIC_SetPriorityGrouping+0x44>)
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800357e:	68ba      	ldr	r2, [r7, #8]
 8003580:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003584:	4013      	ands	r3, r2
 8003586:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003590:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003594:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003598:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800359a:	4a04      	ldr	r2, [pc, #16]	; (80035ac <__NVIC_SetPriorityGrouping+0x44>)
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	60d3      	str	r3, [r2, #12]
}
 80035a0:	bf00      	nop
 80035a2:	3714      	adds	r7, #20
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bc80      	pop	{r7}
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	e000ed00 	.word	0xe000ed00

080035b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035b0:	b480      	push	{r7}
 80035b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035b4:	4b04      	ldr	r3, [pc, #16]	; (80035c8 <__NVIC_GetPriorityGrouping+0x18>)
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	0a1b      	lsrs	r3, r3, #8
 80035ba:	f003 0307 	and.w	r3, r3, #7
}
 80035be:	4618      	mov	r0, r3
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bc80      	pop	{r7}
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	e000ed00 	.word	0xe000ed00

080035cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	4603      	mov	r3, r0
 80035d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	db0b      	blt.n	80035f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035de:	79fb      	ldrb	r3, [r7, #7]
 80035e0:	f003 021f 	and.w	r2, r3, #31
 80035e4:	4906      	ldr	r1, [pc, #24]	; (8003600 <__NVIC_EnableIRQ+0x34>)
 80035e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ea:	095b      	lsrs	r3, r3, #5
 80035ec:	2001      	movs	r0, #1
 80035ee:	fa00 f202 	lsl.w	r2, r0, r2
 80035f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80035f6:	bf00      	nop
 80035f8:	370c      	adds	r7, #12
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bc80      	pop	{r7}
 80035fe:	4770      	bx	lr
 8003600:	e000e100 	.word	0xe000e100

08003604 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	4603      	mov	r3, r0
 800360c:	6039      	str	r1, [r7, #0]
 800360e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003614:	2b00      	cmp	r3, #0
 8003616:	db0a      	blt.n	800362e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	b2da      	uxtb	r2, r3
 800361c:	490c      	ldr	r1, [pc, #48]	; (8003650 <__NVIC_SetPriority+0x4c>)
 800361e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003622:	0112      	lsls	r2, r2, #4
 8003624:	b2d2      	uxtb	r2, r2
 8003626:	440b      	add	r3, r1
 8003628:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800362c:	e00a      	b.n	8003644 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	b2da      	uxtb	r2, r3
 8003632:	4908      	ldr	r1, [pc, #32]	; (8003654 <__NVIC_SetPriority+0x50>)
 8003634:	79fb      	ldrb	r3, [r7, #7]
 8003636:	f003 030f 	and.w	r3, r3, #15
 800363a:	3b04      	subs	r3, #4
 800363c:	0112      	lsls	r2, r2, #4
 800363e:	b2d2      	uxtb	r2, r2
 8003640:	440b      	add	r3, r1
 8003642:	761a      	strb	r2, [r3, #24]
}
 8003644:	bf00      	nop
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	bc80      	pop	{r7}
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	e000e100 	.word	0xe000e100
 8003654:	e000ed00 	.word	0xe000ed00

08003658 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003658:	b480      	push	{r7}
 800365a:	b089      	sub	sp, #36	; 0x24
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f003 0307 	and.w	r3, r3, #7
 800366a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	f1c3 0307 	rsb	r3, r3, #7
 8003672:	2b04      	cmp	r3, #4
 8003674:	bf28      	it	cs
 8003676:	2304      	movcs	r3, #4
 8003678:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	3304      	adds	r3, #4
 800367e:	2b06      	cmp	r3, #6
 8003680:	d902      	bls.n	8003688 <NVIC_EncodePriority+0x30>
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	3b03      	subs	r3, #3
 8003686:	e000      	b.n	800368a <NVIC_EncodePriority+0x32>
 8003688:	2300      	movs	r3, #0
 800368a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800368c:	f04f 32ff 	mov.w	r2, #4294967295
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	fa02 f303 	lsl.w	r3, r2, r3
 8003696:	43da      	mvns	r2, r3
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	401a      	ands	r2, r3
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036a0:	f04f 31ff 	mov.w	r1, #4294967295
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	fa01 f303 	lsl.w	r3, r1, r3
 80036aa:	43d9      	mvns	r1, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036b0:	4313      	orrs	r3, r2
         );
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3724      	adds	r7, #36	; 0x24
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bc80      	pop	{r7}
 80036ba:	4770      	bx	lr

080036bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	3b01      	subs	r3, #1
 80036c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036cc:	d301      	bcc.n	80036d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036ce:	2301      	movs	r3, #1
 80036d0:	e00f      	b.n	80036f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036d2:	4a0a      	ldr	r2, [pc, #40]	; (80036fc <SysTick_Config+0x40>)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	3b01      	subs	r3, #1
 80036d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036da:	210f      	movs	r1, #15
 80036dc:	f04f 30ff 	mov.w	r0, #4294967295
 80036e0:	f7ff ff90 	bl	8003604 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036e4:	4b05      	ldr	r3, [pc, #20]	; (80036fc <SysTick_Config+0x40>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036ea:	4b04      	ldr	r3, [pc, #16]	; (80036fc <SysTick_Config+0x40>)
 80036ec:	2207      	movs	r2, #7
 80036ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3708      	adds	r7, #8
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	e000e010 	.word	0xe000e010

08003700 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f7ff ff2d 	bl	8003568 <__NVIC_SetPriorityGrouping>
}
 800370e:	bf00      	nop
 8003710:	3708      	adds	r7, #8
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003716:	b580      	push	{r7, lr}
 8003718:	b086      	sub	sp, #24
 800371a:	af00      	add	r7, sp, #0
 800371c:	4603      	mov	r3, r0
 800371e:	60b9      	str	r1, [r7, #8]
 8003720:	607a      	str	r2, [r7, #4]
 8003722:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003724:	2300      	movs	r3, #0
 8003726:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003728:	f7ff ff42 	bl	80035b0 <__NVIC_GetPriorityGrouping>
 800372c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	68b9      	ldr	r1, [r7, #8]
 8003732:	6978      	ldr	r0, [r7, #20]
 8003734:	f7ff ff90 	bl	8003658 <NVIC_EncodePriority>
 8003738:	4602      	mov	r2, r0
 800373a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800373e:	4611      	mov	r1, r2
 8003740:	4618      	mov	r0, r3
 8003742:	f7ff ff5f 	bl	8003604 <__NVIC_SetPriority>
}
 8003746:	bf00      	nop
 8003748:	3718      	adds	r7, #24
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800374e:	b580      	push	{r7, lr}
 8003750:	b082      	sub	sp, #8
 8003752:	af00      	add	r7, sp, #0
 8003754:	4603      	mov	r3, r0
 8003756:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800375c:	4618      	mov	r0, r3
 800375e:	f7ff ff35 	bl	80035cc <__NVIC_EnableIRQ>
}
 8003762:	bf00      	nop
 8003764:	3708      	adds	r7, #8
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}

0800376a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800376a:	b580      	push	{r7, lr}
 800376c:	b082      	sub	sp, #8
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f7ff ffa2 	bl	80036bc <SysTick_Config>
 8003778:	4603      	mov	r3, r0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3708      	adds	r7, #8
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
	...

08003784 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800378c:	2300      	movs	r3, #0
 800378e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003796:	2b02      	cmp	r3, #2
 8003798:	d005      	beq.n	80037a6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2204      	movs	r2, #4
 800379e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	73fb      	strb	r3, [r7, #15]
 80037a4:	e051      	b.n	800384a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f022 020e 	bic.w	r2, r2, #14
 80037b4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f022 0201 	bic.w	r2, r2, #1
 80037c4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a22      	ldr	r2, [pc, #136]	; (8003854 <HAL_DMA_Abort_IT+0xd0>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d029      	beq.n	8003824 <HAL_DMA_Abort_IT+0xa0>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a20      	ldr	r2, [pc, #128]	; (8003858 <HAL_DMA_Abort_IT+0xd4>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d022      	beq.n	8003820 <HAL_DMA_Abort_IT+0x9c>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a1f      	ldr	r2, [pc, #124]	; (800385c <HAL_DMA_Abort_IT+0xd8>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d01a      	beq.n	800381a <HAL_DMA_Abort_IT+0x96>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a1d      	ldr	r2, [pc, #116]	; (8003860 <HAL_DMA_Abort_IT+0xdc>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d012      	beq.n	8003814 <HAL_DMA_Abort_IT+0x90>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a1c      	ldr	r2, [pc, #112]	; (8003864 <HAL_DMA_Abort_IT+0xe0>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d00a      	beq.n	800380e <HAL_DMA_Abort_IT+0x8a>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a1a      	ldr	r2, [pc, #104]	; (8003868 <HAL_DMA_Abort_IT+0xe4>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d102      	bne.n	8003808 <HAL_DMA_Abort_IT+0x84>
 8003802:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003806:	e00e      	b.n	8003826 <HAL_DMA_Abort_IT+0xa2>
 8003808:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800380c:	e00b      	b.n	8003826 <HAL_DMA_Abort_IT+0xa2>
 800380e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003812:	e008      	b.n	8003826 <HAL_DMA_Abort_IT+0xa2>
 8003814:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003818:	e005      	b.n	8003826 <HAL_DMA_Abort_IT+0xa2>
 800381a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800381e:	e002      	b.n	8003826 <HAL_DMA_Abort_IT+0xa2>
 8003820:	2310      	movs	r3, #16
 8003822:	e000      	b.n	8003826 <HAL_DMA_Abort_IT+0xa2>
 8003824:	2301      	movs	r3, #1
 8003826:	4a11      	ldr	r2, [pc, #68]	; (800386c <HAL_DMA_Abort_IT+0xe8>)
 8003828:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2201      	movs	r2, #1
 800382e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	4798      	blx	r3
    } 
  }
  return status;
 800384a:	7bfb      	ldrb	r3, [r7, #15]
}
 800384c:	4618      	mov	r0, r3
 800384e:	3710      	adds	r7, #16
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	40020008 	.word	0x40020008
 8003858:	4002001c 	.word	0x4002001c
 800385c:	40020030 	.word	0x40020030
 8003860:	40020044 	.word	0x40020044
 8003864:	40020058 	.word	0x40020058
 8003868:	4002006c 	.word	0x4002006c
 800386c:	40020000 	.word	0x40020000

08003870 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 800387e:	4618      	mov	r0, r3
 8003880:	370c      	adds	r7, #12
 8003882:	46bd      	mov	sp, r7
 8003884:	bc80      	pop	{r7}
 8003886:	4770      	bx	lr

08003888 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003888:	b480      	push	{r7}
 800388a:	b08b      	sub	sp, #44	; 0x2c
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003892:	2300      	movs	r3, #0
 8003894:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003896:	2300      	movs	r3, #0
 8003898:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800389a:	e169      	b.n	8003b70 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800389c:	2201      	movs	r2, #1
 800389e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a0:	fa02 f303 	lsl.w	r3, r2, r3
 80038a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	69fa      	ldr	r2, [r7, #28]
 80038ac:	4013      	ands	r3, r2
 80038ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80038b0:	69ba      	ldr	r2, [r7, #24]
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	f040 8158 	bne.w	8003b6a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	4a9a      	ldr	r2, [pc, #616]	; (8003b28 <HAL_GPIO_Init+0x2a0>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d05e      	beq.n	8003982 <HAL_GPIO_Init+0xfa>
 80038c4:	4a98      	ldr	r2, [pc, #608]	; (8003b28 <HAL_GPIO_Init+0x2a0>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d875      	bhi.n	80039b6 <HAL_GPIO_Init+0x12e>
 80038ca:	4a98      	ldr	r2, [pc, #608]	; (8003b2c <HAL_GPIO_Init+0x2a4>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d058      	beq.n	8003982 <HAL_GPIO_Init+0xfa>
 80038d0:	4a96      	ldr	r2, [pc, #600]	; (8003b2c <HAL_GPIO_Init+0x2a4>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d86f      	bhi.n	80039b6 <HAL_GPIO_Init+0x12e>
 80038d6:	4a96      	ldr	r2, [pc, #600]	; (8003b30 <HAL_GPIO_Init+0x2a8>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d052      	beq.n	8003982 <HAL_GPIO_Init+0xfa>
 80038dc:	4a94      	ldr	r2, [pc, #592]	; (8003b30 <HAL_GPIO_Init+0x2a8>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d869      	bhi.n	80039b6 <HAL_GPIO_Init+0x12e>
 80038e2:	4a94      	ldr	r2, [pc, #592]	; (8003b34 <HAL_GPIO_Init+0x2ac>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d04c      	beq.n	8003982 <HAL_GPIO_Init+0xfa>
 80038e8:	4a92      	ldr	r2, [pc, #584]	; (8003b34 <HAL_GPIO_Init+0x2ac>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d863      	bhi.n	80039b6 <HAL_GPIO_Init+0x12e>
 80038ee:	4a92      	ldr	r2, [pc, #584]	; (8003b38 <HAL_GPIO_Init+0x2b0>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d046      	beq.n	8003982 <HAL_GPIO_Init+0xfa>
 80038f4:	4a90      	ldr	r2, [pc, #576]	; (8003b38 <HAL_GPIO_Init+0x2b0>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d85d      	bhi.n	80039b6 <HAL_GPIO_Init+0x12e>
 80038fa:	2b12      	cmp	r3, #18
 80038fc:	d82a      	bhi.n	8003954 <HAL_GPIO_Init+0xcc>
 80038fe:	2b12      	cmp	r3, #18
 8003900:	d859      	bhi.n	80039b6 <HAL_GPIO_Init+0x12e>
 8003902:	a201      	add	r2, pc, #4	; (adr r2, 8003908 <HAL_GPIO_Init+0x80>)
 8003904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003908:	08003983 	.word	0x08003983
 800390c:	0800395d 	.word	0x0800395d
 8003910:	0800396f 	.word	0x0800396f
 8003914:	080039b1 	.word	0x080039b1
 8003918:	080039b7 	.word	0x080039b7
 800391c:	080039b7 	.word	0x080039b7
 8003920:	080039b7 	.word	0x080039b7
 8003924:	080039b7 	.word	0x080039b7
 8003928:	080039b7 	.word	0x080039b7
 800392c:	080039b7 	.word	0x080039b7
 8003930:	080039b7 	.word	0x080039b7
 8003934:	080039b7 	.word	0x080039b7
 8003938:	080039b7 	.word	0x080039b7
 800393c:	080039b7 	.word	0x080039b7
 8003940:	080039b7 	.word	0x080039b7
 8003944:	080039b7 	.word	0x080039b7
 8003948:	080039b7 	.word	0x080039b7
 800394c:	08003965 	.word	0x08003965
 8003950:	08003979 	.word	0x08003979
 8003954:	4a79      	ldr	r2, [pc, #484]	; (8003b3c <HAL_GPIO_Init+0x2b4>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d013      	beq.n	8003982 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800395a:	e02c      	b.n	80039b6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	623b      	str	r3, [r7, #32]
          break;
 8003962:	e029      	b.n	80039b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	3304      	adds	r3, #4
 800396a:	623b      	str	r3, [r7, #32]
          break;
 800396c:	e024      	b.n	80039b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	3308      	adds	r3, #8
 8003974:	623b      	str	r3, [r7, #32]
          break;
 8003976:	e01f      	b.n	80039b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	330c      	adds	r3, #12
 800397e:	623b      	str	r3, [r7, #32]
          break;
 8003980:	e01a      	b.n	80039b8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d102      	bne.n	8003990 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800398a:	2304      	movs	r3, #4
 800398c:	623b      	str	r3, [r7, #32]
          break;
 800398e:	e013      	b.n	80039b8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d105      	bne.n	80039a4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003998:	2308      	movs	r3, #8
 800399a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	69fa      	ldr	r2, [r7, #28]
 80039a0:	611a      	str	r2, [r3, #16]
          break;
 80039a2:	e009      	b.n	80039b8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80039a4:	2308      	movs	r3, #8
 80039a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	69fa      	ldr	r2, [r7, #28]
 80039ac:	615a      	str	r2, [r3, #20]
          break;
 80039ae:	e003      	b.n	80039b8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80039b0:	2300      	movs	r3, #0
 80039b2:	623b      	str	r3, [r7, #32]
          break;
 80039b4:	e000      	b.n	80039b8 <HAL_GPIO_Init+0x130>
          break;
 80039b6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	2bff      	cmp	r3, #255	; 0xff
 80039bc:	d801      	bhi.n	80039c2 <HAL_GPIO_Init+0x13a>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	e001      	b.n	80039c6 <HAL_GPIO_Init+0x13e>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	3304      	adds	r3, #4
 80039c6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	2bff      	cmp	r3, #255	; 0xff
 80039cc:	d802      	bhi.n	80039d4 <HAL_GPIO_Init+0x14c>
 80039ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	e002      	b.n	80039da <HAL_GPIO_Init+0x152>
 80039d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d6:	3b08      	subs	r3, #8
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	210f      	movs	r1, #15
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	fa01 f303 	lsl.w	r3, r1, r3
 80039e8:	43db      	mvns	r3, r3
 80039ea:	401a      	ands	r2, r3
 80039ec:	6a39      	ldr	r1, [r7, #32]
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	fa01 f303 	lsl.w	r3, r1, r3
 80039f4:	431a      	orrs	r2, r3
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	f000 80b1 	beq.w	8003b6a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003a08:	4b4d      	ldr	r3, [pc, #308]	; (8003b40 <HAL_GPIO_Init+0x2b8>)
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	4a4c      	ldr	r2, [pc, #304]	; (8003b40 <HAL_GPIO_Init+0x2b8>)
 8003a0e:	f043 0301 	orr.w	r3, r3, #1
 8003a12:	6193      	str	r3, [r2, #24]
 8003a14:	4b4a      	ldr	r3, [pc, #296]	; (8003b40 <HAL_GPIO_Init+0x2b8>)
 8003a16:	699b      	ldr	r3, [r3, #24]
 8003a18:	f003 0301 	and.w	r3, r3, #1
 8003a1c:	60bb      	str	r3, [r7, #8]
 8003a1e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003a20:	4a48      	ldr	r2, [pc, #288]	; (8003b44 <HAL_GPIO_Init+0x2bc>)
 8003a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a24:	089b      	lsrs	r3, r3, #2
 8003a26:	3302      	adds	r3, #2
 8003a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a2c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a30:	f003 0303 	and.w	r3, r3, #3
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	220f      	movs	r2, #15
 8003a38:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3c:	43db      	mvns	r3, r3
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	4013      	ands	r3, r2
 8003a42:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a40      	ldr	r2, [pc, #256]	; (8003b48 <HAL_GPIO_Init+0x2c0>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d013      	beq.n	8003a74 <HAL_GPIO_Init+0x1ec>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4a3f      	ldr	r2, [pc, #252]	; (8003b4c <HAL_GPIO_Init+0x2c4>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d00d      	beq.n	8003a70 <HAL_GPIO_Init+0x1e8>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4a3e      	ldr	r2, [pc, #248]	; (8003b50 <HAL_GPIO_Init+0x2c8>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d007      	beq.n	8003a6c <HAL_GPIO_Init+0x1e4>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a3d      	ldr	r2, [pc, #244]	; (8003b54 <HAL_GPIO_Init+0x2cc>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d101      	bne.n	8003a68 <HAL_GPIO_Init+0x1e0>
 8003a64:	2303      	movs	r3, #3
 8003a66:	e006      	b.n	8003a76 <HAL_GPIO_Init+0x1ee>
 8003a68:	2304      	movs	r3, #4
 8003a6a:	e004      	b.n	8003a76 <HAL_GPIO_Init+0x1ee>
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	e002      	b.n	8003a76 <HAL_GPIO_Init+0x1ee>
 8003a70:	2301      	movs	r3, #1
 8003a72:	e000      	b.n	8003a76 <HAL_GPIO_Init+0x1ee>
 8003a74:	2300      	movs	r3, #0
 8003a76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a78:	f002 0203 	and.w	r2, r2, #3
 8003a7c:	0092      	lsls	r2, r2, #2
 8003a7e:	4093      	lsls	r3, r2
 8003a80:	68fa      	ldr	r2, [r7, #12]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003a86:	492f      	ldr	r1, [pc, #188]	; (8003b44 <HAL_GPIO_Init+0x2bc>)
 8003a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8a:	089b      	lsrs	r3, r3, #2
 8003a8c:	3302      	adds	r3, #2
 8003a8e:	68fa      	ldr	r2, [r7, #12]
 8003a90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d006      	beq.n	8003aae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003aa0:	4b2d      	ldr	r3, [pc, #180]	; (8003b58 <HAL_GPIO_Init+0x2d0>)
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	492c      	ldr	r1, [pc, #176]	; (8003b58 <HAL_GPIO_Init+0x2d0>)
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	600b      	str	r3, [r1, #0]
 8003aac:	e006      	b.n	8003abc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003aae:	4b2a      	ldr	r3, [pc, #168]	; (8003b58 <HAL_GPIO_Init+0x2d0>)
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	43db      	mvns	r3, r3
 8003ab6:	4928      	ldr	r1, [pc, #160]	; (8003b58 <HAL_GPIO_Init+0x2d0>)
 8003ab8:	4013      	ands	r3, r2
 8003aba:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d006      	beq.n	8003ad6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003ac8:	4b23      	ldr	r3, [pc, #140]	; (8003b58 <HAL_GPIO_Init+0x2d0>)
 8003aca:	685a      	ldr	r2, [r3, #4]
 8003acc:	4922      	ldr	r1, [pc, #136]	; (8003b58 <HAL_GPIO_Init+0x2d0>)
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	604b      	str	r3, [r1, #4]
 8003ad4:	e006      	b.n	8003ae4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003ad6:	4b20      	ldr	r3, [pc, #128]	; (8003b58 <HAL_GPIO_Init+0x2d0>)
 8003ad8:	685a      	ldr	r2, [r3, #4]
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	43db      	mvns	r3, r3
 8003ade:	491e      	ldr	r1, [pc, #120]	; (8003b58 <HAL_GPIO_Init+0x2d0>)
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d006      	beq.n	8003afe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003af0:	4b19      	ldr	r3, [pc, #100]	; (8003b58 <HAL_GPIO_Init+0x2d0>)
 8003af2:	689a      	ldr	r2, [r3, #8]
 8003af4:	4918      	ldr	r1, [pc, #96]	; (8003b58 <HAL_GPIO_Init+0x2d0>)
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	608b      	str	r3, [r1, #8]
 8003afc:	e006      	b.n	8003b0c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003afe:	4b16      	ldr	r3, [pc, #88]	; (8003b58 <HAL_GPIO_Init+0x2d0>)
 8003b00:	689a      	ldr	r2, [r3, #8]
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	43db      	mvns	r3, r3
 8003b06:	4914      	ldr	r1, [pc, #80]	; (8003b58 <HAL_GPIO_Init+0x2d0>)
 8003b08:	4013      	ands	r3, r2
 8003b0a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d021      	beq.n	8003b5c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003b18:	4b0f      	ldr	r3, [pc, #60]	; (8003b58 <HAL_GPIO_Init+0x2d0>)
 8003b1a:	68da      	ldr	r2, [r3, #12]
 8003b1c:	490e      	ldr	r1, [pc, #56]	; (8003b58 <HAL_GPIO_Init+0x2d0>)
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	60cb      	str	r3, [r1, #12]
 8003b24:	e021      	b.n	8003b6a <HAL_GPIO_Init+0x2e2>
 8003b26:	bf00      	nop
 8003b28:	10320000 	.word	0x10320000
 8003b2c:	10310000 	.word	0x10310000
 8003b30:	10220000 	.word	0x10220000
 8003b34:	10210000 	.word	0x10210000
 8003b38:	10120000 	.word	0x10120000
 8003b3c:	10110000 	.word	0x10110000
 8003b40:	40021000 	.word	0x40021000
 8003b44:	40010000 	.word	0x40010000
 8003b48:	40010800 	.word	0x40010800
 8003b4c:	40010c00 	.word	0x40010c00
 8003b50:	40011000 	.word	0x40011000
 8003b54:	40011400 	.word	0x40011400
 8003b58:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003b5c:	4b0b      	ldr	r3, [pc, #44]	; (8003b8c <HAL_GPIO_Init+0x304>)
 8003b5e:	68da      	ldr	r2, [r3, #12]
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	43db      	mvns	r3, r3
 8003b64:	4909      	ldr	r1, [pc, #36]	; (8003b8c <HAL_GPIO_Init+0x304>)
 8003b66:	4013      	ands	r3, r2
 8003b68:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b76:	fa22 f303 	lsr.w	r3, r2, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f47f ae8e 	bne.w	800389c <HAL_GPIO_Init+0x14>
  }
}
 8003b80:	bf00      	nop
 8003b82:	bf00      	nop
 8003b84:	372c      	adds	r7, #44	; 0x2c
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bc80      	pop	{r7}
 8003b8a:	4770      	bx	lr
 8003b8c:	40010400 	.word	0x40010400

08003b90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	460b      	mov	r3, r1
 8003b9a:	807b      	strh	r3, [r7, #2]
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ba0:	787b      	ldrb	r3, [r7, #1]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d003      	beq.n	8003bae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ba6:	887a      	ldrh	r2, [r7, #2]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003bac:	e003      	b.n	8003bb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003bae:	887b      	ldrh	r3, [r7, #2]
 8003bb0:	041a      	lsls	r2, r3, #16
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	611a      	str	r2, [r3, #16]
}
 8003bb6:	bf00      	nop
 8003bb8:	370c      	adds	r7, #12
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bc80      	pop	{r7}
 8003bbe:	4770      	bx	lr

08003bc0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003bca:	4b08      	ldr	r3, [pc, #32]	; (8003bec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003bcc:	695a      	ldr	r2, [r3, #20]
 8003bce:	88fb      	ldrh	r3, [r7, #6]
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d006      	beq.n	8003be4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003bd6:	4a05      	ldr	r2, [pc, #20]	; (8003bec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003bd8:	88fb      	ldrh	r3, [r7, #6]
 8003bda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003bdc:	88fb      	ldrh	r3, [r7, #6]
 8003bde:	4618      	mov	r0, r3
 8003be0:	f7fe fdb6 	bl	8002750 <HAL_GPIO_EXTI_Callback>
  }
}
 8003be4:	bf00      	nop
 8003be6:	3708      	adds	r7, #8
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	40010400 	.word	0x40010400

08003bf0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d101      	bne.n	8003c02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e12b      	b.n	8003e5a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d106      	bne.n	8003c1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f7fe fe62 	bl	80028e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2224      	movs	r2, #36	; 0x24
 8003c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f022 0201 	bic.w	r2, r2, #1
 8003c32:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c42:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c52:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c54:	f003 f874 	bl	8006d40 <HAL_RCC_GetPCLK1Freq>
 8003c58:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	4a81      	ldr	r2, [pc, #516]	; (8003e64 <HAL_I2C_Init+0x274>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d807      	bhi.n	8003c74 <HAL_I2C_Init+0x84>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	4a80      	ldr	r2, [pc, #512]	; (8003e68 <HAL_I2C_Init+0x278>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	bf94      	ite	ls
 8003c6c:	2301      	movls	r3, #1
 8003c6e:	2300      	movhi	r3, #0
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	e006      	b.n	8003c82 <HAL_I2C_Init+0x92>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	4a7d      	ldr	r2, [pc, #500]	; (8003e6c <HAL_I2C_Init+0x27c>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	bf94      	ite	ls
 8003c7c:	2301      	movls	r3, #1
 8003c7e:	2300      	movhi	r3, #0
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d001      	beq.n	8003c8a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e0e7      	b.n	8003e5a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	4a78      	ldr	r2, [pc, #480]	; (8003e70 <HAL_I2C_Init+0x280>)
 8003c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c92:	0c9b      	lsrs	r3, r3, #18
 8003c94:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68ba      	ldr	r2, [r7, #8]
 8003ca6:	430a      	orrs	r2, r1
 8003ca8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	6a1b      	ldr	r3, [r3, #32]
 8003cb0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	4a6a      	ldr	r2, [pc, #424]	; (8003e64 <HAL_I2C_Init+0x274>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d802      	bhi.n	8003cc4 <HAL_I2C_Init+0xd4>
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	e009      	b.n	8003cd8 <HAL_I2C_Init+0xe8>
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003cca:	fb02 f303 	mul.w	r3, r2, r3
 8003cce:	4a69      	ldr	r2, [pc, #420]	; (8003e74 <HAL_I2C_Init+0x284>)
 8003cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd4:	099b      	lsrs	r3, r3, #6
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	6812      	ldr	r2, [r2, #0]
 8003cdc:	430b      	orrs	r3, r1
 8003cde:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	69db      	ldr	r3, [r3, #28]
 8003ce6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003cea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	495c      	ldr	r1, [pc, #368]	; (8003e64 <HAL_I2C_Init+0x274>)
 8003cf4:	428b      	cmp	r3, r1
 8003cf6:	d819      	bhi.n	8003d2c <HAL_I2C_Init+0x13c>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	1e59      	subs	r1, r3, #1
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	005b      	lsls	r3, r3, #1
 8003d02:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d06:	1c59      	adds	r1, r3, #1
 8003d08:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003d0c:	400b      	ands	r3, r1
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00a      	beq.n	8003d28 <HAL_I2C_Init+0x138>
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	1e59      	subs	r1, r3, #1
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	005b      	lsls	r3, r3, #1
 8003d1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d20:	3301      	adds	r3, #1
 8003d22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d26:	e051      	b.n	8003dcc <HAL_I2C_Init+0x1dc>
 8003d28:	2304      	movs	r3, #4
 8003d2a:	e04f      	b.n	8003dcc <HAL_I2C_Init+0x1dc>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d111      	bne.n	8003d58 <HAL_I2C_Init+0x168>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	1e58      	subs	r0, r3, #1
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6859      	ldr	r1, [r3, #4]
 8003d3c:	460b      	mov	r3, r1
 8003d3e:	005b      	lsls	r3, r3, #1
 8003d40:	440b      	add	r3, r1
 8003d42:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d46:	3301      	adds	r3, #1
 8003d48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	bf0c      	ite	eq
 8003d50:	2301      	moveq	r3, #1
 8003d52:	2300      	movne	r3, #0
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	e012      	b.n	8003d7e <HAL_I2C_Init+0x18e>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	1e58      	subs	r0, r3, #1
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6859      	ldr	r1, [r3, #4]
 8003d60:	460b      	mov	r3, r1
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	440b      	add	r3, r1
 8003d66:	0099      	lsls	r1, r3, #2
 8003d68:	440b      	add	r3, r1
 8003d6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d6e:	3301      	adds	r3, #1
 8003d70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	bf0c      	ite	eq
 8003d78:	2301      	moveq	r3, #1
 8003d7a:	2300      	movne	r3, #0
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d001      	beq.n	8003d86 <HAL_I2C_Init+0x196>
 8003d82:	2301      	movs	r3, #1
 8003d84:	e022      	b.n	8003dcc <HAL_I2C_Init+0x1dc>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d10e      	bne.n	8003dac <HAL_I2C_Init+0x1bc>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	1e58      	subs	r0, r3, #1
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6859      	ldr	r1, [r3, #4]
 8003d96:	460b      	mov	r3, r1
 8003d98:	005b      	lsls	r3, r3, #1
 8003d9a:	440b      	add	r3, r1
 8003d9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003da0:	3301      	adds	r3, #1
 8003da2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003da6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003daa:	e00f      	b.n	8003dcc <HAL_I2C_Init+0x1dc>
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	1e58      	subs	r0, r3, #1
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6859      	ldr	r1, [r3, #4]
 8003db4:	460b      	mov	r3, r1
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	440b      	add	r3, r1
 8003dba:	0099      	lsls	r1, r3, #2
 8003dbc:	440b      	add	r3, r1
 8003dbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dc8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003dcc:	6879      	ldr	r1, [r7, #4]
 8003dce:	6809      	ldr	r1, [r1, #0]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	69da      	ldr	r2, [r3, #28]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a1b      	ldr	r3, [r3, #32]
 8003de6:	431a      	orrs	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	430a      	orrs	r2, r1
 8003dee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003dfa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	6911      	ldr	r1, [r2, #16]
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	68d2      	ldr	r2, [r2, #12]
 8003e06:	4311      	orrs	r1, r2
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	6812      	ldr	r2, [r2, #0]
 8003e0c:	430b      	orrs	r3, r1
 8003e0e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	695a      	ldr	r2, [r3, #20]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	431a      	orrs	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	430a      	orrs	r2, r1
 8003e2a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f042 0201 	orr.w	r2, r2, #1
 8003e3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2220      	movs	r2, #32
 8003e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	000186a0 	.word	0x000186a0
 8003e68:	001e847f 	.word	0x001e847f
 8003e6c:	003d08ff 	.word	0x003d08ff
 8003e70:	431bde83 	.word	0x431bde83
 8003e74:	10624dd3 	.word	0x10624dd3

08003e78 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b088      	sub	sp, #32
 8003e7c:	af02      	add	r7, sp, #8
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	4608      	mov	r0, r1
 8003e82:	4611      	mov	r1, r2
 8003e84:	461a      	mov	r2, r3
 8003e86:	4603      	mov	r3, r0
 8003e88:	817b      	strh	r3, [r7, #10]
 8003e8a:	460b      	mov	r3, r1
 8003e8c:	813b      	strh	r3, [r7, #8]
 8003e8e:	4613      	mov	r3, r2
 8003e90:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e92:	f7fe fe55 	bl	8002b40 <HAL_GetTick>
 8003e96:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	2b20      	cmp	r3, #32
 8003ea2:	f040 80d9 	bne.w	8004058 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	9300      	str	r3, [sp, #0]
 8003eaa:	2319      	movs	r3, #25
 8003eac:	2201      	movs	r2, #1
 8003eae:	496d      	ldr	r1, [pc, #436]	; (8004064 <HAL_I2C_Mem_Write+0x1ec>)
 8003eb0:	68f8      	ldr	r0, [r7, #12]
 8003eb2:	f002 f949 	bl	8006148 <I2C_WaitOnFlagUntilTimeout>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d001      	beq.n	8003ec0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	e0cc      	b.n	800405a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d101      	bne.n	8003ece <HAL_I2C_Mem_Write+0x56>
 8003eca:	2302      	movs	r3, #2
 8003ecc:	e0c5      	b.n	800405a <HAL_I2C_Mem_Write+0x1e2>
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0301 	and.w	r3, r3, #1
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d007      	beq.n	8003ef4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f042 0201 	orr.w	r2, r2, #1
 8003ef2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f02:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2221      	movs	r2, #33	; 0x21
 8003f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2240      	movs	r2, #64	; 0x40
 8003f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2200      	movs	r2, #0
 8003f18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6a3a      	ldr	r2, [r7, #32]
 8003f1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003f24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f2a:	b29a      	uxth	r2, r3
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	4a4d      	ldr	r2, [pc, #308]	; (8004068 <HAL_I2C_Mem_Write+0x1f0>)
 8003f34:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f36:	88f8      	ldrh	r0, [r7, #6]
 8003f38:	893a      	ldrh	r2, [r7, #8]
 8003f3a:	8979      	ldrh	r1, [r7, #10]
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	9301      	str	r3, [sp, #4]
 8003f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f42:	9300      	str	r3, [sp, #0]
 8003f44:	4603      	mov	r3, r0
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	f001 fed8 	bl	8005cfc <I2C_RequestMemoryWrite>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d052      	beq.n	8003ff8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e081      	b.n	800405a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f56:	697a      	ldr	r2, [r7, #20]
 8003f58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f5a:	68f8      	ldr	r0, [r7, #12]
 8003f5c:	f002 f9ca 	bl	80062f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00d      	beq.n	8003f82 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6a:	2b04      	cmp	r3, #4
 8003f6c:	d107      	bne.n	8003f7e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f7c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e06b      	b.n	800405a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f86:	781a      	ldrb	r2, [r3, #0]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f92:	1c5a      	adds	r2, r3, #1
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	b29a      	uxth	r2, r3
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	3b01      	subs	r3, #1
 8003fac:	b29a      	uxth	r2, r3
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	695b      	ldr	r3, [r3, #20]
 8003fb8:	f003 0304 	and.w	r3, r3, #4
 8003fbc:	2b04      	cmp	r3, #4
 8003fbe:	d11b      	bne.n	8003ff8 <HAL_I2C_Mem_Write+0x180>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d017      	beq.n	8003ff8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fcc:	781a      	ldrb	r2, [r3, #0]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd8:	1c5a      	adds	r2, r3, #1
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	b29a      	uxth	r2, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d1aa      	bne.n	8003f56 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004000:	697a      	ldr	r2, [r7, #20]
 8004002:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004004:	68f8      	ldr	r0, [r7, #12]
 8004006:	f002 f9b6 	bl	8006376 <I2C_WaitOnBTFFlagUntilTimeout>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d00d      	beq.n	800402c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004014:	2b04      	cmp	r3, #4
 8004016:	d107      	bne.n	8004028 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004026:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e016      	b.n	800405a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800403a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2220      	movs	r2, #32
 8004040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2200      	movs	r2, #0
 8004048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2200      	movs	r2, #0
 8004050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004054:	2300      	movs	r3, #0
 8004056:	e000      	b.n	800405a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004058:	2302      	movs	r3, #2
  }
}
 800405a:	4618      	mov	r0, r3
 800405c:	3718      	adds	r7, #24
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	00100002 	.word	0x00100002
 8004068:	ffff0000 	.word	0xffff0000

0800406c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b08c      	sub	sp, #48	; 0x30
 8004070:	af02      	add	r7, sp, #8
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	4608      	mov	r0, r1
 8004076:	4611      	mov	r1, r2
 8004078:	461a      	mov	r2, r3
 800407a:	4603      	mov	r3, r0
 800407c:	817b      	strh	r3, [r7, #10]
 800407e:	460b      	mov	r3, r1
 8004080:	813b      	strh	r3, [r7, #8]
 8004082:	4613      	mov	r3, r2
 8004084:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004086:	2300      	movs	r3, #0
 8004088:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800408a:	f7fe fd59 	bl	8002b40 <HAL_GetTick>
 800408e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004096:	b2db      	uxtb	r3, r3
 8004098:	2b20      	cmp	r3, #32
 800409a:	f040 8244 	bne.w	8004526 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800409e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a0:	9300      	str	r3, [sp, #0]
 80040a2:	2319      	movs	r3, #25
 80040a4:	2201      	movs	r2, #1
 80040a6:	4982      	ldr	r1, [pc, #520]	; (80042b0 <HAL_I2C_Mem_Read+0x244>)
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f002 f84d 	bl	8006148 <I2C_WaitOnFlagUntilTimeout>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d001      	beq.n	80040b8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80040b4:	2302      	movs	r3, #2
 80040b6:	e237      	b.n	8004528 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d101      	bne.n	80040c6 <HAL_I2C_Mem_Read+0x5a>
 80040c2:	2302      	movs	r3, #2
 80040c4:	e230      	b.n	8004528 <HAL_I2C_Mem_Read+0x4bc>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0301 	and.w	r3, r3, #1
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d007      	beq.n	80040ec <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f042 0201 	orr.w	r2, r2, #1
 80040ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2222      	movs	r2, #34	; 0x22
 8004100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2240      	movs	r2, #64	; 0x40
 8004108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2200      	movs	r2, #0
 8004110:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004116:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800411c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004122:	b29a      	uxth	r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	4a62      	ldr	r2, [pc, #392]	; (80042b4 <HAL_I2C_Mem_Read+0x248>)
 800412c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800412e:	88f8      	ldrh	r0, [r7, #6]
 8004130:	893a      	ldrh	r2, [r7, #8]
 8004132:	8979      	ldrh	r1, [r7, #10]
 8004134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004136:	9301      	str	r3, [sp, #4]
 8004138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800413a:	9300      	str	r3, [sp, #0]
 800413c:	4603      	mov	r3, r0
 800413e:	68f8      	ldr	r0, [r7, #12]
 8004140:	f001 fe72 	bl	8005e28 <I2C_RequestMemoryRead>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d001      	beq.n	800414e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e1ec      	b.n	8004528 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004152:	2b00      	cmp	r3, #0
 8004154:	d113      	bne.n	800417e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004156:	2300      	movs	r3, #0
 8004158:	61fb      	str	r3, [r7, #28]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	695b      	ldr	r3, [r3, #20]
 8004160:	61fb      	str	r3, [r7, #28]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	61fb      	str	r3, [r7, #28]
 800416a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800417a:	601a      	str	r2, [r3, #0]
 800417c:	e1c0      	b.n	8004500 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004182:	2b01      	cmp	r3, #1
 8004184:	d11e      	bne.n	80041c4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004194:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004196:	b672      	cpsid	i
}
 8004198:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800419a:	2300      	movs	r3, #0
 800419c:	61bb      	str	r3, [r7, #24]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	695b      	ldr	r3, [r3, #20]
 80041a4:	61bb      	str	r3, [r7, #24]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	699b      	ldr	r3, [r3, #24]
 80041ac:	61bb      	str	r3, [r7, #24]
 80041ae:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041be:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80041c0:	b662      	cpsie	i
}
 80041c2:	e035      	b.n	8004230 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d11e      	bne.n	800420a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041da:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80041dc:	b672      	cpsid	i
}
 80041de:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041e0:	2300      	movs	r3, #0
 80041e2:	617b      	str	r3, [r7, #20]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	617b      	str	r3, [r7, #20]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	617b      	str	r3, [r7, #20]
 80041f4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004204:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004206:	b662      	cpsie	i
}
 8004208:	e012      	b.n	8004230 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004218:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800421a:	2300      	movs	r3, #0
 800421c:	613b      	str	r3, [r7, #16]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	695b      	ldr	r3, [r3, #20]
 8004224:	613b      	str	r3, [r7, #16]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	613b      	str	r3, [r7, #16]
 800422e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004230:	e166      	b.n	8004500 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004236:	2b03      	cmp	r3, #3
 8004238:	f200 811f 	bhi.w	800447a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004240:	2b01      	cmp	r3, #1
 8004242:	d123      	bne.n	800428c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004244:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004246:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004248:	68f8      	ldr	r0, [r7, #12]
 800424a:	f002 f907 	bl	800645c <I2C_WaitOnRXNEFlagUntilTimeout>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d001      	beq.n	8004258 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e167      	b.n	8004528 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	691a      	ldr	r2, [r3, #16]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004262:	b2d2      	uxtb	r2, r2
 8004264:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426a:	1c5a      	adds	r2, r3, #1
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004274:	3b01      	subs	r3, #1
 8004276:	b29a      	uxth	r2, r3
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004280:	b29b      	uxth	r3, r3
 8004282:	3b01      	subs	r3, #1
 8004284:	b29a      	uxth	r2, r3
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	855a      	strh	r2, [r3, #42]	; 0x2a
 800428a:	e139      	b.n	8004500 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004290:	2b02      	cmp	r3, #2
 8004292:	d152      	bne.n	800433a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004296:	9300      	str	r3, [sp, #0]
 8004298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800429a:	2200      	movs	r2, #0
 800429c:	4906      	ldr	r1, [pc, #24]	; (80042b8 <HAL_I2C_Mem_Read+0x24c>)
 800429e:	68f8      	ldr	r0, [r7, #12]
 80042a0:	f001 ff52 	bl	8006148 <I2C_WaitOnFlagUntilTimeout>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d008      	beq.n	80042bc <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e13c      	b.n	8004528 <HAL_I2C_Mem_Read+0x4bc>
 80042ae:	bf00      	nop
 80042b0:	00100002 	.word	0x00100002
 80042b4:	ffff0000 	.word	0xffff0000
 80042b8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80042bc:	b672      	cpsid	i
}
 80042be:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	691a      	ldr	r2, [r3, #16]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042da:	b2d2      	uxtb	r2, r2
 80042dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e2:	1c5a      	adds	r2, r3, #1
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ec:	3b01      	subs	r3, #1
 80042ee:	b29a      	uxth	r2, r3
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	3b01      	subs	r3, #1
 80042fc:	b29a      	uxth	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004302:	b662      	cpsie	i
}
 8004304:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	691a      	ldr	r2, [r3, #16]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004310:	b2d2      	uxtb	r2, r2
 8004312:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004318:	1c5a      	adds	r2, r3, #1
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004322:	3b01      	subs	r3, #1
 8004324:	b29a      	uxth	r2, r3
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800432e:	b29b      	uxth	r3, r3
 8004330:	3b01      	subs	r3, #1
 8004332:	b29a      	uxth	r2, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004338:	e0e2      	b.n	8004500 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800433a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433c:	9300      	str	r3, [sp, #0]
 800433e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004340:	2200      	movs	r2, #0
 8004342:	497b      	ldr	r1, [pc, #492]	; (8004530 <HAL_I2C_Mem_Read+0x4c4>)
 8004344:	68f8      	ldr	r0, [r7, #12]
 8004346:	f001 feff 	bl	8006148 <I2C_WaitOnFlagUntilTimeout>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d001      	beq.n	8004354 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e0e9      	b.n	8004528 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004362:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004364:	b672      	cpsid	i
}
 8004366:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	691a      	ldr	r2, [r3, #16]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004372:	b2d2      	uxtb	r2, r2
 8004374:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437a:	1c5a      	adds	r2, r3, #1
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004384:	3b01      	subs	r3, #1
 8004386:	b29a      	uxth	r2, r3
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004390:	b29b      	uxth	r3, r3
 8004392:	3b01      	subs	r3, #1
 8004394:	b29a      	uxth	r2, r3
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800439a:	4b66      	ldr	r3, [pc, #408]	; (8004534 <HAL_I2C_Mem_Read+0x4c8>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	08db      	lsrs	r3, r3, #3
 80043a0:	4a65      	ldr	r2, [pc, #404]	; (8004538 <HAL_I2C_Mem_Read+0x4cc>)
 80043a2:	fba2 2303 	umull	r2, r3, r2, r3
 80043a6:	0a1a      	lsrs	r2, r3, #8
 80043a8:	4613      	mov	r3, r2
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	4413      	add	r3, r2
 80043ae:	00da      	lsls	r2, r3, #3
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80043b4:	6a3b      	ldr	r3, [r7, #32]
 80043b6:	3b01      	subs	r3, #1
 80043b8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80043ba:	6a3b      	ldr	r3, [r7, #32]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d118      	bne.n	80043f2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2220      	movs	r2, #32
 80043ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043da:	f043 0220 	orr.w	r2, r3, #32
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80043e2:	b662      	cpsie	i
}
 80043e4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e09a      	b.n	8004528 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	695b      	ldr	r3, [r3, #20]
 80043f8:	f003 0304 	and.w	r3, r3, #4
 80043fc:	2b04      	cmp	r3, #4
 80043fe:	d1d9      	bne.n	80043b4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800440e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	691a      	ldr	r2, [r3, #16]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441a:	b2d2      	uxtb	r2, r2
 800441c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004422:	1c5a      	adds	r2, r3, #1
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800442c:	3b01      	subs	r3, #1
 800442e:	b29a      	uxth	r2, r3
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004438:	b29b      	uxth	r3, r3
 800443a:	3b01      	subs	r3, #1
 800443c:	b29a      	uxth	r2, r3
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004442:	b662      	cpsie	i
}
 8004444:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	691a      	ldr	r2, [r3, #16]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004450:	b2d2      	uxtb	r2, r2
 8004452:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004458:	1c5a      	adds	r2, r3, #1
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004462:	3b01      	subs	r3, #1
 8004464:	b29a      	uxth	r2, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800446e:	b29b      	uxth	r3, r3
 8004470:	3b01      	subs	r3, #1
 8004472:	b29a      	uxth	r2, r3
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004478:	e042      	b.n	8004500 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800447a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800447c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800447e:	68f8      	ldr	r0, [r7, #12]
 8004480:	f001 ffec 	bl	800645c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d001      	beq.n	800448e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e04c      	b.n	8004528 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	691a      	ldr	r2, [r3, #16]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004498:	b2d2      	uxtb	r2, r2
 800449a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a0:	1c5a      	adds	r2, r3, #1
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044aa:	3b01      	subs	r3, #1
 80044ac:	b29a      	uxth	r2, r3
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	3b01      	subs	r3, #1
 80044ba:	b29a      	uxth	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	f003 0304 	and.w	r3, r3, #4
 80044ca:	2b04      	cmp	r3, #4
 80044cc:	d118      	bne.n	8004500 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	691a      	ldr	r2, [r3, #16]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d8:	b2d2      	uxtb	r2, r2
 80044da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e0:	1c5a      	adds	r2, r3, #1
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ea:	3b01      	subs	r3, #1
 80044ec:	b29a      	uxth	r2, r3
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	3b01      	subs	r3, #1
 80044fa:	b29a      	uxth	r2, r3
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004504:	2b00      	cmp	r3, #0
 8004506:	f47f ae94 	bne.w	8004232 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2220      	movs	r2, #32
 800450e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2200      	movs	r2, #0
 800451e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004522:	2300      	movs	r3, #0
 8004524:	e000      	b.n	8004528 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8004526:	2302      	movs	r3, #2
  }
}
 8004528:	4618      	mov	r0, r3
 800452a:	3728      	adds	r7, #40	; 0x28
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	00010004 	.word	0x00010004
 8004534:	20000000 	.word	0x20000000
 8004538:	14f8b589 	.word	0x14f8b589

0800453c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b088      	sub	sp, #32
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004544:	2300      	movs	r3, #0
 8004546:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004554:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800455c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004564:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004566:	7bfb      	ldrb	r3, [r7, #15]
 8004568:	2b10      	cmp	r3, #16
 800456a:	d003      	beq.n	8004574 <HAL_I2C_EV_IRQHandler+0x38>
 800456c:	7bfb      	ldrb	r3, [r7, #15]
 800456e:	2b40      	cmp	r3, #64	; 0x40
 8004570:	f040 80c1 	bne.w	80046f6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	695b      	ldr	r3, [r3, #20]
 8004582:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	f003 0301 	and.w	r3, r3, #1
 800458a:	2b00      	cmp	r3, #0
 800458c:	d10d      	bne.n	80045aa <HAL_I2C_EV_IRQHandler+0x6e>
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004594:	d003      	beq.n	800459e <HAL_I2C_EV_IRQHandler+0x62>
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800459c:	d101      	bne.n	80045a2 <HAL_I2C_EV_IRQHandler+0x66>
 800459e:	2301      	movs	r3, #1
 80045a0:	e000      	b.n	80045a4 <HAL_I2C_EV_IRQHandler+0x68>
 80045a2:	2300      	movs	r3, #0
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	f000 8132 	beq.w	800480e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	f003 0301 	and.w	r3, r3, #1
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d00c      	beq.n	80045ce <HAL_I2C_EV_IRQHandler+0x92>
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	0a5b      	lsrs	r3, r3, #9
 80045b8:	f003 0301 	and.w	r3, r3, #1
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d006      	beq.n	80045ce <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f001 ffcf 	bl	8006564 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f000 fd77 	bl	80050ba <I2C_Master_SB>
 80045cc:	e092      	b.n	80046f4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	08db      	lsrs	r3, r3, #3
 80045d2:	f003 0301 	and.w	r3, r3, #1
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d009      	beq.n	80045ee <HAL_I2C_EV_IRQHandler+0xb2>
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	0a5b      	lsrs	r3, r3, #9
 80045de:	f003 0301 	and.w	r3, r3, #1
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d003      	beq.n	80045ee <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 fdec 	bl	80051c4 <I2C_Master_ADD10>
 80045ec:	e082      	b.n	80046f4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	085b      	lsrs	r3, r3, #1
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d009      	beq.n	800460e <HAL_I2C_EV_IRQHandler+0xd2>
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	0a5b      	lsrs	r3, r3, #9
 80045fe:	f003 0301 	and.w	r3, r3, #1
 8004602:	2b00      	cmp	r3, #0
 8004604:	d003      	beq.n	800460e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 fe05 	bl	8005216 <I2C_Master_ADDR>
 800460c:	e072      	b.n	80046f4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	089b      	lsrs	r3, r3, #2
 8004612:	f003 0301 	and.w	r3, r3, #1
 8004616:	2b00      	cmp	r3, #0
 8004618:	d03b      	beq.n	8004692 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004624:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004628:	f000 80f3 	beq.w	8004812 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	09db      	lsrs	r3, r3, #7
 8004630:	f003 0301 	and.w	r3, r3, #1
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00f      	beq.n	8004658 <HAL_I2C_EV_IRQHandler+0x11c>
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	0a9b      	lsrs	r3, r3, #10
 800463c:	f003 0301 	and.w	r3, r3, #1
 8004640:	2b00      	cmp	r3, #0
 8004642:	d009      	beq.n	8004658 <HAL_I2C_EV_IRQHandler+0x11c>
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	089b      	lsrs	r3, r3, #2
 8004648:	f003 0301 	and.w	r3, r3, #1
 800464c:	2b00      	cmp	r3, #0
 800464e:	d103      	bne.n	8004658 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f000 f9f1 	bl	8004a38 <I2C_MasterTransmit_TXE>
 8004656:	e04d      	b.n	80046f4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	089b      	lsrs	r3, r3, #2
 800465c:	f003 0301 	and.w	r3, r3, #1
 8004660:	2b00      	cmp	r3, #0
 8004662:	f000 80d6 	beq.w	8004812 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	0a5b      	lsrs	r3, r3, #9
 800466a:	f003 0301 	and.w	r3, r3, #1
 800466e:	2b00      	cmp	r3, #0
 8004670:	f000 80cf 	beq.w	8004812 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004674:	7bbb      	ldrb	r3, [r7, #14]
 8004676:	2b21      	cmp	r3, #33	; 0x21
 8004678:	d103      	bne.n	8004682 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 fa78 	bl	8004b70 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004680:	e0c7      	b.n	8004812 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004682:	7bfb      	ldrb	r3, [r7, #15]
 8004684:	2b40      	cmp	r3, #64	; 0x40
 8004686:	f040 80c4 	bne.w	8004812 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 fae6 	bl	8004c5c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004690:	e0bf      	b.n	8004812 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800469c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046a0:	f000 80b7 	beq.w	8004812 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	099b      	lsrs	r3, r3, #6
 80046a8:	f003 0301 	and.w	r3, r3, #1
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00f      	beq.n	80046d0 <HAL_I2C_EV_IRQHandler+0x194>
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	0a9b      	lsrs	r3, r3, #10
 80046b4:	f003 0301 	and.w	r3, r3, #1
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d009      	beq.n	80046d0 <HAL_I2C_EV_IRQHandler+0x194>
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	089b      	lsrs	r3, r3, #2
 80046c0:	f003 0301 	and.w	r3, r3, #1
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d103      	bne.n	80046d0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f000 fb5b 	bl	8004d84 <I2C_MasterReceive_RXNE>
 80046ce:	e011      	b.n	80046f4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	089b      	lsrs	r3, r3, #2
 80046d4:	f003 0301 	and.w	r3, r3, #1
 80046d8:	2b00      	cmp	r3, #0
 80046da:	f000 809a 	beq.w	8004812 <HAL_I2C_EV_IRQHandler+0x2d6>
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	0a5b      	lsrs	r3, r3, #9
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	f000 8093 	beq.w	8004812 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f000 fbfa 	bl	8004ee6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046f2:	e08e      	b.n	8004812 <HAL_I2C_EV_IRQHandler+0x2d6>
 80046f4:	e08d      	b.n	8004812 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d004      	beq.n	8004708 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	695b      	ldr	r3, [r3, #20]
 8004704:	61fb      	str	r3, [r7, #28]
 8004706:	e007      	b.n	8004718 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	699b      	ldr	r3, [r3, #24]
 800470e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	085b      	lsrs	r3, r3, #1
 800471c:	f003 0301 	and.w	r3, r3, #1
 8004720:	2b00      	cmp	r3, #0
 8004722:	d012      	beq.n	800474a <HAL_I2C_EV_IRQHandler+0x20e>
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	0a5b      	lsrs	r3, r3, #9
 8004728:	f003 0301 	and.w	r3, r3, #1
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00c      	beq.n	800474a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004734:	2b00      	cmp	r3, #0
 8004736:	d003      	beq.n	8004740 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	699b      	ldr	r3, [r3, #24]
 800473e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004740:	69b9      	ldr	r1, [r7, #24]
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 ffbe 	bl	80056c4 <I2C_Slave_ADDR>
 8004748:	e066      	b.n	8004818 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	091b      	lsrs	r3, r3, #4
 800474e:	f003 0301 	and.w	r3, r3, #1
 8004752:	2b00      	cmp	r3, #0
 8004754:	d009      	beq.n	800476a <HAL_I2C_EV_IRQHandler+0x22e>
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	0a5b      	lsrs	r3, r3, #9
 800475a:	f003 0301 	and.w	r3, r3, #1
 800475e:	2b00      	cmp	r3, #0
 8004760:	d003      	beq.n	800476a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f000 fff8 	bl	8005758 <I2C_Slave_STOPF>
 8004768:	e056      	b.n	8004818 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800476a:	7bbb      	ldrb	r3, [r7, #14]
 800476c:	2b21      	cmp	r3, #33	; 0x21
 800476e:	d002      	beq.n	8004776 <HAL_I2C_EV_IRQHandler+0x23a>
 8004770:	7bbb      	ldrb	r3, [r7, #14]
 8004772:	2b29      	cmp	r3, #41	; 0x29
 8004774:	d125      	bne.n	80047c2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	09db      	lsrs	r3, r3, #7
 800477a:	f003 0301 	and.w	r3, r3, #1
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00f      	beq.n	80047a2 <HAL_I2C_EV_IRQHandler+0x266>
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	0a9b      	lsrs	r3, r3, #10
 8004786:	f003 0301 	and.w	r3, r3, #1
 800478a:	2b00      	cmp	r3, #0
 800478c:	d009      	beq.n	80047a2 <HAL_I2C_EV_IRQHandler+0x266>
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	089b      	lsrs	r3, r3, #2
 8004792:	f003 0301 	and.w	r3, r3, #1
 8004796:	2b00      	cmp	r3, #0
 8004798:	d103      	bne.n	80047a2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 fed6 	bl	800554c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80047a0:	e039      	b.n	8004816 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	089b      	lsrs	r3, r3, #2
 80047a6:	f003 0301 	and.w	r3, r3, #1
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d033      	beq.n	8004816 <HAL_I2C_EV_IRQHandler+0x2da>
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	0a5b      	lsrs	r3, r3, #9
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d02d      	beq.n	8004816 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 ff03 	bl	80055c6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80047c0:	e029      	b.n	8004816 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	099b      	lsrs	r3, r3, #6
 80047c6:	f003 0301 	and.w	r3, r3, #1
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00f      	beq.n	80047ee <HAL_I2C_EV_IRQHandler+0x2b2>
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	0a9b      	lsrs	r3, r3, #10
 80047d2:	f003 0301 	and.w	r3, r3, #1
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d009      	beq.n	80047ee <HAL_I2C_EV_IRQHandler+0x2b2>
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	089b      	lsrs	r3, r3, #2
 80047de:	f003 0301 	and.w	r3, r3, #1
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d103      	bne.n	80047ee <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f000 ff0d 	bl	8005606 <I2C_SlaveReceive_RXNE>
 80047ec:	e014      	b.n	8004818 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	089b      	lsrs	r3, r3, #2
 80047f2:	f003 0301 	and.w	r3, r3, #1
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d00e      	beq.n	8004818 <HAL_I2C_EV_IRQHandler+0x2dc>
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	0a5b      	lsrs	r3, r3, #9
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	2b00      	cmp	r3, #0
 8004804:	d008      	beq.n	8004818 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 ff3b 	bl	8005682 <I2C_SlaveReceive_BTF>
 800480c:	e004      	b.n	8004818 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800480e:	bf00      	nop
 8004810:	e002      	b.n	8004818 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004812:	bf00      	nop
 8004814:	e000      	b.n	8004818 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004816:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004818:	3720      	adds	r7, #32
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}

0800481e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800481e:	b580      	push	{r7, lr}
 8004820:	b08a      	sub	sp, #40	; 0x28
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	695b      	ldr	r3, [r3, #20]
 800482c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004836:	2300      	movs	r3, #0
 8004838:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004840:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004842:	6a3b      	ldr	r3, [r7, #32]
 8004844:	0a1b      	lsrs	r3, r3, #8
 8004846:	f003 0301 	and.w	r3, r3, #1
 800484a:	2b00      	cmp	r3, #0
 800484c:	d016      	beq.n	800487c <HAL_I2C_ER_IRQHandler+0x5e>
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	0a1b      	lsrs	r3, r3, #8
 8004852:	f003 0301 	and.w	r3, r3, #1
 8004856:	2b00      	cmp	r3, #0
 8004858:	d010      	beq.n	800487c <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800485a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485c:	f043 0301 	orr.w	r3, r3, #1
 8004860:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800486a:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800487a:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800487c:	6a3b      	ldr	r3, [r7, #32]
 800487e:	0a5b      	lsrs	r3, r3, #9
 8004880:	f003 0301 	and.w	r3, r3, #1
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00e      	beq.n	80048a6 <HAL_I2C_ER_IRQHandler+0x88>
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	0a1b      	lsrs	r3, r3, #8
 800488c:	f003 0301 	and.w	r3, r3, #1
 8004890:	2b00      	cmp	r3, #0
 8004892:	d008      	beq.n	80048a6 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004896:	f043 0302 	orr.w	r3, r3, #2
 800489a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80048a4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80048a6:	6a3b      	ldr	r3, [r7, #32]
 80048a8:	0a9b      	lsrs	r3, r3, #10
 80048aa:	f003 0301 	and.w	r3, r3, #1
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d03f      	beq.n	8004932 <HAL_I2C_ER_IRQHandler+0x114>
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	0a1b      	lsrs	r3, r3, #8
 80048b6:	f003 0301 	and.w	r3, r3, #1
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d039      	beq.n	8004932 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 80048be:	7efb      	ldrb	r3, [r7, #27]
 80048c0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048d0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80048d8:	7ebb      	ldrb	r3, [r7, #26]
 80048da:	2b20      	cmp	r3, #32
 80048dc:	d112      	bne.n	8004904 <HAL_I2C_ER_IRQHandler+0xe6>
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d10f      	bne.n	8004904 <HAL_I2C_ER_IRQHandler+0xe6>
 80048e4:	7cfb      	ldrb	r3, [r7, #19]
 80048e6:	2b21      	cmp	r3, #33	; 0x21
 80048e8:	d008      	beq.n	80048fc <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80048ea:	7cfb      	ldrb	r3, [r7, #19]
 80048ec:	2b29      	cmp	r3, #41	; 0x29
 80048ee:	d005      	beq.n	80048fc <HAL_I2C_ER_IRQHandler+0xde>
 80048f0:	7cfb      	ldrb	r3, [r7, #19]
 80048f2:	2b28      	cmp	r3, #40	; 0x28
 80048f4:	d106      	bne.n	8004904 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2b21      	cmp	r3, #33	; 0x21
 80048fa:	d103      	bne.n	8004904 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f001 f85b 	bl	80059b8 <I2C_Slave_AF>
 8004902:	e016      	b.n	8004932 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800490c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800490e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004910:	f043 0304 	orr.w	r3, r3, #4
 8004914:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004916:	7efb      	ldrb	r3, [r7, #27]
 8004918:	2b10      	cmp	r3, #16
 800491a:	d002      	beq.n	8004922 <HAL_I2C_ER_IRQHandler+0x104>
 800491c:	7efb      	ldrb	r3, [r7, #27]
 800491e:	2b40      	cmp	r3, #64	; 0x40
 8004920:	d107      	bne.n	8004932 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004930:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004932:	6a3b      	ldr	r3, [r7, #32]
 8004934:	0adb      	lsrs	r3, r3, #11
 8004936:	f003 0301 	and.w	r3, r3, #1
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00e      	beq.n	800495c <HAL_I2C_ER_IRQHandler+0x13e>
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	0a1b      	lsrs	r3, r3, #8
 8004942:	f003 0301 	and.w	r3, r3, #1
 8004946:	2b00      	cmp	r3, #0
 8004948:	d008      	beq.n	800495c <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800494a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494c:	f043 0308 	orr.w	r3, r3, #8
 8004950:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800495a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800495c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495e:	2b00      	cmp	r3, #0
 8004960:	d008      	beq.n	8004974 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004968:	431a      	orrs	r2, r3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f001 f892 	bl	8005a98 <I2C_ITError>
  }
}
 8004974:	bf00      	nop
 8004976:	3728      	adds	r7, #40	; 0x28
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}

0800497c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004984:	bf00      	nop
 8004986:	370c      	adds	r7, #12
 8004988:	46bd      	mov	sp, r7
 800498a:	bc80      	pop	{r7}
 800498c:	4770      	bx	lr

0800498e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800498e:	b480      	push	{r7}
 8004990:	b083      	sub	sp, #12
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004996:	bf00      	nop
 8004998:	370c      	adds	r7, #12
 800499a:	46bd      	mov	sp, r7
 800499c:	bc80      	pop	{r7}
 800499e:	4770      	bx	lr

080049a0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80049a8:	bf00      	nop
 80049aa:	370c      	adds	r7, #12
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bc80      	pop	{r7}
 80049b0:	4770      	bx	lr

080049b2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049b2:	b480      	push	{r7}
 80049b4:	b083      	sub	sp, #12
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80049ba:	bf00      	nop
 80049bc:	370c      	adds	r7, #12
 80049be:	46bd      	mov	sp, r7
 80049c0:	bc80      	pop	{r7}
 80049c2:	4770      	bx	lr

080049c4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	460b      	mov	r3, r1
 80049ce:	70fb      	strb	r3, [r7, #3]
 80049d0:	4613      	mov	r3, r2
 80049d2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80049d4:	bf00      	nop
 80049d6:	370c      	adds	r7, #12
 80049d8:	46bd      	mov	sp, r7
 80049da:	bc80      	pop	{r7}
 80049dc:	4770      	bx	lr

080049de <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049de:	b480      	push	{r7}
 80049e0:	b083      	sub	sp, #12
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80049e6:	bf00      	nop
 80049e8:	370c      	adds	r7, #12
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bc80      	pop	{r7}
 80049ee:	4770      	bx	lr

080049f0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80049f8:	bf00      	nop
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bc80      	pop	{r7}
 8004a00:	4770      	bx	lr

08004a02 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a02:	b480      	push	{r7}
 8004a04:	b083      	sub	sp, #12
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004a0a:	bf00      	nop
 8004a0c:	370c      	adds	r7, #12
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bc80      	pop	{r7}
 8004a12:	4770      	bx	lr

08004a14 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004a1c:	bf00      	nop
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bc80      	pop	{r7}
 8004a24:	4770      	bx	lr

08004a26 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a26:	b480      	push	{r7}
 8004a28:	b083      	sub	sp, #12
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004a2e:	bf00      	nop
 8004a30:	370c      	adds	r7, #12
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bc80      	pop	{r7}
 8004a36:	4770      	bx	lr

08004a38 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a46:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a4e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a54:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d150      	bne.n	8004b00 <I2C_MasterTransmit_TXE+0xc8>
 8004a5e:	7bfb      	ldrb	r3, [r7, #15]
 8004a60:	2b21      	cmp	r3, #33	; 0x21
 8004a62:	d14d      	bne.n	8004b00 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	2b08      	cmp	r3, #8
 8004a68:	d01d      	beq.n	8004aa6 <I2C_MasterTransmit_TXE+0x6e>
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	2b20      	cmp	r3, #32
 8004a6e:	d01a      	beq.n	8004aa6 <I2C_MasterTransmit_TXE+0x6e>
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a76:	d016      	beq.n	8004aa6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	685a      	ldr	r2, [r3, #4]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a86:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2211      	movs	r2, #17
 8004a8c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2220      	movs	r2, #32
 8004a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f7ff ff6c 	bl	800497c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004aa4:	e060      	b.n	8004b68 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	685a      	ldr	r2, [r3, #4]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ab4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ac4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2220      	movs	r2, #32
 8004ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	2b40      	cmp	r3, #64	; 0x40
 8004ade:	d107      	bne.n	8004af0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f7ff ff81 	bl	80049f0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004aee:	e03b      	b.n	8004b68 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f7ff ff3f 	bl	800497c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004afe:	e033      	b.n	8004b68 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004b00:	7bfb      	ldrb	r3, [r7, #15]
 8004b02:	2b21      	cmp	r3, #33	; 0x21
 8004b04:	d005      	beq.n	8004b12 <I2C_MasterTransmit_TXE+0xda>
 8004b06:	7bbb      	ldrb	r3, [r7, #14]
 8004b08:	2b40      	cmp	r3, #64	; 0x40
 8004b0a:	d12d      	bne.n	8004b68 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004b0c:	7bfb      	ldrb	r3, [r7, #15]
 8004b0e:	2b22      	cmp	r3, #34	; 0x22
 8004b10:	d12a      	bne.n	8004b68 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d108      	bne.n	8004b2e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	685a      	ldr	r2, [r3, #4]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b2a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004b2c:	e01c      	b.n	8004b68 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	2b40      	cmp	r3, #64	; 0x40
 8004b38:	d103      	bne.n	8004b42 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 f88e 	bl	8004c5c <I2C_MemoryTransmit_TXE_BTF>
}
 8004b40:	e012      	b.n	8004b68 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b46:	781a      	ldrb	r2, [r3, #0]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b52:	1c5a      	adds	r2, r3, #1
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	3b01      	subs	r3, #1
 8004b60:	b29a      	uxth	r2, r3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004b66:	e7ff      	b.n	8004b68 <I2C_MasterTransmit_TXE+0x130>
 8004b68:	bf00      	nop
 8004b6a:	3710      	adds	r7, #16
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	2b21      	cmp	r3, #33	; 0x21
 8004b88:	d164      	bne.n	8004c54 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d012      	beq.n	8004bba <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b98:	781a      	ldrb	r2, [r3, #0]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba4:	1c5a      	adds	r2, r3, #1
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	3b01      	subs	r3, #1
 8004bb2:	b29a      	uxth	r2, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004bb8:	e04c      	b.n	8004c54 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2b08      	cmp	r3, #8
 8004bbe:	d01d      	beq.n	8004bfc <I2C_MasterTransmit_BTF+0x8c>
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2b20      	cmp	r3, #32
 8004bc4:	d01a      	beq.n	8004bfc <I2C_MasterTransmit_BTF+0x8c>
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004bcc:	d016      	beq.n	8004bfc <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	685a      	ldr	r2, [r3, #4]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004bdc:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2211      	movs	r2, #17
 8004be2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2220      	movs	r2, #32
 8004bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f7ff fec1 	bl	800497c <HAL_I2C_MasterTxCpltCallback>
}
 8004bfa:	e02b      	b.n	8004c54 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	685a      	ldr	r2, [r3, #4]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c0a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c1a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2220      	movs	r2, #32
 8004c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	2b40      	cmp	r3, #64	; 0x40
 8004c34:	d107      	bne.n	8004c46 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f7ff fed6 	bl	80049f0 <HAL_I2C_MemTxCpltCallback>
}
 8004c44:	e006      	b.n	8004c54 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f7ff fe94 	bl	800497c <HAL_I2C_MasterTxCpltCallback>
}
 8004c54:	bf00      	nop
 8004c56:	3710      	adds	r7, #16
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c6a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d11d      	bne.n	8004cb0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d10b      	bne.n	8004c94 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c80:	b2da      	uxtb	r2, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c8c:	1c9a      	adds	r2, r3, #2
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004c92:	e073      	b.n	8004d7c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	121b      	asrs	r3, r3, #8
 8004c9c:	b2da      	uxtb	r2, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ca8:	1c5a      	adds	r2, r3, #1
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004cae:	e065      	b.n	8004d7c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d10b      	bne.n	8004cd0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cbc:	b2da      	uxtb	r2, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cc8:	1c5a      	adds	r2, r3, #1
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004cce:	e055      	b.n	8004d7c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d151      	bne.n	8004d7c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004cd8:	7bfb      	ldrb	r3, [r7, #15]
 8004cda:	2b22      	cmp	r3, #34	; 0x22
 8004cdc:	d10d      	bne.n	8004cfa <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cec:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cf2:	1c5a      	adds	r2, r3, #1
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004cf8:	e040      	b.n	8004d7c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d015      	beq.n	8004d30 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004d04:	7bfb      	ldrb	r3, [r7, #15]
 8004d06:	2b21      	cmp	r3, #33	; 0x21
 8004d08:	d112      	bne.n	8004d30 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0e:	781a      	ldrb	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1a:	1c5a      	adds	r2, r3, #1
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	3b01      	subs	r3, #1
 8004d28:	b29a      	uxth	r2, r3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004d2e:	e025      	b.n	8004d7c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d120      	bne.n	8004d7c <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004d3a:	7bfb      	ldrb	r3, [r7, #15]
 8004d3c:	2b21      	cmp	r3, #33	; 0x21
 8004d3e:	d11d      	bne.n	8004d7c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	685a      	ldr	r2, [r3, #4]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d4e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d5e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2220      	movs	r2, #32
 8004d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f7ff fe3a 	bl	80049f0 <HAL_I2C_MemTxCpltCallback>
}
 8004d7c:	bf00      	nop
 8004d7e:	3710      	adds	r7, #16
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	2b22      	cmp	r3, #34	; 0x22
 8004d96:	f040 80a2 	bne.w	8004ede <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2b03      	cmp	r3, #3
 8004da6:	d921      	bls.n	8004dec <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	691a      	ldr	r2, [r3, #16]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db2:	b2d2      	uxtb	r2, r2
 8004db4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dba:	1c5a      	adds	r2, r3, #1
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	b29a      	uxth	r2, r3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	2b03      	cmp	r3, #3
 8004dd6:	f040 8082 	bne.w	8004ede <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	685a      	ldr	r2, [r3, #4]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004de8:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004dea:	e078      	b.n	8004ede <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	d074      	beq.n	8004ede <I2C_MasterReceive_RXNE+0x15a>
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d002      	beq.n	8004e00 <I2C_MasterReceive_RXNE+0x7c>
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d16e      	bne.n	8004ede <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f001 faf9 	bl	80063f8 <I2C_WaitOnSTOPRequestThroughIT>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d142      	bne.n	8004e92 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e1a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	685a      	ldr	r2, [r3, #4]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004e2a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	691a      	ldr	r2, [r3, #16]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e36:	b2d2      	uxtb	r2, r2
 8004e38:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3e:	1c5a      	adds	r2, r3, #1
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	b29a      	uxth	r2, r3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2220      	movs	r2, #32
 8004e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	2b40      	cmp	r3, #64	; 0x40
 8004e64:	d10a      	bne.n	8004e7c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f7ff fdc4 	bl	8004a02 <HAL_I2C_MemRxCpltCallback>
}
 8004e7a:	e030      	b.n	8004ede <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2212      	movs	r2, #18
 8004e88:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f7ff fd7f 	bl	800498e <HAL_I2C_MasterRxCpltCallback>
}
 8004e90:	e025      	b.n	8004ede <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	685a      	ldr	r2, [r3, #4]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ea0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	691a      	ldr	r2, [r3, #16]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eac:	b2d2      	uxtb	r2, r2
 8004eae:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb4:	1c5a      	adds	r2, r3, #1
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	3b01      	subs	r3, #1
 8004ec2:	b29a      	uxth	r2, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2220      	movs	r2, #32
 8004ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f7ff fd9b 	bl	8004a14 <HAL_I2C_ErrorCallback>
}
 8004ede:	bf00      	nop
 8004ee0:	3710      	adds	r7, #16
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}

08004ee6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004ee6:	b580      	push	{r7, lr}
 8004ee8:	b084      	sub	sp, #16
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	2b04      	cmp	r3, #4
 8004efc:	d11b      	bne.n	8004f36 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	685a      	ldr	r2, [r3, #4]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f0c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	691a      	ldr	r2, [r3, #16]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f18:	b2d2      	uxtb	r2, r2
 8004f1a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f20:	1c5a      	adds	r2, r3, #1
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004f34:	e0bd      	b.n	80050b2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	2b03      	cmp	r3, #3
 8004f3e:	d129      	bne.n	8004f94 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	685a      	ldr	r2, [r3, #4]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f4e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2b04      	cmp	r3, #4
 8004f54:	d00a      	beq.n	8004f6c <I2C_MasterReceive_BTF+0x86>
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	d007      	beq.n	8004f6c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f6a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	691a      	ldr	r2, [r3, #16]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f76:	b2d2      	uxtb	r2, r2
 8004f78:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7e:	1c5a      	adds	r2, r3, #1
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	3b01      	subs	r3, #1
 8004f8c:	b29a      	uxth	r2, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004f92:	e08e      	b.n	80050b2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d176      	bne.n	800508c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d002      	beq.n	8004faa <I2C_MasterReceive_BTF+0xc4>
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2b10      	cmp	r3, #16
 8004fa8:	d108      	bne.n	8004fbc <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fb8:	601a      	str	r2, [r3, #0]
 8004fba:	e019      	b.n	8004ff0 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2b04      	cmp	r3, #4
 8004fc0:	d002      	beq.n	8004fc8 <I2C_MasterReceive_BTF+0xe2>
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d108      	bne.n	8004fda <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004fd6:	601a      	str	r2, [r3, #0]
 8004fd8:	e00a      	b.n	8004ff0 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2b10      	cmp	r3, #16
 8004fde:	d007      	beq.n	8004ff0 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fee:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	691a      	ldr	r2, [r3, #16]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffa:	b2d2      	uxtb	r2, r2
 8004ffc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005002:	1c5a      	adds	r2, r3, #1
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800500c:	b29b      	uxth	r3, r3
 800500e:	3b01      	subs	r3, #1
 8005010:	b29a      	uxth	r2, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	691a      	ldr	r2, [r3, #16]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005020:	b2d2      	uxtb	r2, r2
 8005022:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005028:	1c5a      	adds	r2, r3, #1
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005032:	b29b      	uxth	r3, r3
 8005034:	3b01      	subs	r3, #1
 8005036:	b29a      	uxth	r2, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	685a      	ldr	r2, [r3, #4]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800504a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2220      	movs	r2, #32
 8005050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800505a:	b2db      	uxtb	r3, r3
 800505c:	2b40      	cmp	r3, #64	; 0x40
 800505e:	d10a      	bne.n	8005076 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f7ff fcc7 	bl	8004a02 <HAL_I2C_MemRxCpltCallback>
}
 8005074:	e01d      	b.n	80050b2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2212      	movs	r2, #18
 8005082:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f7ff fc82 	bl	800498e <HAL_I2C_MasterRxCpltCallback>
}
 800508a:	e012      	b.n	80050b2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	691a      	ldr	r2, [r3, #16]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005096:	b2d2      	uxtb	r2, r2
 8005098:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509e:	1c5a      	adds	r2, r3, #1
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	3b01      	subs	r3, #1
 80050ac:	b29a      	uxth	r2, r3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80050b2:	bf00      	nop
 80050b4:	3710      	adds	r7, #16
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}

080050ba <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80050ba:	b480      	push	{r7}
 80050bc:	b083      	sub	sp, #12
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	2b40      	cmp	r3, #64	; 0x40
 80050cc:	d117      	bne.n	80050fe <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d109      	bne.n	80050ea <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	461a      	mov	r2, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80050e6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80050e8:	e067      	b.n	80051ba <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	f043 0301 	orr.w	r3, r3, #1
 80050f4:	b2da      	uxtb	r2, r3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	611a      	str	r2, [r3, #16]
}
 80050fc:	e05d      	b.n	80051ba <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005106:	d133      	bne.n	8005170 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800510e:	b2db      	uxtb	r3, r3
 8005110:	2b21      	cmp	r3, #33	; 0x21
 8005112:	d109      	bne.n	8005128 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005118:	b2db      	uxtb	r3, r3
 800511a:	461a      	mov	r2, r3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005124:	611a      	str	r2, [r3, #16]
 8005126:	e008      	b.n	800513a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800512c:	b2db      	uxtb	r3, r3
 800512e:	f043 0301 	orr.w	r3, r3, #1
 8005132:	b2da      	uxtb	r2, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800513e:	2b00      	cmp	r3, #0
 8005140:	d004      	beq.n	800514c <I2C_Master_SB+0x92>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005148:	2b00      	cmp	r3, #0
 800514a:	d108      	bne.n	800515e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005150:	2b00      	cmp	r3, #0
 8005152:	d032      	beq.n	80051ba <I2C_Master_SB+0x100>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800515a:	2b00      	cmp	r3, #0
 800515c:	d02d      	beq.n	80051ba <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	685a      	ldr	r2, [r3, #4]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800516c:	605a      	str	r2, [r3, #4]
}
 800516e:	e024      	b.n	80051ba <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005174:	2b00      	cmp	r3, #0
 8005176:	d10e      	bne.n	8005196 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800517c:	b29b      	uxth	r3, r3
 800517e:	11db      	asrs	r3, r3, #7
 8005180:	b2db      	uxtb	r3, r3
 8005182:	f003 0306 	and.w	r3, r3, #6
 8005186:	b2db      	uxtb	r3, r3
 8005188:	f063 030f 	orn	r3, r3, #15
 800518c:	b2da      	uxtb	r2, r3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	611a      	str	r2, [r3, #16]
}
 8005194:	e011      	b.n	80051ba <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800519a:	2b01      	cmp	r3, #1
 800519c:	d10d      	bne.n	80051ba <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	11db      	asrs	r3, r3, #7
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	f003 0306 	and.w	r3, r3, #6
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	f063 030e 	orn	r3, r3, #14
 80051b2:	b2da      	uxtb	r2, r3
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	611a      	str	r2, [r3, #16]
}
 80051ba:	bf00      	nop
 80051bc:	370c      	adds	r7, #12
 80051be:	46bd      	mov	sp, r7
 80051c0:	bc80      	pop	{r7}
 80051c2:	4770      	bx	lr

080051c4 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051d0:	b2da      	uxtb	r2, r3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d004      	beq.n	80051ea <I2C_Master_ADD10+0x26>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d108      	bne.n	80051fc <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d00c      	beq.n	800520c <I2C_Master_ADD10+0x48>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d007      	beq.n	800520c <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	685a      	ldr	r2, [r3, #4]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800520a:	605a      	str	r2, [r3, #4]
  }
}
 800520c:	bf00      	nop
 800520e:	370c      	adds	r7, #12
 8005210:	46bd      	mov	sp, r7
 8005212:	bc80      	pop	{r7}
 8005214:	4770      	bx	lr

08005216 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005216:	b480      	push	{r7}
 8005218:	b091      	sub	sp, #68	; 0x44
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005224:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800522c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005232:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800523a:	b2db      	uxtb	r3, r3
 800523c:	2b22      	cmp	r3, #34	; 0x22
 800523e:	f040 8174 	bne.w	800552a <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005246:	2b00      	cmp	r3, #0
 8005248:	d10f      	bne.n	800526a <I2C_Master_ADDR+0x54>
 800524a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800524e:	2b40      	cmp	r3, #64	; 0x40
 8005250:	d10b      	bne.n	800526a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005252:	2300      	movs	r3, #0
 8005254:	633b      	str	r3, [r7, #48]	; 0x30
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	695b      	ldr	r3, [r3, #20]
 800525c:	633b      	str	r3, [r7, #48]	; 0x30
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	699b      	ldr	r3, [r3, #24]
 8005264:	633b      	str	r3, [r7, #48]	; 0x30
 8005266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005268:	e16b      	b.n	8005542 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800526e:	2b00      	cmp	r3, #0
 8005270:	d11d      	bne.n	80052ae <I2C_Master_ADDR+0x98>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800527a:	d118      	bne.n	80052ae <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800527c:	2300      	movs	r3, #0
 800527e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	695b      	ldr	r3, [r3, #20]
 8005286:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	699b      	ldr	r3, [r3, #24]
 800528e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005290:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052a0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052a6:	1c5a      	adds	r2, r3, #1
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	651a      	str	r2, [r3, #80]	; 0x50
 80052ac:	e149      	b.n	8005542 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d113      	bne.n	80052e0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052b8:	2300      	movs	r3, #0
 80052ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	695b      	ldr	r3, [r3, #20]
 80052c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	699b      	ldr	r3, [r3, #24]
 80052ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80052cc:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052dc:	601a      	str	r2, [r3, #0]
 80052de:	e120      	b.n	8005522 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	f040 808a 	bne.w	8005400 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80052ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80052f2:	d137      	bne.n	8005364 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005302:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800530e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005312:	d113      	bne.n	800533c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005322:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005324:	2300      	movs	r3, #0
 8005326:	627b      	str	r3, [r7, #36]	; 0x24
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	695b      	ldr	r3, [r3, #20]
 800532e:	627b      	str	r3, [r7, #36]	; 0x24
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	699b      	ldr	r3, [r3, #24]
 8005336:	627b      	str	r3, [r7, #36]	; 0x24
 8005338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533a:	e0f2      	b.n	8005522 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800533c:	2300      	movs	r3, #0
 800533e:	623b      	str	r3, [r7, #32]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	695b      	ldr	r3, [r3, #20]
 8005346:	623b      	str	r3, [r7, #32]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	699b      	ldr	r3, [r3, #24]
 800534e:	623b      	str	r3, [r7, #32]
 8005350:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005360:	601a      	str	r2, [r3, #0]
 8005362:	e0de      	b.n	8005522 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005366:	2b08      	cmp	r3, #8
 8005368:	d02e      	beq.n	80053c8 <I2C_Master_ADDR+0x1b2>
 800536a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800536c:	2b20      	cmp	r3, #32
 800536e:	d02b      	beq.n	80053c8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005372:	2b12      	cmp	r3, #18
 8005374:	d102      	bne.n	800537c <I2C_Master_ADDR+0x166>
 8005376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005378:	2b01      	cmp	r3, #1
 800537a:	d125      	bne.n	80053c8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800537c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800537e:	2b04      	cmp	r3, #4
 8005380:	d00e      	beq.n	80053a0 <I2C_Master_ADDR+0x18a>
 8005382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005384:	2b02      	cmp	r3, #2
 8005386:	d00b      	beq.n	80053a0 <I2C_Master_ADDR+0x18a>
 8005388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800538a:	2b10      	cmp	r3, #16
 800538c:	d008      	beq.n	80053a0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800539c:	601a      	str	r2, [r3, #0]
 800539e:	e007      	b.n	80053b0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80053ae:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053b0:	2300      	movs	r3, #0
 80053b2:	61fb      	str	r3, [r7, #28]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	695b      	ldr	r3, [r3, #20]
 80053ba:	61fb      	str	r3, [r7, #28]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	699b      	ldr	r3, [r3, #24]
 80053c2:	61fb      	str	r3, [r7, #28]
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	e0ac      	b.n	8005522 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053d6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053d8:	2300      	movs	r3, #0
 80053da:	61bb      	str	r3, [r7, #24]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	695b      	ldr	r3, [r3, #20]
 80053e2:	61bb      	str	r3, [r7, #24]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	699b      	ldr	r3, [r3, #24]
 80053ea:	61bb      	str	r3, [r7, #24]
 80053ec:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053fc:	601a      	str	r2, [r3, #0]
 80053fe:	e090      	b.n	8005522 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005404:	b29b      	uxth	r3, r3
 8005406:	2b02      	cmp	r3, #2
 8005408:	d158      	bne.n	80054bc <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800540a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800540c:	2b04      	cmp	r3, #4
 800540e:	d021      	beq.n	8005454 <I2C_Master_ADDR+0x23e>
 8005410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005412:	2b02      	cmp	r3, #2
 8005414:	d01e      	beq.n	8005454 <I2C_Master_ADDR+0x23e>
 8005416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005418:	2b10      	cmp	r3, #16
 800541a:	d01b      	beq.n	8005454 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800542a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800542c:	2300      	movs	r3, #0
 800542e:	617b      	str	r3, [r7, #20]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	695b      	ldr	r3, [r3, #20]
 8005436:	617b      	str	r3, [r7, #20]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	699b      	ldr	r3, [r3, #24]
 800543e:	617b      	str	r3, [r7, #20]
 8005440:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005450:	601a      	str	r2, [r3, #0]
 8005452:	e012      	b.n	800547a <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005462:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005464:	2300      	movs	r3, #0
 8005466:	613b      	str	r3, [r7, #16]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	695b      	ldr	r3, [r3, #20]
 800546e:	613b      	str	r3, [r7, #16]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	699b      	ldr	r3, [r3, #24]
 8005476:	613b      	str	r3, [r7, #16]
 8005478:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005484:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005488:	d14b      	bne.n	8005522 <I2C_Master_ADDR+0x30c>
 800548a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800548c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005490:	d00b      	beq.n	80054aa <I2C_Master_ADDR+0x294>
 8005492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005494:	2b01      	cmp	r3, #1
 8005496:	d008      	beq.n	80054aa <I2C_Master_ADDR+0x294>
 8005498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800549a:	2b08      	cmp	r3, #8
 800549c:	d005      	beq.n	80054aa <I2C_Master_ADDR+0x294>
 800549e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a0:	2b10      	cmp	r3, #16
 80054a2:	d002      	beq.n	80054aa <I2C_Master_ADDR+0x294>
 80054a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a6:	2b20      	cmp	r3, #32
 80054a8:	d13b      	bne.n	8005522 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	685a      	ldr	r2, [r3, #4]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80054b8:	605a      	str	r2, [r3, #4]
 80054ba:	e032      	b.n	8005522 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80054ca:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054da:	d117      	bne.n	800550c <I2C_Master_ADDR+0x2f6>
 80054dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054de:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80054e2:	d00b      	beq.n	80054fc <I2C_Master_ADDR+0x2e6>
 80054e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d008      	beq.n	80054fc <I2C_Master_ADDR+0x2e6>
 80054ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ec:	2b08      	cmp	r3, #8
 80054ee:	d005      	beq.n	80054fc <I2C_Master_ADDR+0x2e6>
 80054f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f2:	2b10      	cmp	r3, #16
 80054f4:	d002      	beq.n	80054fc <I2C_Master_ADDR+0x2e6>
 80054f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f8:	2b20      	cmp	r3, #32
 80054fa:	d107      	bne.n	800550c <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	685a      	ldr	r2, [r3, #4]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800550a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800550c:	2300      	movs	r3, #0
 800550e:	60fb      	str	r3, [r7, #12]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	695b      	ldr	r3, [r3, #20]
 8005516:	60fb      	str	r3, [r7, #12]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	699b      	ldr	r3, [r3, #24]
 800551e:	60fb      	str	r3, [r7, #12]
 8005520:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005528:	e00b      	b.n	8005542 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800552a:	2300      	movs	r3, #0
 800552c:	60bb      	str	r3, [r7, #8]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	695b      	ldr	r3, [r3, #20]
 8005534:	60bb      	str	r3, [r7, #8]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	699b      	ldr	r3, [r3, #24]
 800553c:	60bb      	str	r3, [r7, #8]
 800553e:	68bb      	ldr	r3, [r7, #8]
}
 8005540:	e7ff      	b.n	8005542 <I2C_Master_ADDR+0x32c>
 8005542:	bf00      	nop
 8005544:	3744      	adds	r7, #68	; 0x44
 8005546:	46bd      	mov	sp, r7
 8005548:	bc80      	pop	{r7}
 800554a:	4770      	bx	lr

0800554c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800555a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005560:	b29b      	uxth	r3, r3
 8005562:	2b00      	cmp	r3, #0
 8005564:	d02b      	beq.n	80055be <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556a:	781a      	ldrb	r2, [r3, #0]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005576:	1c5a      	adds	r2, r3, #1
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005580:	b29b      	uxth	r3, r3
 8005582:	3b01      	subs	r3, #1
 8005584:	b29a      	uxth	r2, r3
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800558e:	b29b      	uxth	r3, r3
 8005590:	2b00      	cmp	r3, #0
 8005592:	d114      	bne.n	80055be <I2C_SlaveTransmit_TXE+0x72>
 8005594:	7bfb      	ldrb	r3, [r7, #15]
 8005596:	2b29      	cmp	r3, #41	; 0x29
 8005598:	d111      	bne.n	80055be <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	685a      	ldr	r2, [r3, #4]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055a8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2221      	movs	r2, #33	; 0x21
 80055ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2228      	movs	r2, #40	; 0x28
 80055b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f7ff f9f1 	bl	80049a0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80055be:	bf00      	nop
 80055c0:	3710      	adds	r7, #16
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}

080055c6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80055c6:	b480      	push	{r7}
 80055c8:	b083      	sub	sp, #12
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d011      	beq.n	80055fc <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055dc:	781a      	ldrb	r2, [r3, #0]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e8:	1c5a      	adds	r2, r3, #1
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	3b01      	subs	r3, #1
 80055f6:	b29a      	uxth	r2, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80055fc:	bf00      	nop
 80055fe:	370c      	adds	r7, #12
 8005600:	46bd      	mov	sp, r7
 8005602:	bc80      	pop	{r7}
 8005604:	4770      	bx	lr

08005606 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005606:	b580      	push	{r7, lr}
 8005608:	b084      	sub	sp, #16
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005614:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800561a:	b29b      	uxth	r3, r3
 800561c:	2b00      	cmp	r3, #0
 800561e:	d02c      	beq.n	800567a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	691a      	ldr	r2, [r3, #16]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562a:	b2d2      	uxtb	r2, r2
 800562c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005632:	1c5a      	adds	r2, r3, #1
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800563c:	b29b      	uxth	r3, r3
 800563e:	3b01      	subs	r3, #1
 8005640:	b29a      	uxth	r2, r3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800564a:	b29b      	uxth	r3, r3
 800564c:	2b00      	cmp	r3, #0
 800564e:	d114      	bne.n	800567a <I2C_SlaveReceive_RXNE+0x74>
 8005650:	7bfb      	ldrb	r3, [r7, #15]
 8005652:	2b2a      	cmp	r3, #42	; 0x2a
 8005654:	d111      	bne.n	800567a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	685a      	ldr	r2, [r3, #4]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005664:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2222      	movs	r2, #34	; 0x22
 800566a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2228      	movs	r2, #40	; 0x28
 8005670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f7ff f99c 	bl	80049b2 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800567a:	bf00      	nop
 800567c:	3710      	adds	r7, #16
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}

08005682 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005682:	b480      	push	{r7}
 8005684:	b083      	sub	sp, #12
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800568e:	b29b      	uxth	r3, r3
 8005690:	2b00      	cmp	r3, #0
 8005692:	d012      	beq.n	80056ba <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	691a      	ldr	r2, [r3, #16]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569e:	b2d2      	uxtb	r2, r2
 80056a0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a6:	1c5a      	adds	r2, r3, #1
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	3b01      	subs	r3, #1
 80056b4:	b29a      	uxth	r2, r3
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80056ba:	bf00      	nop
 80056bc:	370c      	adds	r7, #12
 80056be:	46bd      	mov	sp, r7
 80056c0:	bc80      	pop	{r7}
 80056c2:	4770      	bx	lr

080056c4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80056ce:	2300      	movs	r3, #0
 80056d0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80056de:	2b28      	cmp	r3, #40	; 0x28
 80056e0:	d127      	bne.n	8005732 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	685a      	ldr	r2, [r3, #4]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056f0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	089b      	lsrs	r3, r3, #2
 80056f6:	f003 0301 	and.w	r3, r3, #1
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d101      	bne.n	8005702 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80056fe:	2301      	movs	r3, #1
 8005700:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	09db      	lsrs	r3, r3, #7
 8005706:	f003 0301 	and.w	r3, r3, #1
 800570a:	2b00      	cmp	r3, #0
 800570c:	d103      	bne.n	8005716 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	81bb      	strh	r3, [r7, #12]
 8005714:	e002      	b.n	800571c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	699b      	ldr	r3, [r3, #24]
 800571a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005724:	89ba      	ldrh	r2, [r7, #12]
 8005726:	7bfb      	ldrb	r3, [r7, #15]
 8005728:	4619      	mov	r1, r3
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f7ff f94a 	bl	80049c4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005730:	e00e      	b.n	8005750 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005732:	2300      	movs	r3, #0
 8005734:	60bb      	str	r3, [r7, #8]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	695b      	ldr	r3, [r3, #20]
 800573c:	60bb      	str	r3, [r7, #8]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	699b      	ldr	r3, [r3, #24]
 8005744:	60bb      	str	r3, [r7, #8]
 8005746:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005750:	bf00      	nop
 8005752:	3710      	adds	r7, #16
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005766:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	685a      	ldr	r2, [r3, #4]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005776:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005778:	2300      	movs	r3, #0
 800577a:	60bb      	str	r3, [r7, #8]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	695b      	ldr	r3, [r3, #20]
 8005782:	60bb      	str	r3, [r7, #8]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f042 0201 	orr.w	r2, r2, #1
 8005792:	601a      	str	r2, [r3, #0]
 8005794:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057a4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057b4:	d172      	bne.n	800589c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80057b6:	7bfb      	ldrb	r3, [r7, #15]
 80057b8:	2b22      	cmp	r3, #34	; 0x22
 80057ba:	d002      	beq.n	80057c2 <I2C_Slave_STOPF+0x6a>
 80057bc:	7bfb      	ldrb	r3, [r7, #15]
 80057be:	2b2a      	cmp	r3, #42	; 0x2a
 80057c0:	d135      	bne.n	800582e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	b29a      	uxth	r2, r3
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d005      	beq.n	80057e6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057de:	f043 0204 	orr.w	r2, r3, #4
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	685a      	ldr	r2, [r3, #4]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057f4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057fa:	4618      	mov	r0, r3
 80057fc:	f7fe f838 	bl	8003870 <HAL_DMA_GetState>
 8005800:	4603      	mov	r3, r0
 8005802:	2b01      	cmp	r3, #1
 8005804:	d049      	beq.n	800589a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800580a:	4a69      	ldr	r2, [pc, #420]	; (80059b0 <I2C_Slave_STOPF+0x258>)
 800580c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005812:	4618      	mov	r0, r3
 8005814:	f7fd ffb6 	bl	8003784 <HAL_DMA_Abort_IT>
 8005818:	4603      	mov	r3, r0
 800581a:	2b00      	cmp	r3, #0
 800581c:	d03d      	beq.n	800589a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005828:	4610      	mov	r0, r2
 800582a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800582c:	e035      	b.n	800589a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	b29a      	uxth	r2, r3
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005840:	b29b      	uxth	r3, r3
 8005842:	2b00      	cmp	r3, #0
 8005844:	d005      	beq.n	8005852 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584a:	f043 0204 	orr.w	r2, r3, #4
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	685a      	ldr	r2, [r3, #4]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005860:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005866:	4618      	mov	r0, r3
 8005868:	f7fe f802 	bl	8003870 <HAL_DMA_GetState>
 800586c:	4603      	mov	r3, r0
 800586e:	2b01      	cmp	r3, #1
 8005870:	d014      	beq.n	800589c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005876:	4a4e      	ldr	r2, [pc, #312]	; (80059b0 <I2C_Slave_STOPF+0x258>)
 8005878:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800587e:	4618      	mov	r0, r3
 8005880:	f7fd ff80 	bl	8003784 <HAL_DMA_Abort_IT>
 8005884:	4603      	mov	r3, r0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d008      	beq.n	800589c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800588e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005894:	4610      	mov	r0, r2
 8005896:	4798      	blx	r3
 8005898:	e000      	b.n	800589c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800589a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d03e      	beq.n	8005924 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	695b      	ldr	r3, [r3, #20]
 80058ac:	f003 0304 	and.w	r3, r3, #4
 80058b0:	2b04      	cmp	r3, #4
 80058b2:	d112      	bne.n	80058da <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	691a      	ldr	r2, [r3, #16]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058be:	b2d2      	uxtb	r2, r2
 80058c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c6:	1c5a      	adds	r2, r3, #1
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	3b01      	subs	r3, #1
 80058d4:	b29a      	uxth	r2, r3
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	695b      	ldr	r3, [r3, #20]
 80058e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058e4:	2b40      	cmp	r3, #64	; 0x40
 80058e6:	d112      	bne.n	800590e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	691a      	ldr	r2, [r3, #16]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f2:	b2d2      	uxtb	r2, r2
 80058f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fa:	1c5a      	adds	r2, r3, #1
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005904:	b29b      	uxth	r3, r3
 8005906:	3b01      	subs	r3, #1
 8005908:	b29a      	uxth	r2, r3
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005912:	b29b      	uxth	r3, r3
 8005914:	2b00      	cmp	r3, #0
 8005916:	d005      	beq.n	8005924 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591c:	f043 0204 	orr.w	r2, r3, #4
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005928:	2b00      	cmp	r3, #0
 800592a:	d003      	beq.n	8005934 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f000 f8b3 	bl	8005a98 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005932:	e039      	b.n	80059a8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005934:	7bfb      	ldrb	r3, [r7, #15]
 8005936:	2b2a      	cmp	r3, #42	; 0x2a
 8005938:	d109      	bne.n	800594e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2228      	movs	r2, #40	; 0x28
 8005944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f7ff f832 	bl	80049b2 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005954:	b2db      	uxtb	r3, r3
 8005956:	2b28      	cmp	r3, #40	; 0x28
 8005958:	d111      	bne.n	800597e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4a15      	ldr	r2, [pc, #84]	; (80059b4 <I2C_Slave_STOPF+0x25c>)
 800595e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2220      	movs	r2, #32
 800596a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f7ff f831 	bl	80049de <HAL_I2C_ListenCpltCallback>
}
 800597c:	e014      	b.n	80059a8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005982:	2b22      	cmp	r3, #34	; 0x22
 8005984:	d002      	beq.n	800598c <I2C_Slave_STOPF+0x234>
 8005986:	7bfb      	ldrb	r3, [r7, #15]
 8005988:	2b22      	cmp	r3, #34	; 0x22
 800598a:	d10d      	bne.n	80059a8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2220      	movs	r2, #32
 8005996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f7ff f805 	bl	80049b2 <HAL_I2C_SlaveRxCpltCallback>
}
 80059a8:	bf00      	nop
 80059aa:	3710      	adds	r7, #16
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}
 80059b0:	08005ff9 	.word	0x08005ff9
 80059b4:	ffff0000 	.word	0xffff0000

080059b8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059c6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059cc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	2b08      	cmp	r3, #8
 80059d2:	d002      	beq.n	80059da <I2C_Slave_AF+0x22>
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	2b20      	cmp	r3, #32
 80059d8:	d129      	bne.n	8005a2e <I2C_Slave_AF+0x76>
 80059da:	7bfb      	ldrb	r3, [r7, #15]
 80059dc:	2b28      	cmp	r3, #40	; 0x28
 80059de:	d126      	bne.n	8005a2e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a2c      	ldr	r2, [pc, #176]	; (8005a94 <I2C_Slave_AF+0xdc>)
 80059e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	685a      	ldr	r2, [r3, #4]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80059f4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80059fe:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a0e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2220      	movs	r2, #32
 8005a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f7fe ffd9 	bl	80049de <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005a2c:	e02e      	b.n	8005a8c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005a2e:	7bfb      	ldrb	r3, [r7, #15]
 8005a30:	2b21      	cmp	r3, #33	; 0x21
 8005a32:	d126      	bne.n	8005a82 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4a17      	ldr	r2, [pc, #92]	; (8005a94 <I2C_Slave_AF+0xdc>)
 8005a38:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2221      	movs	r2, #33	; 0x21
 8005a3e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2220      	movs	r2, #32
 8005a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	685a      	ldr	r2, [r3, #4]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005a5e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a68:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a78:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f7fe ff90 	bl	80049a0 <HAL_I2C_SlaveTxCpltCallback>
}
 8005a80:	e004      	b.n	8005a8c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a8a:	615a      	str	r2, [r3, #20]
}
 8005a8c:	bf00      	nop
 8005a8e:	3710      	adds	r7, #16
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	ffff0000 	.word	0xffff0000

08005a98 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b084      	sub	sp, #16
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aa6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005aae:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005ab0:	7bbb      	ldrb	r3, [r7, #14]
 8005ab2:	2b10      	cmp	r3, #16
 8005ab4:	d002      	beq.n	8005abc <I2C_ITError+0x24>
 8005ab6:	7bbb      	ldrb	r3, [r7, #14]
 8005ab8:	2b40      	cmp	r3, #64	; 0x40
 8005aba:	d10a      	bne.n	8005ad2 <I2C_ITError+0x3a>
 8005abc:	7bfb      	ldrb	r3, [r7, #15]
 8005abe:	2b22      	cmp	r3, #34	; 0x22
 8005ac0:	d107      	bne.n	8005ad2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ad0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005ad2:	7bfb      	ldrb	r3, [r7, #15]
 8005ad4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005ad8:	2b28      	cmp	r3, #40	; 0x28
 8005ada:	d107      	bne.n	8005aec <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2228      	movs	r2, #40	; 0x28
 8005ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005aea:	e015      	b.n	8005b18 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005af6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005afa:	d00a      	beq.n	8005b12 <I2C_ITError+0x7a>
 8005afc:	7bfb      	ldrb	r3, [r7, #15]
 8005afe:	2b60      	cmp	r3, #96	; 0x60
 8005b00:	d007      	beq.n	8005b12 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2220      	movs	r2, #32
 8005b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b26:	d161      	bne.n	8005bec <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	685a      	ldr	r2, [r3, #4]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b36:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b3c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d020      	beq.n	8005b86 <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b48:	4a6a      	ldr	r2, [pc, #424]	; (8005cf4 <I2C_ITError+0x25c>)
 8005b4a:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b50:	4618      	mov	r0, r3
 8005b52:	f7fd fe17 	bl	8003784 <HAL_DMA_Abort_IT>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	f000 8089 	beq.w	8005c70 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f022 0201 	bic.w	r2, r2, #1
 8005b6c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2220      	movs	r2, #32
 8005b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b7c:	687a      	ldr	r2, [r7, #4]
 8005b7e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005b80:	4610      	mov	r0, r2
 8005b82:	4798      	blx	r3
 8005b84:	e074      	b.n	8005c70 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b8a:	4a5a      	ldr	r2, [pc, #360]	; (8005cf4 <I2C_ITError+0x25c>)
 8005b8c:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b92:	4618      	mov	r0, r3
 8005b94:	f7fd fdf6 	bl	8003784 <HAL_DMA_Abort_IT>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d068      	beq.n	8005c70 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	695b      	ldr	r3, [r3, #20]
 8005ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ba8:	2b40      	cmp	r3, #64	; 0x40
 8005baa:	d10b      	bne.n	8005bc4 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	691a      	ldr	r2, [r3, #16]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb6:	b2d2      	uxtb	r2, r2
 8005bb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bbe:	1c5a      	adds	r2, r3, #1
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f022 0201 	bic.w	r2, r2, #1
 8005bd2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2220      	movs	r2, #32
 8005bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005be6:	4610      	mov	r0, r2
 8005be8:	4798      	blx	r3
 8005bea:	e041      	b.n	8005c70 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	2b60      	cmp	r3, #96	; 0x60
 8005bf6:	d125      	bne.n	8005c44 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2220      	movs	r2, #32
 8005bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	695b      	ldr	r3, [r3, #20]
 8005c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c10:	2b40      	cmp	r3, #64	; 0x40
 8005c12:	d10b      	bne.n	8005c2c <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	691a      	ldr	r2, [r3, #16]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1e:	b2d2      	uxtb	r2, r2
 8005c20:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c26:	1c5a      	adds	r2, r3, #1
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f022 0201 	bic.w	r2, r2, #1
 8005c3a:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f7fe fef2 	bl	8004a26 <HAL_I2C_AbortCpltCallback>
 8005c42:	e015      	b.n	8005c70 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	695b      	ldr	r3, [r3, #20]
 8005c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c4e:	2b40      	cmp	r3, #64	; 0x40
 8005c50:	d10b      	bne.n	8005c6a <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	691a      	ldr	r2, [r3, #16]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5c:	b2d2      	uxtb	r2, r2
 8005c5e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c64:	1c5a      	adds	r2, r3, #1
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f7fe fed2 	bl	8004a14 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c74:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	f003 0301 	and.w	r3, r3, #1
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d10e      	bne.n	8005c9e <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d109      	bne.n	8005c9e <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d104      	bne.n	8005c9e <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d007      	beq.n	8005cae <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	685a      	ldr	r2, [r3, #4]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005cac:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cb4:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cba:	f003 0304 	and.w	r3, r3, #4
 8005cbe:	2b04      	cmp	r3, #4
 8005cc0:	d113      	bne.n	8005cea <I2C_ITError+0x252>
 8005cc2:	7bfb      	ldrb	r3, [r7, #15]
 8005cc4:	2b28      	cmp	r3, #40	; 0x28
 8005cc6:	d110      	bne.n	8005cea <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4a0b      	ldr	r2, [pc, #44]	; (8005cf8 <I2C_ITError+0x260>)
 8005ccc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2220      	movs	r2, #32
 8005cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f7fe fe7a 	bl	80049de <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005cea:	bf00      	nop
 8005cec:	3710      	adds	r7, #16
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	bf00      	nop
 8005cf4:	08005ff9 	.word	0x08005ff9
 8005cf8:	ffff0000 	.word	0xffff0000

08005cfc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b088      	sub	sp, #32
 8005d00:	af02      	add	r7, sp, #8
 8005d02:	60f8      	str	r0, [r7, #12]
 8005d04:	4608      	mov	r0, r1
 8005d06:	4611      	mov	r1, r2
 8005d08:	461a      	mov	r2, r3
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	817b      	strh	r3, [r7, #10]
 8005d0e:	460b      	mov	r3, r1
 8005d10:	813b      	strh	r3, [r7, #8]
 8005d12:	4613      	mov	r3, r2
 8005d14:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d24:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d28:	9300      	str	r3, [sp, #0]
 8005d2a:	6a3b      	ldr	r3, [r7, #32]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d32:	68f8      	ldr	r0, [r7, #12]
 8005d34:	f000 fa08 	bl	8006148 <I2C_WaitOnFlagUntilTimeout>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d00d      	beq.n	8005d5a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d4c:	d103      	bne.n	8005d56 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d54:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005d56:	2303      	movs	r3, #3
 8005d58:	e05f      	b.n	8005e1a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005d5a:	897b      	ldrh	r3, [r7, #10]
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	461a      	mov	r2, r3
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005d68:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6c:	6a3a      	ldr	r2, [r7, #32]
 8005d6e:	492d      	ldr	r1, [pc, #180]	; (8005e24 <I2C_RequestMemoryWrite+0x128>)
 8005d70:	68f8      	ldr	r0, [r7, #12]
 8005d72:	f000 fa40 	bl	80061f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d76:	4603      	mov	r3, r0
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d001      	beq.n	8005d80 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e04c      	b.n	8005e1a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d80:	2300      	movs	r3, #0
 8005d82:	617b      	str	r3, [r7, #20]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	695b      	ldr	r3, [r3, #20]
 8005d8a:	617b      	str	r3, [r7, #20]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	699b      	ldr	r3, [r3, #24]
 8005d92:	617b      	str	r3, [r7, #20]
 8005d94:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d98:	6a39      	ldr	r1, [r7, #32]
 8005d9a:	68f8      	ldr	r0, [r7, #12]
 8005d9c:	f000 faaa 	bl	80062f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d00d      	beq.n	8005dc2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005daa:	2b04      	cmp	r3, #4
 8005dac:	d107      	bne.n	8005dbe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dbc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e02b      	b.n	8005e1a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005dc2:	88fb      	ldrh	r3, [r7, #6]
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d105      	bne.n	8005dd4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005dc8:	893b      	ldrh	r3, [r7, #8]
 8005dca:	b2da      	uxtb	r2, r3
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	611a      	str	r2, [r3, #16]
 8005dd2:	e021      	b.n	8005e18 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005dd4:	893b      	ldrh	r3, [r7, #8]
 8005dd6:	0a1b      	lsrs	r3, r3, #8
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	b2da      	uxtb	r2, r3
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005de2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005de4:	6a39      	ldr	r1, [r7, #32]
 8005de6:	68f8      	ldr	r0, [r7, #12]
 8005de8:	f000 fa84 	bl	80062f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d00d      	beq.n	8005e0e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df6:	2b04      	cmp	r3, #4
 8005df8:	d107      	bne.n	8005e0a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e08:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e005      	b.n	8005e1a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e0e:	893b      	ldrh	r3, [r7, #8]
 8005e10:	b2da      	uxtb	r2, r3
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3718      	adds	r7, #24
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	00010002 	.word	0x00010002

08005e28 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b088      	sub	sp, #32
 8005e2c:	af02      	add	r7, sp, #8
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	4608      	mov	r0, r1
 8005e32:	4611      	mov	r1, r2
 8005e34:	461a      	mov	r2, r3
 8005e36:	4603      	mov	r3, r0
 8005e38:	817b      	strh	r3, [r7, #10]
 8005e3a:	460b      	mov	r3, r1
 8005e3c:	813b      	strh	r3, [r7, #8]
 8005e3e:	4613      	mov	r3, r2
 8005e40:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e50:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e60:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e64:	9300      	str	r3, [sp, #0]
 8005e66:	6a3b      	ldr	r3, [r7, #32]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e6e:	68f8      	ldr	r0, [r7, #12]
 8005e70:	f000 f96a 	bl	8006148 <I2C_WaitOnFlagUntilTimeout>
 8005e74:	4603      	mov	r3, r0
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d00d      	beq.n	8005e96 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e88:	d103      	bne.n	8005e92 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e90:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005e92:	2303      	movs	r3, #3
 8005e94:	e0aa      	b.n	8005fec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005e96:	897b      	ldrh	r3, [r7, #10]
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005ea4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea8:	6a3a      	ldr	r2, [r7, #32]
 8005eaa:	4952      	ldr	r1, [pc, #328]	; (8005ff4 <I2C_RequestMemoryRead+0x1cc>)
 8005eac:	68f8      	ldr	r0, [r7, #12]
 8005eae:	f000 f9a2 	bl	80061f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d001      	beq.n	8005ebc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e097      	b.n	8005fec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	617b      	str	r3, [r7, #20]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	695b      	ldr	r3, [r3, #20]
 8005ec6:	617b      	str	r3, [r7, #20]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	699b      	ldr	r3, [r3, #24]
 8005ece:	617b      	str	r3, [r7, #20]
 8005ed0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ed2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ed4:	6a39      	ldr	r1, [r7, #32]
 8005ed6:	68f8      	ldr	r0, [r7, #12]
 8005ed8:	f000 fa0c 	bl	80062f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005edc:	4603      	mov	r3, r0
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d00d      	beq.n	8005efe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee6:	2b04      	cmp	r3, #4
 8005ee8:	d107      	bne.n	8005efa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ef8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	e076      	b.n	8005fec <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005efe:	88fb      	ldrh	r3, [r7, #6]
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d105      	bne.n	8005f10 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f04:	893b      	ldrh	r3, [r7, #8]
 8005f06:	b2da      	uxtb	r2, r3
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	611a      	str	r2, [r3, #16]
 8005f0e:	e021      	b.n	8005f54 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005f10:	893b      	ldrh	r3, [r7, #8]
 8005f12:	0a1b      	lsrs	r3, r3, #8
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	b2da      	uxtb	r2, r3
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f20:	6a39      	ldr	r1, [r7, #32]
 8005f22:	68f8      	ldr	r0, [r7, #12]
 8005f24:	f000 f9e6 	bl	80062f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00d      	beq.n	8005f4a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f32:	2b04      	cmp	r3, #4
 8005f34:	d107      	bne.n	8005f46 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f44:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	e050      	b.n	8005fec <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f4a:	893b      	ldrh	r3, [r7, #8]
 8005f4c:	b2da      	uxtb	r2, r3
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f56:	6a39      	ldr	r1, [r7, #32]
 8005f58:	68f8      	ldr	r0, [r7, #12]
 8005f5a:	f000 f9cb 	bl	80062f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d00d      	beq.n	8005f80 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f68:	2b04      	cmp	r3, #4
 8005f6a:	d107      	bne.n	8005f7c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f7a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e035      	b.n	8005fec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f8e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f92:	9300      	str	r3, [sp, #0]
 8005f94:	6a3b      	ldr	r3, [r7, #32]
 8005f96:	2200      	movs	r2, #0
 8005f98:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005f9c:	68f8      	ldr	r0, [r7, #12]
 8005f9e:	f000 f8d3 	bl	8006148 <I2C_WaitOnFlagUntilTimeout>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d00d      	beq.n	8005fc4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fb6:	d103      	bne.n	8005fc0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fbe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005fc0:	2303      	movs	r3, #3
 8005fc2:	e013      	b.n	8005fec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005fc4:	897b      	ldrh	r3, [r7, #10]
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	f043 0301 	orr.w	r3, r3, #1
 8005fcc:	b2da      	uxtb	r2, r3
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd6:	6a3a      	ldr	r2, [r7, #32]
 8005fd8:	4906      	ldr	r1, [pc, #24]	; (8005ff4 <I2C_RequestMemoryRead+0x1cc>)
 8005fda:	68f8      	ldr	r0, [r7, #12]
 8005fdc:	f000 f90b 	bl	80061f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d001      	beq.n	8005fea <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	e000      	b.n	8005fec <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005fea:	2300      	movs	r3, #0
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3718      	adds	r7, #24
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}
 8005ff4:	00010002 	.word	0x00010002

08005ff8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b086      	sub	sp, #24
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006000:	2300      	movs	r3, #0
 8006002:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006008:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006010:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006012:	4b4b      	ldr	r3, [pc, #300]	; (8006140 <I2C_DMAAbort+0x148>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	08db      	lsrs	r3, r3, #3
 8006018:	4a4a      	ldr	r2, [pc, #296]	; (8006144 <I2C_DMAAbort+0x14c>)
 800601a:	fba2 2303 	umull	r2, r3, r2, r3
 800601e:	0a1a      	lsrs	r2, r3, #8
 8006020:	4613      	mov	r3, r2
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	4413      	add	r3, r2
 8006026:	00da      	lsls	r2, r3, #3
 8006028:	1ad3      	subs	r3, r2, r3
 800602a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d106      	bne.n	8006040 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006036:	f043 0220 	orr.w	r2, r3, #32
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800603e:	e00a      	b.n	8006056 <I2C_DMAAbort+0x5e>
    }
    count--;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	3b01      	subs	r3, #1
 8006044:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006050:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006054:	d0ea      	beq.n	800602c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800605a:	2b00      	cmp	r3, #0
 800605c:	d003      	beq.n	8006066 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006062:	2200      	movs	r2, #0
 8006064:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800606a:	2b00      	cmp	r3, #0
 800606c:	d003      	beq.n	8006076 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006072:	2200      	movs	r2, #0
 8006074:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006084:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	2200      	movs	r2, #0
 800608a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006090:	2b00      	cmp	r3, #0
 8006092:	d003      	beq.n	800609c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006098:	2200      	movs	r2, #0
 800609a:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d003      	beq.n	80060ac <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a8:	2200      	movs	r2, #0
 80060aa:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f022 0201 	bic.w	r2, r2, #1
 80060ba:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	2b60      	cmp	r3, #96	; 0x60
 80060c6:	d10e      	bne.n	80060e6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	2220      	movs	r2, #32
 80060cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	2200      	movs	r2, #0
 80060d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	2200      	movs	r2, #0
 80060dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80060de:	6978      	ldr	r0, [r7, #20]
 80060e0:	f7fe fca1 	bl	8004a26 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80060e4:	e027      	b.n	8006136 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80060e6:	7cfb      	ldrb	r3, [r7, #19]
 80060e8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80060ec:	2b28      	cmp	r3, #40	; 0x28
 80060ee:	d117      	bne.n	8006120 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f042 0201 	orr.w	r2, r2, #1
 80060fe:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800610e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	2200      	movs	r2, #0
 8006114:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	2228      	movs	r2, #40	; 0x28
 800611a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800611e:	e007      	b.n	8006130 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	2220      	movs	r2, #32
 8006124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	2200      	movs	r2, #0
 800612c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006130:	6978      	ldr	r0, [r7, #20]
 8006132:	f7fe fc6f 	bl	8004a14 <HAL_I2C_ErrorCallback>
}
 8006136:	bf00      	nop
 8006138:	3718      	adds	r7, #24
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop
 8006140:	20000000 	.word	0x20000000
 8006144:	14f8b589 	.word	0x14f8b589

08006148 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	603b      	str	r3, [r7, #0]
 8006154:	4613      	mov	r3, r2
 8006156:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006158:	e025      	b.n	80061a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006160:	d021      	beq.n	80061a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006162:	f7fc fced 	bl	8002b40 <HAL_GetTick>
 8006166:	4602      	mov	r2, r0
 8006168:	69bb      	ldr	r3, [r7, #24]
 800616a:	1ad3      	subs	r3, r2, r3
 800616c:	683a      	ldr	r2, [r7, #0]
 800616e:	429a      	cmp	r2, r3
 8006170:	d302      	bcc.n	8006178 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d116      	bne.n	80061a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2200      	movs	r2, #0
 800617c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2220      	movs	r2, #32
 8006182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2200      	movs	r2, #0
 800618a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006192:	f043 0220 	orr.w	r2, r3, #32
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2200      	movs	r2, #0
 800619e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	e023      	b.n	80061ee <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	0c1b      	lsrs	r3, r3, #16
 80061aa:	b2db      	uxtb	r3, r3
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d10d      	bne.n	80061cc <I2C_WaitOnFlagUntilTimeout+0x84>
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	695b      	ldr	r3, [r3, #20]
 80061b6:	43da      	mvns	r2, r3
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	4013      	ands	r3, r2
 80061bc:	b29b      	uxth	r3, r3
 80061be:	2b00      	cmp	r3, #0
 80061c0:	bf0c      	ite	eq
 80061c2:	2301      	moveq	r3, #1
 80061c4:	2300      	movne	r3, #0
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	461a      	mov	r2, r3
 80061ca:	e00c      	b.n	80061e6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	699b      	ldr	r3, [r3, #24]
 80061d2:	43da      	mvns	r2, r3
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	4013      	ands	r3, r2
 80061d8:	b29b      	uxth	r3, r3
 80061da:	2b00      	cmp	r3, #0
 80061dc:	bf0c      	ite	eq
 80061de:	2301      	moveq	r3, #1
 80061e0:	2300      	movne	r3, #0
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	461a      	mov	r2, r3
 80061e6:	79fb      	ldrb	r3, [r7, #7]
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d0b6      	beq.n	800615a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80061ec:	2300      	movs	r3, #0
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3710      	adds	r7, #16
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}

080061f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80061f6:	b580      	push	{r7, lr}
 80061f8:	b084      	sub	sp, #16
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	60f8      	str	r0, [r7, #12]
 80061fe:	60b9      	str	r1, [r7, #8]
 8006200:	607a      	str	r2, [r7, #4]
 8006202:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006204:	e051      	b.n	80062aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	695b      	ldr	r3, [r3, #20]
 800620c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006210:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006214:	d123      	bne.n	800625e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006224:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800622e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2200      	movs	r2, #0
 8006234:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2220      	movs	r2, #32
 800623a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2200      	movs	r2, #0
 8006242:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800624a:	f043 0204 	orr.w	r2, r3, #4
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2200      	movs	r2, #0
 8006256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	e046      	b.n	80062ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006264:	d021      	beq.n	80062aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006266:	f7fc fc6b 	bl	8002b40 <HAL_GetTick>
 800626a:	4602      	mov	r2, r0
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	1ad3      	subs	r3, r2, r3
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	429a      	cmp	r2, r3
 8006274:	d302      	bcc.n	800627c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d116      	bne.n	80062aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2200      	movs	r2, #0
 8006280:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2220      	movs	r2, #32
 8006286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2200      	movs	r2, #0
 800628e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006296:	f043 0220 	orr.w	r2, r3, #32
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2200      	movs	r2, #0
 80062a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	e020      	b.n	80062ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	0c1b      	lsrs	r3, r3, #16
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d10c      	bne.n	80062ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	695b      	ldr	r3, [r3, #20]
 80062ba:	43da      	mvns	r2, r3
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	4013      	ands	r3, r2
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	bf14      	ite	ne
 80062c6:	2301      	movne	r3, #1
 80062c8:	2300      	moveq	r3, #0
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	e00b      	b.n	80062e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	699b      	ldr	r3, [r3, #24]
 80062d4:	43da      	mvns	r2, r3
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	4013      	ands	r3, r2
 80062da:	b29b      	uxth	r3, r3
 80062dc:	2b00      	cmp	r3, #0
 80062de:	bf14      	ite	ne
 80062e0:	2301      	movne	r3, #1
 80062e2:	2300      	moveq	r3, #0
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d18d      	bne.n	8006206 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80062ea:	2300      	movs	r3, #0
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3710      	adds	r7, #16
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b084      	sub	sp, #16
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	60f8      	str	r0, [r7, #12]
 80062fc:	60b9      	str	r1, [r7, #8]
 80062fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006300:	e02d      	b.n	800635e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006302:	68f8      	ldr	r0, [r7, #12]
 8006304:	f000 f900 	bl	8006508 <I2C_IsAcknowledgeFailed>
 8006308:	4603      	mov	r3, r0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d001      	beq.n	8006312 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	e02d      	b.n	800636e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006318:	d021      	beq.n	800635e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800631a:	f7fc fc11 	bl	8002b40 <HAL_GetTick>
 800631e:	4602      	mov	r2, r0
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	1ad3      	subs	r3, r2, r3
 8006324:	68ba      	ldr	r2, [r7, #8]
 8006326:	429a      	cmp	r2, r3
 8006328:	d302      	bcc.n	8006330 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d116      	bne.n	800635e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2200      	movs	r2, #0
 8006334:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2220      	movs	r2, #32
 800633a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2200      	movs	r2, #0
 8006342:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800634a:	f043 0220 	orr.w	r2, r3, #32
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2200      	movs	r2, #0
 8006356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	e007      	b.n	800636e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	695b      	ldr	r3, [r3, #20]
 8006364:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006368:	2b80      	cmp	r3, #128	; 0x80
 800636a:	d1ca      	bne.n	8006302 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800636c:	2300      	movs	r3, #0
}
 800636e:	4618      	mov	r0, r3
 8006370:	3710      	adds	r7, #16
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}

08006376 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006376:	b580      	push	{r7, lr}
 8006378:	b084      	sub	sp, #16
 800637a:	af00      	add	r7, sp, #0
 800637c:	60f8      	str	r0, [r7, #12]
 800637e:	60b9      	str	r1, [r7, #8]
 8006380:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006382:	e02d      	b.n	80063e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006384:	68f8      	ldr	r0, [r7, #12]
 8006386:	f000 f8bf 	bl	8006508 <I2C_IsAcknowledgeFailed>
 800638a:	4603      	mov	r3, r0
 800638c:	2b00      	cmp	r3, #0
 800638e:	d001      	beq.n	8006394 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	e02d      	b.n	80063f0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800639a:	d021      	beq.n	80063e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800639c:	f7fc fbd0 	bl	8002b40 <HAL_GetTick>
 80063a0:	4602      	mov	r2, r0
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	1ad3      	subs	r3, r2, r3
 80063a6:	68ba      	ldr	r2, [r7, #8]
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d302      	bcc.n	80063b2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d116      	bne.n	80063e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2200      	movs	r2, #0
 80063b6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2220      	movs	r2, #32
 80063bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063cc:	f043 0220 	orr.w	r2, r3, #32
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2200      	movs	r2, #0
 80063d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	e007      	b.n	80063f0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	695b      	ldr	r3, [r3, #20]
 80063e6:	f003 0304 	and.w	r3, r3, #4
 80063ea:	2b04      	cmp	r3, #4
 80063ec:	d1ca      	bne.n	8006384 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80063ee:	2300      	movs	r3, #0
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3710      	adds	r7, #16
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b085      	sub	sp, #20
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006400:	2300      	movs	r3, #0
 8006402:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006404:	4b13      	ldr	r3, [pc, #76]	; (8006454 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	08db      	lsrs	r3, r3, #3
 800640a:	4a13      	ldr	r2, [pc, #76]	; (8006458 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800640c:	fba2 2303 	umull	r2, r3, r2, r3
 8006410:	0a1a      	lsrs	r2, r3, #8
 8006412:	4613      	mov	r3, r2
 8006414:	009b      	lsls	r3, r3, #2
 8006416:	4413      	add	r3, r2
 8006418:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	3b01      	subs	r3, #1
 800641e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d107      	bne.n	8006436 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642a:	f043 0220 	orr.w	r2, r3, #32
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	e008      	b.n	8006448 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006440:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006444:	d0e9      	beq.n	800641a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006446:	2300      	movs	r3, #0
}
 8006448:	4618      	mov	r0, r3
 800644a:	3714      	adds	r7, #20
 800644c:	46bd      	mov	sp, r7
 800644e:	bc80      	pop	{r7}
 8006450:	4770      	bx	lr
 8006452:	bf00      	nop
 8006454:	20000000 	.word	0x20000000
 8006458:	14f8b589 	.word	0x14f8b589

0800645c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b084      	sub	sp, #16
 8006460:	af00      	add	r7, sp, #0
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	60b9      	str	r1, [r7, #8]
 8006466:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006468:	e042      	b.n	80064f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	695b      	ldr	r3, [r3, #20]
 8006470:	f003 0310 	and.w	r3, r3, #16
 8006474:	2b10      	cmp	r3, #16
 8006476:	d119      	bne.n	80064ac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f06f 0210 	mvn.w	r2, #16
 8006480:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2200      	movs	r2, #0
 8006486:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2220      	movs	r2, #32
 800648c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2200      	movs	r2, #0
 8006494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2200      	movs	r2, #0
 80064a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	e029      	b.n	8006500 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064ac:	f7fc fb48 	bl	8002b40 <HAL_GetTick>
 80064b0:	4602      	mov	r2, r0
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	1ad3      	subs	r3, r2, r3
 80064b6:	68ba      	ldr	r2, [r7, #8]
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d302      	bcc.n	80064c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d116      	bne.n	80064f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2200      	movs	r2, #0
 80064c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2220      	movs	r2, #32
 80064cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2200      	movs	r2, #0
 80064d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064dc:	f043 0220 	orr.w	r2, r3, #32
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2200      	movs	r2, #0
 80064e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	e007      	b.n	8006500 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	695b      	ldr	r3, [r3, #20]
 80064f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064fa:	2b40      	cmp	r3, #64	; 0x40
 80064fc:	d1b5      	bne.n	800646a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80064fe:	2300      	movs	r3, #0
}
 8006500:	4618      	mov	r0, r3
 8006502:	3710      	adds	r7, #16
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}

08006508 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006508:	b480      	push	{r7}
 800650a:	b083      	sub	sp, #12
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	695b      	ldr	r3, [r3, #20]
 8006516:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800651a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800651e:	d11b      	bne.n	8006558 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006528:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2220      	movs	r2, #32
 8006534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006544:	f043 0204 	orr.w	r2, r3, #4
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	e000      	b.n	800655a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006558:	2300      	movs	r3, #0
}
 800655a:	4618      	mov	r0, r3
 800655c:	370c      	adds	r7, #12
 800655e:	46bd      	mov	sp, r7
 8006560:	bc80      	pop	{r7}
 8006562:	4770      	bx	lr

08006564 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006570:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006574:	d103      	bne.n	800657e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2201      	movs	r2, #1
 800657a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800657c:	e007      	b.n	800658e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006582:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006586:	d102      	bne.n	800658e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2208      	movs	r2, #8
 800658c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800658e:	bf00      	nop
 8006590:	370c      	adds	r7, #12
 8006592:	46bd      	mov	sp, r7
 8006594:	bc80      	pop	{r7}
 8006596:	4770      	bx	lr

08006598 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b086      	sub	sp, #24
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d101      	bne.n	80065aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	e272      	b.n	8006a90 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f003 0301 	and.w	r3, r3, #1
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	f000 8087 	beq.w	80066c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80065b8:	4b92      	ldr	r3, [pc, #584]	; (8006804 <HAL_RCC_OscConfig+0x26c>)
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	f003 030c 	and.w	r3, r3, #12
 80065c0:	2b04      	cmp	r3, #4
 80065c2:	d00c      	beq.n	80065de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80065c4:	4b8f      	ldr	r3, [pc, #572]	; (8006804 <HAL_RCC_OscConfig+0x26c>)
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	f003 030c 	and.w	r3, r3, #12
 80065cc:	2b08      	cmp	r3, #8
 80065ce:	d112      	bne.n	80065f6 <HAL_RCC_OscConfig+0x5e>
 80065d0:	4b8c      	ldr	r3, [pc, #560]	; (8006804 <HAL_RCC_OscConfig+0x26c>)
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065dc:	d10b      	bne.n	80065f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065de:	4b89      	ldr	r3, [pc, #548]	; (8006804 <HAL_RCC_OscConfig+0x26c>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d06c      	beq.n	80066c4 <HAL_RCC_OscConfig+0x12c>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d168      	bne.n	80066c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	e24c      	b.n	8006a90 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065fe:	d106      	bne.n	800660e <HAL_RCC_OscConfig+0x76>
 8006600:	4b80      	ldr	r3, [pc, #512]	; (8006804 <HAL_RCC_OscConfig+0x26c>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a7f      	ldr	r2, [pc, #508]	; (8006804 <HAL_RCC_OscConfig+0x26c>)
 8006606:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800660a:	6013      	str	r3, [r2, #0]
 800660c:	e02e      	b.n	800666c <HAL_RCC_OscConfig+0xd4>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d10c      	bne.n	8006630 <HAL_RCC_OscConfig+0x98>
 8006616:	4b7b      	ldr	r3, [pc, #492]	; (8006804 <HAL_RCC_OscConfig+0x26c>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a7a      	ldr	r2, [pc, #488]	; (8006804 <HAL_RCC_OscConfig+0x26c>)
 800661c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006620:	6013      	str	r3, [r2, #0]
 8006622:	4b78      	ldr	r3, [pc, #480]	; (8006804 <HAL_RCC_OscConfig+0x26c>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a77      	ldr	r2, [pc, #476]	; (8006804 <HAL_RCC_OscConfig+0x26c>)
 8006628:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800662c:	6013      	str	r3, [r2, #0]
 800662e:	e01d      	b.n	800666c <HAL_RCC_OscConfig+0xd4>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006638:	d10c      	bne.n	8006654 <HAL_RCC_OscConfig+0xbc>
 800663a:	4b72      	ldr	r3, [pc, #456]	; (8006804 <HAL_RCC_OscConfig+0x26c>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a71      	ldr	r2, [pc, #452]	; (8006804 <HAL_RCC_OscConfig+0x26c>)
 8006640:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006644:	6013      	str	r3, [r2, #0]
 8006646:	4b6f      	ldr	r3, [pc, #444]	; (8006804 <HAL_RCC_OscConfig+0x26c>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a6e      	ldr	r2, [pc, #440]	; (8006804 <HAL_RCC_OscConfig+0x26c>)
 800664c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006650:	6013      	str	r3, [r2, #0]
 8006652:	e00b      	b.n	800666c <HAL_RCC_OscConfig+0xd4>
 8006654:	4b6b      	ldr	r3, [pc, #428]	; (8006804 <HAL_RCC_OscConfig+0x26c>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a6a      	ldr	r2, [pc, #424]	; (8006804 <HAL_RCC_OscConfig+0x26c>)
 800665a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800665e:	6013      	str	r3, [r2, #0]
 8006660:	4b68      	ldr	r3, [pc, #416]	; (8006804 <HAL_RCC_OscConfig+0x26c>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a67      	ldr	r2, [pc, #412]	; (8006804 <HAL_RCC_OscConfig+0x26c>)
 8006666:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800666a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d013      	beq.n	800669c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006674:	f7fc fa64 	bl	8002b40 <HAL_GetTick>
 8006678:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800667a:	e008      	b.n	800668e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800667c:	f7fc fa60 	bl	8002b40 <HAL_GetTick>
 8006680:	4602      	mov	r2, r0
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	1ad3      	subs	r3, r2, r3
 8006686:	2b64      	cmp	r3, #100	; 0x64
 8006688:	d901      	bls.n	800668e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800668a:	2303      	movs	r3, #3
 800668c:	e200      	b.n	8006a90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800668e:	4b5d      	ldr	r3, [pc, #372]	; (8006804 <HAL_RCC_OscConfig+0x26c>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006696:	2b00      	cmp	r3, #0
 8006698:	d0f0      	beq.n	800667c <HAL_RCC_OscConfig+0xe4>
 800669a:	e014      	b.n	80066c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800669c:	f7fc fa50 	bl	8002b40 <HAL_GetTick>
 80066a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066a2:	e008      	b.n	80066b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066a4:	f7fc fa4c 	bl	8002b40 <HAL_GetTick>
 80066a8:	4602      	mov	r2, r0
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	1ad3      	subs	r3, r2, r3
 80066ae:	2b64      	cmp	r3, #100	; 0x64
 80066b0:	d901      	bls.n	80066b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80066b2:	2303      	movs	r3, #3
 80066b4:	e1ec      	b.n	8006a90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066b6:	4b53      	ldr	r3, [pc, #332]	; (8006804 <HAL_RCC_OscConfig+0x26c>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d1f0      	bne.n	80066a4 <HAL_RCC_OscConfig+0x10c>
 80066c2:	e000      	b.n	80066c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f003 0302 	and.w	r3, r3, #2
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d063      	beq.n	800679a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80066d2:	4b4c      	ldr	r3, [pc, #304]	; (8006804 <HAL_RCC_OscConfig+0x26c>)
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	f003 030c 	and.w	r3, r3, #12
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d00b      	beq.n	80066f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80066de:	4b49      	ldr	r3, [pc, #292]	; (8006804 <HAL_RCC_OscConfig+0x26c>)
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	f003 030c 	and.w	r3, r3, #12
 80066e6:	2b08      	cmp	r3, #8
 80066e8:	d11c      	bne.n	8006724 <HAL_RCC_OscConfig+0x18c>
 80066ea:	4b46      	ldr	r3, [pc, #280]	; (8006804 <HAL_RCC_OscConfig+0x26c>)
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d116      	bne.n	8006724 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066f6:	4b43      	ldr	r3, [pc, #268]	; (8006804 <HAL_RCC_OscConfig+0x26c>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f003 0302 	and.w	r3, r3, #2
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d005      	beq.n	800670e <HAL_RCC_OscConfig+0x176>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	691b      	ldr	r3, [r3, #16]
 8006706:	2b01      	cmp	r3, #1
 8006708:	d001      	beq.n	800670e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	e1c0      	b.n	8006a90 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800670e:	4b3d      	ldr	r3, [pc, #244]	; (8006804 <HAL_RCC_OscConfig+0x26c>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	695b      	ldr	r3, [r3, #20]
 800671a:	00db      	lsls	r3, r3, #3
 800671c:	4939      	ldr	r1, [pc, #228]	; (8006804 <HAL_RCC_OscConfig+0x26c>)
 800671e:	4313      	orrs	r3, r2
 8006720:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006722:	e03a      	b.n	800679a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	691b      	ldr	r3, [r3, #16]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d020      	beq.n	800676e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800672c:	4b36      	ldr	r3, [pc, #216]	; (8006808 <HAL_RCC_OscConfig+0x270>)
 800672e:	2201      	movs	r2, #1
 8006730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006732:	f7fc fa05 	bl	8002b40 <HAL_GetTick>
 8006736:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006738:	e008      	b.n	800674c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800673a:	f7fc fa01 	bl	8002b40 <HAL_GetTick>
 800673e:	4602      	mov	r2, r0
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	1ad3      	subs	r3, r2, r3
 8006744:	2b02      	cmp	r3, #2
 8006746:	d901      	bls.n	800674c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006748:	2303      	movs	r3, #3
 800674a:	e1a1      	b.n	8006a90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800674c:	4b2d      	ldr	r3, [pc, #180]	; (8006804 <HAL_RCC_OscConfig+0x26c>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f003 0302 	and.w	r3, r3, #2
 8006754:	2b00      	cmp	r3, #0
 8006756:	d0f0      	beq.n	800673a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006758:	4b2a      	ldr	r3, [pc, #168]	; (8006804 <HAL_RCC_OscConfig+0x26c>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	695b      	ldr	r3, [r3, #20]
 8006764:	00db      	lsls	r3, r3, #3
 8006766:	4927      	ldr	r1, [pc, #156]	; (8006804 <HAL_RCC_OscConfig+0x26c>)
 8006768:	4313      	orrs	r3, r2
 800676a:	600b      	str	r3, [r1, #0]
 800676c:	e015      	b.n	800679a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800676e:	4b26      	ldr	r3, [pc, #152]	; (8006808 <HAL_RCC_OscConfig+0x270>)
 8006770:	2200      	movs	r2, #0
 8006772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006774:	f7fc f9e4 	bl	8002b40 <HAL_GetTick>
 8006778:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800677a:	e008      	b.n	800678e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800677c:	f7fc f9e0 	bl	8002b40 <HAL_GetTick>
 8006780:	4602      	mov	r2, r0
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	1ad3      	subs	r3, r2, r3
 8006786:	2b02      	cmp	r3, #2
 8006788:	d901      	bls.n	800678e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800678a:	2303      	movs	r3, #3
 800678c:	e180      	b.n	8006a90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800678e:	4b1d      	ldr	r3, [pc, #116]	; (8006804 <HAL_RCC_OscConfig+0x26c>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f003 0302 	and.w	r3, r3, #2
 8006796:	2b00      	cmp	r3, #0
 8006798:	d1f0      	bne.n	800677c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f003 0308 	and.w	r3, r3, #8
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d03a      	beq.n	800681c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	699b      	ldr	r3, [r3, #24]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d019      	beq.n	80067e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80067ae:	4b17      	ldr	r3, [pc, #92]	; (800680c <HAL_RCC_OscConfig+0x274>)
 80067b0:	2201      	movs	r2, #1
 80067b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067b4:	f7fc f9c4 	bl	8002b40 <HAL_GetTick>
 80067b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067ba:	e008      	b.n	80067ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067bc:	f7fc f9c0 	bl	8002b40 <HAL_GetTick>
 80067c0:	4602      	mov	r2, r0
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	1ad3      	subs	r3, r2, r3
 80067c6:	2b02      	cmp	r3, #2
 80067c8:	d901      	bls.n	80067ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80067ca:	2303      	movs	r3, #3
 80067cc:	e160      	b.n	8006a90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067ce:	4b0d      	ldr	r3, [pc, #52]	; (8006804 <HAL_RCC_OscConfig+0x26c>)
 80067d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d2:	f003 0302 	and.w	r3, r3, #2
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d0f0      	beq.n	80067bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80067da:	2001      	movs	r0, #1
 80067dc:	f000 fad8 	bl	8006d90 <RCC_Delay>
 80067e0:	e01c      	b.n	800681c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80067e2:	4b0a      	ldr	r3, [pc, #40]	; (800680c <HAL_RCC_OscConfig+0x274>)
 80067e4:	2200      	movs	r2, #0
 80067e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067e8:	f7fc f9aa 	bl	8002b40 <HAL_GetTick>
 80067ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067ee:	e00f      	b.n	8006810 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067f0:	f7fc f9a6 	bl	8002b40 <HAL_GetTick>
 80067f4:	4602      	mov	r2, r0
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	1ad3      	subs	r3, r2, r3
 80067fa:	2b02      	cmp	r3, #2
 80067fc:	d908      	bls.n	8006810 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80067fe:	2303      	movs	r3, #3
 8006800:	e146      	b.n	8006a90 <HAL_RCC_OscConfig+0x4f8>
 8006802:	bf00      	nop
 8006804:	40021000 	.word	0x40021000
 8006808:	42420000 	.word	0x42420000
 800680c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006810:	4b92      	ldr	r3, [pc, #584]	; (8006a5c <HAL_RCC_OscConfig+0x4c4>)
 8006812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006814:	f003 0302 	and.w	r3, r3, #2
 8006818:	2b00      	cmp	r3, #0
 800681a:	d1e9      	bne.n	80067f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 0304 	and.w	r3, r3, #4
 8006824:	2b00      	cmp	r3, #0
 8006826:	f000 80a6 	beq.w	8006976 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800682a:	2300      	movs	r3, #0
 800682c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800682e:	4b8b      	ldr	r3, [pc, #556]	; (8006a5c <HAL_RCC_OscConfig+0x4c4>)
 8006830:	69db      	ldr	r3, [r3, #28]
 8006832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006836:	2b00      	cmp	r3, #0
 8006838:	d10d      	bne.n	8006856 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800683a:	4b88      	ldr	r3, [pc, #544]	; (8006a5c <HAL_RCC_OscConfig+0x4c4>)
 800683c:	69db      	ldr	r3, [r3, #28]
 800683e:	4a87      	ldr	r2, [pc, #540]	; (8006a5c <HAL_RCC_OscConfig+0x4c4>)
 8006840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006844:	61d3      	str	r3, [r2, #28]
 8006846:	4b85      	ldr	r3, [pc, #532]	; (8006a5c <HAL_RCC_OscConfig+0x4c4>)
 8006848:	69db      	ldr	r3, [r3, #28]
 800684a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800684e:	60bb      	str	r3, [r7, #8]
 8006850:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006852:	2301      	movs	r3, #1
 8006854:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006856:	4b82      	ldr	r3, [pc, #520]	; (8006a60 <HAL_RCC_OscConfig+0x4c8>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800685e:	2b00      	cmp	r3, #0
 8006860:	d118      	bne.n	8006894 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006862:	4b7f      	ldr	r3, [pc, #508]	; (8006a60 <HAL_RCC_OscConfig+0x4c8>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a7e      	ldr	r2, [pc, #504]	; (8006a60 <HAL_RCC_OscConfig+0x4c8>)
 8006868:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800686c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800686e:	f7fc f967 	bl	8002b40 <HAL_GetTick>
 8006872:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006874:	e008      	b.n	8006888 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006876:	f7fc f963 	bl	8002b40 <HAL_GetTick>
 800687a:	4602      	mov	r2, r0
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	1ad3      	subs	r3, r2, r3
 8006880:	2b64      	cmp	r3, #100	; 0x64
 8006882:	d901      	bls.n	8006888 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006884:	2303      	movs	r3, #3
 8006886:	e103      	b.n	8006a90 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006888:	4b75      	ldr	r3, [pc, #468]	; (8006a60 <HAL_RCC_OscConfig+0x4c8>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006890:	2b00      	cmp	r3, #0
 8006892:	d0f0      	beq.n	8006876 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	68db      	ldr	r3, [r3, #12]
 8006898:	2b01      	cmp	r3, #1
 800689a:	d106      	bne.n	80068aa <HAL_RCC_OscConfig+0x312>
 800689c:	4b6f      	ldr	r3, [pc, #444]	; (8006a5c <HAL_RCC_OscConfig+0x4c4>)
 800689e:	6a1b      	ldr	r3, [r3, #32]
 80068a0:	4a6e      	ldr	r2, [pc, #440]	; (8006a5c <HAL_RCC_OscConfig+0x4c4>)
 80068a2:	f043 0301 	orr.w	r3, r3, #1
 80068a6:	6213      	str	r3, [r2, #32]
 80068a8:	e02d      	b.n	8006906 <HAL_RCC_OscConfig+0x36e>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d10c      	bne.n	80068cc <HAL_RCC_OscConfig+0x334>
 80068b2:	4b6a      	ldr	r3, [pc, #424]	; (8006a5c <HAL_RCC_OscConfig+0x4c4>)
 80068b4:	6a1b      	ldr	r3, [r3, #32]
 80068b6:	4a69      	ldr	r2, [pc, #420]	; (8006a5c <HAL_RCC_OscConfig+0x4c4>)
 80068b8:	f023 0301 	bic.w	r3, r3, #1
 80068bc:	6213      	str	r3, [r2, #32]
 80068be:	4b67      	ldr	r3, [pc, #412]	; (8006a5c <HAL_RCC_OscConfig+0x4c4>)
 80068c0:	6a1b      	ldr	r3, [r3, #32]
 80068c2:	4a66      	ldr	r2, [pc, #408]	; (8006a5c <HAL_RCC_OscConfig+0x4c4>)
 80068c4:	f023 0304 	bic.w	r3, r3, #4
 80068c8:	6213      	str	r3, [r2, #32]
 80068ca:	e01c      	b.n	8006906 <HAL_RCC_OscConfig+0x36e>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	2b05      	cmp	r3, #5
 80068d2:	d10c      	bne.n	80068ee <HAL_RCC_OscConfig+0x356>
 80068d4:	4b61      	ldr	r3, [pc, #388]	; (8006a5c <HAL_RCC_OscConfig+0x4c4>)
 80068d6:	6a1b      	ldr	r3, [r3, #32]
 80068d8:	4a60      	ldr	r2, [pc, #384]	; (8006a5c <HAL_RCC_OscConfig+0x4c4>)
 80068da:	f043 0304 	orr.w	r3, r3, #4
 80068de:	6213      	str	r3, [r2, #32]
 80068e0:	4b5e      	ldr	r3, [pc, #376]	; (8006a5c <HAL_RCC_OscConfig+0x4c4>)
 80068e2:	6a1b      	ldr	r3, [r3, #32]
 80068e4:	4a5d      	ldr	r2, [pc, #372]	; (8006a5c <HAL_RCC_OscConfig+0x4c4>)
 80068e6:	f043 0301 	orr.w	r3, r3, #1
 80068ea:	6213      	str	r3, [r2, #32]
 80068ec:	e00b      	b.n	8006906 <HAL_RCC_OscConfig+0x36e>
 80068ee:	4b5b      	ldr	r3, [pc, #364]	; (8006a5c <HAL_RCC_OscConfig+0x4c4>)
 80068f0:	6a1b      	ldr	r3, [r3, #32]
 80068f2:	4a5a      	ldr	r2, [pc, #360]	; (8006a5c <HAL_RCC_OscConfig+0x4c4>)
 80068f4:	f023 0301 	bic.w	r3, r3, #1
 80068f8:	6213      	str	r3, [r2, #32]
 80068fa:	4b58      	ldr	r3, [pc, #352]	; (8006a5c <HAL_RCC_OscConfig+0x4c4>)
 80068fc:	6a1b      	ldr	r3, [r3, #32]
 80068fe:	4a57      	ldr	r2, [pc, #348]	; (8006a5c <HAL_RCC_OscConfig+0x4c4>)
 8006900:	f023 0304 	bic.w	r3, r3, #4
 8006904:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	68db      	ldr	r3, [r3, #12]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d015      	beq.n	800693a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800690e:	f7fc f917 	bl	8002b40 <HAL_GetTick>
 8006912:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006914:	e00a      	b.n	800692c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006916:	f7fc f913 	bl	8002b40 <HAL_GetTick>
 800691a:	4602      	mov	r2, r0
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	1ad3      	subs	r3, r2, r3
 8006920:	f241 3288 	movw	r2, #5000	; 0x1388
 8006924:	4293      	cmp	r3, r2
 8006926:	d901      	bls.n	800692c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006928:	2303      	movs	r3, #3
 800692a:	e0b1      	b.n	8006a90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800692c:	4b4b      	ldr	r3, [pc, #300]	; (8006a5c <HAL_RCC_OscConfig+0x4c4>)
 800692e:	6a1b      	ldr	r3, [r3, #32]
 8006930:	f003 0302 	and.w	r3, r3, #2
 8006934:	2b00      	cmp	r3, #0
 8006936:	d0ee      	beq.n	8006916 <HAL_RCC_OscConfig+0x37e>
 8006938:	e014      	b.n	8006964 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800693a:	f7fc f901 	bl	8002b40 <HAL_GetTick>
 800693e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006940:	e00a      	b.n	8006958 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006942:	f7fc f8fd 	bl	8002b40 <HAL_GetTick>
 8006946:	4602      	mov	r2, r0
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	1ad3      	subs	r3, r2, r3
 800694c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006950:	4293      	cmp	r3, r2
 8006952:	d901      	bls.n	8006958 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006954:	2303      	movs	r3, #3
 8006956:	e09b      	b.n	8006a90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006958:	4b40      	ldr	r3, [pc, #256]	; (8006a5c <HAL_RCC_OscConfig+0x4c4>)
 800695a:	6a1b      	ldr	r3, [r3, #32]
 800695c:	f003 0302 	and.w	r3, r3, #2
 8006960:	2b00      	cmp	r3, #0
 8006962:	d1ee      	bne.n	8006942 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006964:	7dfb      	ldrb	r3, [r7, #23]
 8006966:	2b01      	cmp	r3, #1
 8006968:	d105      	bne.n	8006976 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800696a:	4b3c      	ldr	r3, [pc, #240]	; (8006a5c <HAL_RCC_OscConfig+0x4c4>)
 800696c:	69db      	ldr	r3, [r3, #28]
 800696e:	4a3b      	ldr	r2, [pc, #236]	; (8006a5c <HAL_RCC_OscConfig+0x4c4>)
 8006970:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006974:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	69db      	ldr	r3, [r3, #28]
 800697a:	2b00      	cmp	r3, #0
 800697c:	f000 8087 	beq.w	8006a8e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006980:	4b36      	ldr	r3, [pc, #216]	; (8006a5c <HAL_RCC_OscConfig+0x4c4>)
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	f003 030c 	and.w	r3, r3, #12
 8006988:	2b08      	cmp	r3, #8
 800698a:	d061      	beq.n	8006a50 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	69db      	ldr	r3, [r3, #28]
 8006990:	2b02      	cmp	r3, #2
 8006992:	d146      	bne.n	8006a22 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006994:	4b33      	ldr	r3, [pc, #204]	; (8006a64 <HAL_RCC_OscConfig+0x4cc>)
 8006996:	2200      	movs	r2, #0
 8006998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800699a:	f7fc f8d1 	bl	8002b40 <HAL_GetTick>
 800699e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80069a0:	e008      	b.n	80069b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069a2:	f7fc f8cd 	bl	8002b40 <HAL_GetTick>
 80069a6:	4602      	mov	r2, r0
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	1ad3      	subs	r3, r2, r3
 80069ac:	2b02      	cmp	r3, #2
 80069ae:	d901      	bls.n	80069b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80069b0:	2303      	movs	r3, #3
 80069b2:	e06d      	b.n	8006a90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80069b4:	4b29      	ldr	r3, [pc, #164]	; (8006a5c <HAL_RCC_OscConfig+0x4c4>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d1f0      	bne.n	80069a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6a1b      	ldr	r3, [r3, #32]
 80069c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069c8:	d108      	bne.n	80069dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80069ca:	4b24      	ldr	r3, [pc, #144]	; (8006a5c <HAL_RCC_OscConfig+0x4c4>)
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	4921      	ldr	r1, [pc, #132]	; (8006a5c <HAL_RCC_OscConfig+0x4c4>)
 80069d8:	4313      	orrs	r3, r2
 80069da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80069dc:	4b1f      	ldr	r3, [pc, #124]	; (8006a5c <HAL_RCC_OscConfig+0x4c4>)
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6a19      	ldr	r1, [r3, #32]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ec:	430b      	orrs	r3, r1
 80069ee:	491b      	ldr	r1, [pc, #108]	; (8006a5c <HAL_RCC_OscConfig+0x4c4>)
 80069f0:	4313      	orrs	r3, r2
 80069f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069f4:	4b1b      	ldr	r3, [pc, #108]	; (8006a64 <HAL_RCC_OscConfig+0x4cc>)
 80069f6:	2201      	movs	r2, #1
 80069f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069fa:	f7fc f8a1 	bl	8002b40 <HAL_GetTick>
 80069fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006a00:	e008      	b.n	8006a14 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a02:	f7fc f89d 	bl	8002b40 <HAL_GetTick>
 8006a06:	4602      	mov	r2, r0
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	1ad3      	subs	r3, r2, r3
 8006a0c:	2b02      	cmp	r3, #2
 8006a0e:	d901      	bls.n	8006a14 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006a10:	2303      	movs	r3, #3
 8006a12:	e03d      	b.n	8006a90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006a14:	4b11      	ldr	r3, [pc, #68]	; (8006a5c <HAL_RCC_OscConfig+0x4c4>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d0f0      	beq.n	8006a02 <HAL_RCC_OscConfig+0x46a>
 8006a20:	e035      	b.n	8006a8e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a22:	4b10      	ldr	r3, [pc, #64]	; (8006a64 <HAL_RCC_OscConfig+0x4cc>)
 8006a24:	2200      	movs	r2, #0
 8006a26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a28:	f7fc f88a 	bl	8002b40 <HAL_GetTick>
 8006a2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006a2e:	e008      	b.n	8006a42 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a30:	f7fc f886 	bl	8002b40 <HAL_GetTick>
 8006a34:	4602      	mov	r2, r0
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	1ad3      	subs	r3, r2, r3
 8006a3a:	2b02      	cmp	r3, #2
 8006a3c:	d901      	bls.n	8006a42 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006a3e:	2303      	movs	r3, #3
 8006a40:	e026      	b.n	8006a90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006a42:	4b06      	ldr	r3, [pc, #24]	; (8006a5c <HAL_RCC_OscConfig+0x4c4>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d1f0      	bne.n	8006a30 <HAL_RCC_OscConfig+0x498>
 8006a4e:	e01e      	b.n	8006a8e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	69db      	ldr	r3, [r3, #28]
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d107      	bne.n	8006a68 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e019      	b.n	8006a90 <HAL_RCC_OscConfig+0x4f8>
 8006a5c:	40021000 	.word	0x40021000
 8006a60:	40007000 	.word	0x40007000
 8006a64:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006a68:	4b0b      	ldr	r3, [pc, #44]	; (8006a98 <HAL_RCC_OscConfig+0x500>)
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6a1b      	ldr	r3, [r3, #32]
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d106      	bne.n	8006a8a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d001      	beq.n	8006a8e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e000      	b.n	8006a90 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006a8e:	2300      	movs	r3, #0
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3718      	adds	r7, #24
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}
 8006a98:	40021000 	.word	0x40021000

08006a9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b084      	sub	sp, #16
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d101      	bne.n	8006ab0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006aac:	2301      	movs	r3, #1
 8006aae:	e0d0      	b.n	8006c52 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ab0:	4b6a      	ldr	r3, [pc, #424]	; (8006c5c <HAL_RCC_ClockConfig+0x1c0>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 0307 	and.w	r3, r3, #7
 8006ab8:	683a      	ldr	r2, [r7, #0]
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d910      	bls.n	8006ae0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006abe:	4b67      	ldr	r3, [pc, #412]	; (8006c5c <HAL_RCC_ClockConfig+0x1c0>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f023 0207 	bic.w	r2, r3, #7
 8006ac6:	4965      	ldr	r1, [pc, #404]	; (8006c5c <HAL_RCC_ClockConfig+0x1c0>)
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	4313      	orrs	r3, r2
 8006acc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ace:	4b63      	ldr	r3, [pc, #396]	; (8006c5c <HAL_RCC_ClockConfig+0x1c0>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f003 0307 	and.w	r3, r3, #7
 8006ad6:	683a      	ldr	r2, [r7, #0]
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d001      	beq.n	8006ae0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	e0b8      	b.n	8006c52 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f003 0302 	and.w	r3, r3, #2
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d020      	beq.n	8006b2e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f003 0304 	and.w	r3, r3, #4
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d005      	beq.n	8006b04 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006af8:	4b59      	ldr	r3, [pc, #356]	; (8006c60 <HAL_RCC_ClockConfig+0x1c4>)
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	4a58      	ldr	r2, [pc, #352]	; (8006c60 <HAL_RCC_ClockConfig+0x1c4>)
 8006afe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006b02:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f003 0308 	and.w	r3, r3, #8
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d005      	beq.n	8006b1c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006b10:	4b53      	ldr	r3, [pc, #332]	; (8006c60 <HAL_RCC_ClockConfig+0x1c4>)
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	4a52      	ldr	r2, [pc, #328]	; (8006c60 <HAL_RCC_ClockConfig+0x1c4>)
 8006b16:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006b1a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b1c:	4b50      	ldr	r3, [pc, #320]	; (8006c60 <HAL_RCC_ClockConfig+0x1c4>)
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	494d      	ldr	r1, [pc, #308]	; (8006c60 <HAL_RCC_ClockConfig+0x1c4>)
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f003 0301 	and.w	r3, r3, #1
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d040      	beq.n	8006bbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d107      	bne.n	8006b52 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b42:	4b47      	ldr	r3, [pc, #284]	; (8006c60 <HAL_RCC_ClockConfig+0x1c4>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d115      	bne.n	8006b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e07f      	b.n	8006c52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	2b02      	cmp	r3, #2
 8006b58:	d107      	bne.n	8006b6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b5a:	4b41      	ldr	r3, [pc, #260]	; (8006c60 <HAL_RCC_ClockConfig+0x1c4>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d109      	bne.n	8006b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b66:	2301      	movs	r3, #1
 8006b68:	e073      	b.n	8006c52 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b6a:	4b3d      	ldr	r3, [pc, #244]	; (8006c60 <HAL_RCC_ClockConfig+0x1c4>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f003 0302 	and.w	r3, r3, #2
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d101      	bne.n	8006b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	e06b      	b.n	8006c52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b7a:	4b39      	ldr	r3, [pc, #228]	; (8006c60 <HAL_RCC_ClockConfig+0x1c4>)
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	f023 0203 	bic.w	r2, r3, #3
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	4936      	ldr	r1, [pc, #216]	; (8006c60 <HAL_RCC_ClockConfig+0x1c4>)
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006b8c:	f7fb ffd8 	bl	8002b40 <HAL_GetTick>
 8006b90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b92:	e00a      	b.n	8006baa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b94:	f7fb ffd4 	bl	8002b40 <HAL_GetTick>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	1ad3      	subs	r3, r2, r3
 8006b9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d901      	bls.n	8006baa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006ba6:	2303      	movs	r3, #3
 8006ba8:	e053      	b.n	8006c52 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006baa:	4b2d      	ldr	r3, [pc, #180]	; (8006c60 <HAL_RCC_ClockConfig+0x1c4>)
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	f003 020c 	and.w	r2, r3, #12
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	009b      	lsls	r3, r3, #2
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d1eb      	bne.n	8006b94 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006bbc:	4b27      	ldr	r3, [pc, #156]	; (8006c5c <HAL_RCC_ClockConfig+0x1c0>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f003 0307 	and.w	r3, r3, #7
 8006bc4:	683a      	ldr	r2, [r7, #0]
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	d210      	bcs.n	8006bec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bca:	4b24      	ldr	r3, [pc, #144]	; (8006c5c <HAL_RCC_ClockConfig+0x1c0>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f023 0207 	bic.w	r2, r3, #7
 8006bd2:	4922      	ldr	r1, [pc, #136]	; (8006c5c <HAL_RCC_ClockConfig+0x1c0>)
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bda:	4b20      	ldr	r3, [pc, #128]	; (8006c5c <HAL_RCC_ClockConfig+0x1c0>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f003 0307 	and.w	r3, r3, #7
 8006be2:	683a      	ldr	r2, [r7, #0]
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d001      	beq.n	8006bec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	e032      	b.n	8006c52 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f003 0304 	and.w	r3, r3, #4
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d008      	beq.n	8006c0a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006bf8:	4b19      	ldr	r3, [pc, #100]	; (8006c60 <HAL_RCC_ClockConfig+0x1c4>)
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	4916      	ldr	r1, [pc, #88]	; (8006c60 <HAL_RCC_ClockConfig+0x1c4>)
 8006c06:	4313      	orrs	r3, r2
 8006c08:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 0308 	and.w	r3, r3, #8
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d009      	beq.n	8006c2a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006c16:	4b12      	ldr	r3, [pc, #72]	; (8006c60 <HAL_RCC_ClockConfig+0x1c4>)
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	691b      	ldr	r3, [r3, #16]
 8006c22:	00db      	lsls	r3, r3, #3
 8006c24:	490e      	ldr	r1, [pc, #56]	; (8006c60 <HAL_RCC_ClockConfig+0x1c4>)
 8006c26:	4313      	orrs	r3, r2
 8006c28:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006c2a:	f000 f821 	bl	8006c70 <HAL_RCC_GetSysClockFreq>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	4b0b      	ldr	r3, [pc, #44]	; (8006c60 <HAL_RCC_ClockConfig+0x1c4>)
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	091b      	lsrs	r3, r3, #4
 8006c36:	f003 030f 	and.w	r3, r3, #15
 8006c3a:	490a      	ldr	r1, [pc, #40]	; (8006c64 <HAL_RCC_ClockConfig+0x1c8>)
 8006c3c:	5ccb      	ldrb	r3, [r1, r3]
 8006c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8006c42:	4a09      	ldr	r2, [pc, #36]	; (8006c68 <HAL_RCC_ClockConfig+0x1cc>)
 8006c44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006c46:	4b09      	ldr	r3, [pc, #36]	; (8006c6c <HAL_RCC_ClockConfig+0x1d0>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f7fb ff36 	bl	8002abc <HAL_InitTick>

  return HAL_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3710      	adds	r7, #16
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
 8006c5a:	bf00      	nop
 8006c5c:	40022000 	.word	0x40022000
 8006c60:	40021000 	.word	0x40021000
 8006c64:	08007148 	.word	0x08007148
 8006c68:	20000000 	.word	0x20000000
 8006c6c:	20000004 	.word	0x20000004

08006c70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c70:	b490      	push	{r4, r7}
 8006c72:	b08a      	sub	sp, #40	; 0x28
 8006c74:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006c76:	4b29      	ldr	r3, [pc, #164]	; (8006d1c <HAL_RCC_GetSysClockFreq+0xac>)
 8006c78:	1d3c      	adds	r4, r7, #4
 8006c7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006c7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006c80:	f240 2301 	movw	r3, #513	; 0x201
 8006c84:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006c86:	2300      	movs	r3, #0
 8006c88:	61fb      	str	r3, [r7, #28]
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	61bb      	str	r3, [r7, #24]
 8006c8e:	2300      	movs	r3, #0
 8006c90:	627b      	str	r3, [r7, #36]	; 0x24
 8006c92:	2300      	movs	r3, #0
 8006c94:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006c96:	2300      	movs	r3, #0
 8006c98:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006c9a:	4b21      	ldr	r3, [pc, #132]	; (8006d20 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	f003 030c 	and.w	r3, r3, #12
 8006ca6:	2b04      	cmp	r3, #4
 8006ca8:	d002      	beq.n	8006cb0 <HAL_RCC_GetSysClockFreq+0x40>
 8006caa:	2b08      	cmp	r3, #8
 8006cac:	d003      	beq.n	8006cb6 <HAL_RCC_GetSysClockFreq+0x46>
 8006cae:	e02b      	b.n	8006d08 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006cb0:	4b1c      	ldr	r3, [pc, #112]	; (8006d24 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006cb2:	623b      	str	r3, [r7, #32]
      break;
 8006cb4:	e02b      	b.n	8006d0e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	0c9b      	lsrs	r3, r3, #18
 8006cba:	f003 030f 	and.w	r3, r3, #15
 8006cbe:	3328      	adds	r3, #40	; 0x28
 8006cc0:	443b      	add	r3, r7
 8006cc2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006cc6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006cc8:	69fb      	ldr	r3, [r7, #28]
 8006cca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d012      	beq.n	8006cf8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006cd2:	4b13      	ldr	r3, [pc, #76]	; (8006d20 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	0c5b      	lsrs	r3, r3, #17
 8006cd8:	f003 0301 	and.w	r3, r3, #1
 8006cdc:	3328      	adds	r3, #40	; 0x28
 8006cde:	443b      	add	r3, r7
 8006ce0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006ce4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	4a0e      	ldr	r2, [pc, #56]	; (8006d24 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006cea:	fb03 f202 	mul.w	r2, r3, r2
 8006cee:	69bb      	ldr	r3, [r7, #24]
 8006cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cf4:	627b      	str	r3, [r7, #36]	; 0x24
 8006cf6:	e004      	b.n	8006d02 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	4a0b      	ldr	r2, [pc, #44]	; (8006d28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006cfc:	fb02 f303 	mul.w	r3, r2, r3
 8006d00:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d04:	623b      	str	r3, [r7, #32]
      break;
 8006d06:	e002      	b.n	8006d0e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006d08:	4b06      	ldr	r3, [pc, #24]	; (8006d24 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006d0a:	623b      	str	r3, [r7, #32]
      break;
 8006d0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d0e:	6a3b      	ldr	r3, [r7, #32]
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3728      	adds	r7, #40	; 0x28
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bc90      	pop	{r4, r7}
 8006d18:	4770      	bx	lr
 8006d1a:	bf00      	nop
 8006d1c:	08007128 	.word	0x08007128
 8006d20:	40021000 	.word	0x40021000
 8006d24:	007a1200 	.word	0x007a1200
 8006d28:	003d0900 	.word	0x003d0900

08006d2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d30:	4b02      	ldr	r3, [pc, #8]	; (8006d3c <HAL_RCC_GetHCLKFreq+0x10>)
 8006d32:	681b      	ldr	r3, [r3, #0]
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bc80      	pop	{r7}
 8006d3a:	4770      	bx	lr
 8006d3c:	20000000 	.word	0x20000000

08006d40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006d44:	f7ff fff2 	bl	8006d2c <HAL_RCC_GetHCLKFreq>
 8006d48:	4602      	mov	r2, r0
 8006d4a:	4b05      	ldr	r3, [pc, #20]	; (8006d60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	0a1b      	lsrs	r3, r3, #8
 8006d50:	f003 0307 	and.w	r3, r3, #7
 8006d54:	4903      	ldr	r1, [pc, #12]	; (8006d64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d56:	5ccb      	ldrb	r3, [r1, r3]
 8006d58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	bd80      	pop	{r7, pc}
 8006d60:	40021000 	.word	0x40021000
 8006d64:	08007158 	.word	0x08007158

08006d68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006d6c:	f7ff ffde 	bl	8006d2c <HAL_RCC_GetHCLKFreq>
 8006d70:	4602      	mov	r2, r0
 8006d72:	4b05      	ldr	r3, [pc, #20]	; (8006d88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	0adb      	lsrs	r3, r3, #11
 8006d78:	f003 0307 	and.w	r3, r3, #7
 8006d7c:	4903      	ldr	r1, [pc, #12]	; (8006d8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006d7e:	5ccb      	ldrb	r3, [r1, r3]
 8006d80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	bd80      	pop	{r7, pc}
 8006d88:	40021000 	.word	0x40021000
 8006d8c:	08007158 	.word	0x08007158

08006d90 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b085      	sub	sp, #20
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006d98:	4b0a      	ldr	r3, [pc, #40]	; (8006dc4 <RCC_Delay+0x34>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a0a      	ldr	r2, [pc, #40]	; (8006dc8 <RCC_Delay+0x38>)
 8006d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8006da2:	0a5b      	lsrs	r3, r3, #9
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	fb02 f303 	mul.w	r3, r2, r3
 8006daa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006dac:	bf00      	nop
  }
  while (Delay --);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	1e5a      	subs	r2, r3, #1
 8006db2:	60fa      	str	r2, [r7, #12]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d1f9      	bne.n	8006dac <RCC_Delay+0x1c>
}
 8006db8:	bf00      	nop
 8006dba:	bf00      	nop
 8006dbc:	3714      	adds	r7, #20
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bc80      	pop	{r7}
 8006dc2:	4770      	bx	lr
 8006dc4:	20000000 	.word	0x20000000
 8006dc8:	10624dd3 	.word	0x10624dd3

08006dcc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b086      	sub	sp, #24
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	613b      	str	r3, [r7, #16]
 8006dd8:	2300      	movs	r3, #0
 8006dda:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f003 0301 	and.w	r3, r3, #1
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d07d      	beq.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006de8:	2300      	movs	r3, #0
 8006dea:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006dec:	4b4f      	ldr	r3, [pc, #316]	; (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006dee:	69db      	ldr	r3, [r3, #28]
 8006df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d10d      	bne.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006df8:	4b4c      	ldr	r3, [pc, #304]	; (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006dfa:	69db      	ldr	r3, [r3, #28]
 8006dfc:	4a4b      	ldr	r2, [pc, #300]	; (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006dfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e02:	61d3      	str	r3, [r2, #28]
 8006e04:	4b49      	ldr	r3, [pc, #292]	; (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e06:	69db      	ldr	r3, [r3, #28]
 8006e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e0c:	60bb      	str	r3, [r7, #8]
 8006e0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e10:	2301      	movs	r3, #1
 8006e12:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e14:	4b46      	ldr	r3, [pc, #280]	; (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d118      	bne.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e20:	4b43      	ldr	r3, [pc, #268]	; (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a42      	ldr	r2, [pc, #264]	; (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006e26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e2a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e2c:	f7fb fe88 	bl	8002b40 <HAL_GetTick>
 8006e30:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e32:	e008      	b.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e34:	f7fb fe84 	bl	8002b40 <HAL_GetTick>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	1ad3      	subs	r3, r2, r3
 8006e3e:	2b64      	cmp	r3, #100	; 0x64
 8006e40:	d901      	bls.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006e42:	2303      	movs	r3, #3
 8006e44:	e06d      	b.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e46:	4b3a      	ldr	r3, [pc, #232]	; (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d0f0      	beq.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006e52:	4b36      	ldr	r3, [pc, #216]	; (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e54:	6a1b      	ldr	r3, [r3, #32]
 8006e56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e5a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d02e      	beq.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e6a:	68fa      	ldr	r2, [r7, #12]
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d027      	beq.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006e70:	4b2e      	ldr	r3, [pc, #184]	; (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e72:	6a1b      	ldr	r3, [r3, #32]
 8006e74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e78:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006e7a:	4b2e      	ldr	r3, [pc, #184]	; (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006e80:	4b2c      	ldr	r3, [pc, #176]	; (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006e82:	2200      	movs	r2, #0
 8006e84:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006e86:	4a29      	ldr	r2, [pc, #164]	; (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f003 0301 	and.w	r3, r3, #1
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d014      	beq.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e96:	f7fb fe53 	bl	8002b40 <HAL_GetTick>
 8006e9a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e9c:	e00a      	b.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e9e:	f7fb fe4f 	bl	8002b40 <HAL_GetTick>
 8006ea2:	4602      	mov	r2, r0
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	1ad3      	subs	r3, r2, r3
 8006ea8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d901      	bls.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006eb0:	2303      	movs	r3, #3
 8006eb2:	e036      	b.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006eb4:	4b1d      	ldr	r3, [pc, #116]	; (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006eb6:	6a1b      	ldr	r3, [r3, #32]
 8006eb8:	f003 0302 	and.w	r3, r3, #2
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d0ee      	beq.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ec0:	4b1a      	ldr	r3, [pc, #104]	; (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ec2:	6a1b      	ldr	r3, [r3, #32]
 8006ec4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	4917      	ldr	r1, [pc, #92]	; (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006ed2:	7dfb      	ldrb	r3, [r7, #23]
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d105      	bne.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ed8:	4b14      	ldr	r3, [pc, #80]	; (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006eda:	69db      	ldr	r3, [r3, #28]
 8006edc:	4a13      	ldr	r2, [pc, #76]	; (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ede:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ee2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f003 0302 	and.w	r3, r3, #2
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d008      	beq.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006ef0:	4b0e      	ldr	r3, [pc, #56]	; (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	689b      	ldr	r3, [r3, #8]
 8006efc:	490b      	ldr	r1, [pc, #44]	; (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006efe:	4313      	orrs	r3, r2
 8006f00:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f003 0310 	and.w	r3, r3, #16
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d008      	beq.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006f0e:	4b07      	ldr	r3, [pc, #28]	; (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	68db      	ldr	r3, [r3, #12]
 8006f1a:	4904      	ldr	r1, [pc, #16]	; (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006f20:	2300      	movs	r3, #0
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3718      	adds	r7, #24
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}
 8006f2a:	bf00      	nop
 8006f2c:	40021000 	.word	0x40021000
 8006f30:	40007000 	.word	0x40007000
 8006f34:	42420440 	.word	0x42420440

08006f38 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006f38:	b590      	push	{r4, r7, lr}
 8006f3a:	b08d      	sub	sp, #52	; 0x34
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006f40:	4b58      	ldr	r3, [pc, #352]	; (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8006f42:	f107 040c 	add.w	r4, r7, #12
 8006f46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006f48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006f4c:	f240 2301 	movw	r3, #513	; 0x201
 8006f50:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8006f52:	2300      	movs	r3, #0
 8006f54:	627b      	str	r3, [r7, #36]	; 0x24
 8006f56:	2300      	movs	r3, #0
 8006f58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	61fb      	str	r3, [r7, #28]
 8006f62:	2300      	movs	r3, #0
 8006f64:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2b10      	cmp	r3, #16
 8006f6a:	d00a      	beq.n	8006f82 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2b10      	cmp	r3, #16
 8006f70:	f200 808e 	bhi.w	8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	d049      	beq.n	800700e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2b02      	cmp	r3, #2
 8006f7e:	d079      	beq.n	8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8006f80:	e086      	b.n	8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8006f82:	4b49      	ldr	r3, [pc, #292]	; (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8006f88:	4b47      	ldr	r3, [pc, #284]	; (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d07f      	beq.n	8007094 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006f94:	69fb      	ldr	r3, [r7, #28]
 8006f96:	0c9b      	lsrs	r3, r3, #18
 8006f98:	f003 030f 	and.w	r3, r3, #15
 8006f9c:	3330      	adds	r3, #48	; 0x30
 8006f9e:	443b      	add	r3, r7
 8006fa0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006fa4:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006fa6:	69fb      	ldr	r3, [r7, #28]
 8006fa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d017      	beq.n	8006fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006fb0:	4b3d      	ldr	r3, [pc, #244]	; (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	0c5b      	lsrs	r3, r3, #17
 8006fb6:	f003 0301 	and.w	r3, r3, #1
 8006fba:	3330      	adds	r3, #48	; 0x30
 8006fbc:	443b      	add	r3, r7
 8006fbe:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006fc2:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006fc4:	69fb      	ldr	r3, [r7, #28]
 8006fc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d00d      	beq.n	8006fea <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8006fce:	4a37      	ldr	r2, [pc, #220]	; (80070ac <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8006fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd2:	fbb2 f2f3 	udiv	r2, r2, r3
 8006fd6:	6a3b      	ldr	r3, [r7, #32]
 8006fd8:	fb02 f303 	mul.w	r3, r2, r3
 8006fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fde:	e004      	b.n	8006fea <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006fe0:	6a3b      	ldr	r3, [r7, #32]
 8006fe2:	4a33      	ldr	r2, [pc, #204]	; (80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006fe4:	fb02 f303 	mul.w	r3, r2, r3
 8006fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8006fea:	4b2f      	ldr	r3, [pc, #188]	; (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ff2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ff6:	d102      	bne.n	8006ffe <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8006ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ffa:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006ffc:	e04a      	b.n	8007094 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8006ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007000:	005b      	lsls	r3, r3, #1
 8007002:	4a2c      	ldr	r2, [pc, #176]	; (80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8007004:	fba2 2303 	umull	r2, r3, r2, r3
 8007008:	085b      	lsrs	r3, r3, #1
 800700a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800700c:	e042      	b.n	8007094 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 800700e:	4b26      	ldr	r3, [pc, #152]	; (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8007010:	6a1b      	ldr	r3, [r3, #32]
 8007012:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8007014:	69fb      	ldr	r3, [r7, #28]
 8007016:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800701a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800701e:	d108      	bne.n	8007032 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8007020:	69fb      	ldr	r3, [r7, #28]
 8007022:	f003 0302 	and.w	r3, r3, #2
 8007026:	2b00      	cmp	r3, #0
 8007028:	d003      	beq.n	8007032 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 800702a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800702e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007030:	e01f      	b.n	8007072 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8007032:	69fb      	ldr	r3, [r7, #28]
 8007034:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007038:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800703c:	d109      	bne.n	8007052 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 800703e:	4b1a      	ldr	r3, [pc, #104]	; (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8007040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007042:	f003 0302 	and.w	r3, r3, #2
 8007046:	2b00      	cmp	r3, #0
 8007048:	d003      	beq.n	8007052 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 800704a:	f649 4340 	movw	r3, #40000	; 0x9c40
 800704e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007050:	e00f      	b.n	8007072 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8007052:	69fb      	ldr	r3, [r7, #28]
 8007054:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007058:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800705c:	d11c      	bne.n	8007098 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800705e:	4b12      	ldr	r3, [pc, #72]	; (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007066:	2b00      	cmp	r3, #0
 8007068:	d016      	beq.n	8007098 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 800706a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800706e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8007070:	e012      	b.n	8007098 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8007072:	e011      	b.n	8007098 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8007074:	f7ff fe78 	bl	8006d68 <HAL_RCC_GetPCLK2Freq>
 8007078:	4602      	mov	r2, r0
 800707a:	4b0b      	ldr	r3, [pc, #44]	; (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	0b9b      	lsrs	r3, r3, #14
 8007080:	f003 0303 	and.w	r3, r3, #3
 8007084:	3301      	adds	r3, #1
 8007086:	005b      	lsls	r3, r3, #1
 8007088:	fbb2 f3f3 	udiv	r3, r2, r3
 800708c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800708e:	e004      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8007090:	bf00      	nop
 8007092:	e002      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8007094:	bf00      	nop
 8007096:	e000      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8007098:	bf00      	nop
    }
  }
  return (frequency);
 800709a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800709c:	4618      	mov	r0, r3
 800709e:	3734      	adds	r7, #52	; 0x34
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd90      	pop	{r4, r7, pc}
 80070a4:	08007138 	.word	0x08007138
 80070a8:	40021000 	.word	0x40021000
 80070ac:	007a1200 	.word	0x007a1200
 80070b0:	003d0900 	.word	0x003d0900
 80070b4:	aaaaaaab 	.word	0xaaaaaaab

080070b8 <__libc_init_array>:
 80070b8:	b570      	push	{r4, r5, r6, lr}
 80070ba:	2600      	movs	r6, #0
 80070bc:	4d0c      	ldr	r5, [pc, #48]	; (80070f0 <__libc_init_array+0x38>)
 80070be:	4c0d      	ldr	r4, [pc, #52]	; (80070f4 <__libc_init_array+0x3c>)
 80070c0:	1b64      	subs	r4, r4, r5
 80070c2:	10a4      	asrs	r4, r4, #2
 80070c4:	42a6      	cmp	r6, r4
 80070c6:	d109      	bne.n	80070dc <__libc_init_array+0x24>
 80070c8:	f000 f822 	bl	8007110 <_init>
 80070cc:	2600      	movs	r6, #0
 80070ce:	4d0a      	ldr	r5, [pc, #40]	; (80070f8 <__libc_init_array+0x40>)
 80070d0:	4c0a      	ldr	r4, [pc, #40]	; (80070fc <__libc_init_array+0x44>)
 80070d2:	1b64      	subs	r4, r4, r5
 80070d4:	10a4      	asrs	r4, r4, #2
 80070d6:	42a6      	cmp	r6, r4
 80070d8:	d105      	bne.n	80070e6 <__libc_init_array+0x2e>
 80070da:	bd70      	pop	{r4, r5, r6, pc}
 80070dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80070e0:	4798      	blx	r3
 80070e2:	3601      	adds	r6, #1
 80070e4:	e7ee      	b.n	80070c4 <__libc_init_array+0xc>
 80070e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80070ea:	4798      	blx	r3
 80070ec:	3601      	adds	r6, #1
 80070ee:	e7f2      	b.n	80070d6 <__libc_init_array+0x1e>
 80070f0:	08007168 	.word	0x08007168
 80070f4:	08007168 	.word	0x08007168
 80070f8:	08007168 	.word	0x08007168
 80070fc:	0800716c 	.word	0x0800716c

08007100 <memset>:
 8007100:	4603      	mov	r3, r0
 8007102:	4402      	add	r2, r0
 8007104:	4293      	cmp	r3, r2
 8007106:	d100      	bne.n	800710a <memset+0xa>
 8007108:	4770      	bx	lr
 800710a:	f803 1b01 	strb.w	r1, [r3], #1
 800710e:	e7f9      	b.n	8007104 <memset+0x4>

08007110 <_init>:
 8007110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007112:	bf00      	nop
 8007114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007116:	bc08      	pop	{r3}
 8007118:	469e      	mov	lr, r3
 800711a:	4770      	bx	lr

0800711c <_fini>:
 800711c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800711e:	bf00      	nop
 8007120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007122:	bc08      	pop	{r3}
 8007124:	469e      	mov	lr, r3
 8007126:	4770      	bx	lr
